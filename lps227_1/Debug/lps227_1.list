
lps227_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001198c  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  08011bc8  08011bc8  00021bc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080121f4  080121f4  000221f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080121fc  080121fc  000221fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012200  08012200  00022200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000200  20000000  08012204  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000047b  20000200  08012404  00030200  2**2
                  ALLOC
  8 ._user_heap_stack 00000605  2000067b  08012404  0003067b  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002b023  00000000  00000000  00030236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004c13  00000000  00000000  0005b259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c70  00000000  00000000  0005fe70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001a50  00000000  00000000  00061ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b718  00000000  00000000  00063530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000289bd  00000000  00000000  0009ec48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001617a8  00000000  00000000  000c7605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00228dad  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008b30  00000000  00000000  00228e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000200 	.word	0x20000200
 8000254:	00000000 	.word	0x00000000
 8000258:	08011bac 	.word	0x08011bac

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000204 	.word	0x20000204
 8000274:	08011bac 	.word	0x08011bac

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	; 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc4:	f000 b982 	b.w	8000ecc <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000be4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000be6:	4604      	mov	r4, r0
 8000be8:	460f      	mov	r7, r1
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d148      	bne.n	8000c80 <__udivmoddi4+0xa0>
 8000bee:	428a      	cmp	r2, r1
 8000bf0:	4694      	mov	ip, r2
 8000bf2:	d961      	bls.n	8000cb8 <__udivmoddi4+0xd8>
 8000bf4:	fab2 f382 	clz	r3, r2
 8000bf8:	b143      	cbz	r3, 8000c0c <__udivmoddi4+0x2c>
 8000bfa:	f1c3 0120 	rsb	r1, r3, #32
 8000bfe:	409f      	lsls	r7, r3
 8000c00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c04:	409c      	lsls	r4, r3
 8000c06:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0a:	430f      	orrs	r7, r1
 8000c0c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000c10:	fa1f fe8c 	uxth.w	lr, ip
 8000c14:	0c22      	lsrs	r2, r4, #16
 8000c16:	fbb7 f6f1 	udiv	r6, r7, r1
 8000c1a:	fb01 7716 	mls	r7, r1, r6, r7
 8000c1e:	fb06 f00e 	mul.w	r0, r6, lr
 8000c22:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c26:	4290      	cmp	r0, r2
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x5c>
 8000c2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000c2e:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 8000c32:	d202      	bcs.n	8000c3a <__udivmoddi4+0x5a>
 8000c34:	4290      	cmp	r0, r2
 8000c36:	f200 8137 	bhi.w	8000ea8 <__udivmoddi4+0x2c8>
 8000c3a:	463e      	mov	r6, r7
 8000c3c:	1a12      	subs	r2, r2, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb2 f0f1 	udiv	r0, r2, r1
 8000c44:	fb01 2210 	mls	r2, r1, r0, r2
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x86>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5c:	d202      	bcs.n	8000c64 <__udivmoddi4+0x84>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	f200 811c 	bhi.w	8000e9c <__udivmoddi4+0x2bc>
 8000c64:	4610      	mov	r0, r2
 8000c66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6a:	eba4 040e 	sub.w	r4, r4, lr
 8000c6e:	2600      	movs	r6, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0x9a>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7a:	4631      	mov	r1, r6
 8000c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0xb8>
 8000c84:	2d00      	cmp	r5, #0
 8000c86:	f000 80fd 	beq.w	8000e84 <__udivmoddi4+0x2a4>
 8000c8a:	2600      	movs	r6, #0
 8000c8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c90:	4630      	mov	r0, r6
 8000c92:	4631      	mov	r1, r6
 8000c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c98:	fab3 f683 	clz	r6, r3
 8000c9c:	2e00      	cmp	r6, #0
 8000c9e:	d14b      	bne.n	8000d38 <__udivmoddi4+0x158>
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	f0c0 80f2 	bcc.w	8000e8a <__udivmoddi4+0x2aa>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f240 80ef 	bls.w	8000e8a <__udivmoddi4+0x2aa>
 8000cac:	4630      	mov	r0, r6
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e3      	beq.n	8000c7a <__udivmoddi4+0x9a>
 8000cb2:	e9c5 4700 	strd	r4, r7, [r5]
 8000cb6:	e7e0      	b.n	8000c7a <__udivmoddi4+0x9a>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xdc>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f382 	clz	r3, r2
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	f040 809d 	bne.w	8000e00 <__udivmoddi4+0x220>
 8000cc6:	1a89      	subs	r1, r1, r2
 8000cc8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000ccc:	b297      	uxth	r7, r2
 8000cce:	2601      	movs	r6, #1
 8000cd0:	0c20      	lsrs	r0, r4, #16
 8000cd2:	fbb1 f2fe 	udiv	r2, r1, lr
 8000cd6:	fb0e 1112 	mls	r1, lr, r2, r1
 8000cda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cde:	fb07 f002 	mul.w	r0, r7, r2
 8000ce2:	4288      	cmp	r0, r1
 8000ce4:	d90f      	bls.n	8000d06 <__udivmoddi4+0x126>
 8000ce6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cea:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 8000cee:	bf2c      	ite	cs
 8000cf0:	f04f 0901 	movcs.w	r9, #1
 8000cf4:	f04f 0900 	movcc.w	r9, #0
 8000cf8:	4288      	cmp	r0, r1
 8000cfa:	d903      	bls.n	8000d04 <__udivmoddi4+0x124>
 8000cfc:	f1b9 0f00 	cmp.w	r9, #0
 8000d00:	f000 80cf 	beq.w	8000ea2 <__udivmoddi4+0x2c2>
 8000d04:	4642      	mov	r2, r8
 8000d06:	1a09      	subs	r1, r1, r0
 8000d08:	b2a4      	uxth	r4, r4
 8000d0a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d0e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d12:	fb00 f707 	mul.w	r7, r0, r7
 8000d16:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d1a:	42a7      	cmp	r7, r4
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x150>
 8000d1e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d22:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x14e>
 8000d28:	42a7      	cmp	r7, r4
 8000d2a:	f200 80b4 	bhi.w	8000e96 <__udivmoddi4+0x2b6>
 8000d2e:	4608      	mov	r0, r1
 8000d30:	1be4      	subs	r4, r4, r7
 8000d32:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000d36:	e79b      	b.n	8000c70 <__udivmoddi4+0x90>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa01 f406 	lsl.w	r4, r1, r6
 8000d42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d46:	40f9      	lsrs	r1, r7
 8000d48:	40b2      	lsls	r2, r6
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	431c      	orrs	r4, r3
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d60:	0c20      	lsrs	r0, r4, #16
 8000d62:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d66:	fb09 1118 	mls	r1, r9, r8, r1
 8000d6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6e:	fb08 f00e 	mul.w	r0, r8, lr
 8000d72:	4288      	cmp	r0, r1
 8000d74:	d90f      	bls.n	8000d96 <__udivmoddi4+0x1b6>
 8000d76:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d7e:	bf2c      	ite	cs
 8000d80:	f04f 0b01 	movcs.w	fp, #1
 8000d84:	f04f 0b00 	movcc.w	fp, #0
 8000d88:	4288      	cmp	r0, r1
 8000d8a:	d903      	bls.n	8000d94 <__udivmoddi4+0x1b4>
 8000d8c:	f1bb 0f00 	cmp.w	fp, #0
 8000d90:	f000 808d 	beq.w	8000eae <__udivmoddi4+0x2ce>
 8000d94:	46d0      	mov	r8, sl
 8000d96:	1a09      	subs	r1, r1, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d9e:	fb09 1110 	mls	r1, r9, r0, r1
 8000da2:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000daa:	458e      	cmp	lr, r1
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x1de>
 8000dae:	eb1c 0101 	adds.w	r1, ip, r1
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db6:	d201      	bcs.n	8000dbc <__udivmoddi4+0x1dc>
 8000db8:	458e      	cmp	lr, r1
 8000dba:	d87f      	bhi.n	8000ebc <__udivmoddi4+0x2dc>
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	fba0 9802 	umull	r9, r8, r0, r2
 8000dca:	4541      	cmp	r1, r8
 8000dcc:	464c      	mov	r4, r9
 8000dce:	46c6      	mov	lr, r8
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0x1f8>
 8000dd2:	d106      	bne.n	8000de2 <__udivmoddi4+0x202>
 8000dd4:	454b      	cmp	r3, r9
 8000dd6:	d204      	bcs.n	8000de2 <__udivmoddi4+0x202>
 8000dd8:	3801      	subs	r0, #1
 8000dda:	ebb9 0402 	subs.w	r4, r9, r2
 8000dde:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	d070      	beq.n	8000ec8 <__udivmoddi4+0x2e8>
 8000de6:	1b1a      	subs	r2, r3, r4
 8000de8:	eb61 010e 	sbc.w	r1, r1, lr
 8000dec:	fa22 f306 	lsr.w	r3, r2, r6
 8000df0:	fa01 f707 	lsl.w	r7, r1, r7
 8000df4:	40f1      	lsrs	r1, r6
 8000df6:	2600      	movs	r6, #0
 8000df8:	431f      	orrs	r7, r3
 8000dfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfe:	e73c      	b.n	8000c7a <__udivmoddi4+0x9a>
 8000e00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e04:	f1c3 0020 	rsb	r0, r3, #32
 8000e08:	fa01 f203 	lsl.w	r2, r1, r3
 8000e0c:	fa21 f600 	lsr.w	r6, r1, r0
 8000e10:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e14:	fa24 f100 	lsr.w	r1, r4, r0
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	409c      	lsls	r4, r3
 8000e1e:	4311      	orrs	r1, r2
 8000e20:	fbb6 f0fe 	udiv	r0, r6, lr
 8000e24:	0c0a      	lsrs	r2, r1, #16
 8000e26:	fb0e 6610 	mls	r6, lr, r0, r6
 8000e2a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000e2e:	fb00 f607 	mul.w	r6, r0, r7
 8000e32:	4296      	cmp	r6, r2
 8000e34:	d90e      	bls.n	8000e54 <__udivmoddi4+0x274>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e3e:	bf2c      	ite	cs
 8000e40:	f04f 0901 	movcs.w	r9, #1
 8000e44:	f04f 0900 	movcc.w	r9, #0
 8000e48:	4296      	cmp	r6, r2
 8000e4a:	d902      	bls.n	8000e52 <__udivmoddi4+0x272>
 8000e4c:	f1b9 0f00 	cmp.w	r9, #0
 8000e50:	d031      	beq.n	8000eb6 <__udivmoddi4+0x2d6>
 8000e52:	4640      	mov	r0, r8
 8000e54:	1b92      	subs	r2, r2, r6
 8000e56:	b289      	uxth	r1, r1
 8000e58:	fbb2 f6fe 	udiv	r6, r2, lr
 8000e5c:	fb0e 2216 	mls	r2, lr, r6, r2
 8000e60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000e64:	fb06 f207 	mul.w	r2, r6, r7
 8000e68:	428a      	cmp	r2, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x29c>
 8000e6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e70:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e74:	d201      	bcs.n	8000e7a <__udivmoddi4+0x29a>
 8000e76:	428a      	cmp	r2, r1
 8000e78:	d823      	bhi.n	8000ec2 <__udivmoddi4+0x2e2>
 8000e7a:	4646      	mov	r6, r8
 8000e7c:	1a89      	subs	r1, r1, r2
 8000e7e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e82:	e725      	b.n	8000cd0 <__udivmoddi4+0xf0>
 8000e84:	462e      	mov	r6, r5
 8000e86:	4628      	mov	r0, r5
 8000e88:	e6f7      	b.n	8000c7a <__udivmoddi4+0x9a>
 8000e8a:	1a84      	subs	r4, r0, r2
 8000e8c:	eb61 0303 	sbc.w	r3, r1, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	461f      	mov	r7, r3
 8000e94:	e70b      	b.n	8000cae <__udivmoddi4+0xce>
 8000e96:	4464      	add	r4, ip
 8000e98:	3802      	subs	r0, #2
 8000e9a:	e749      	b.n	8000d30 <__udivmoddi4+0x150>
 8000e9c:	4464      	add	r4, ip
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	e6e1      	b.n	8000c66 <__udivmoddi4+0x86>
 8000ea2:	3a02      	subs	r2, #2
 8000ea4:	4461      	add	r1, ip
 8000ea6:	e72e      	b.n	8000d06 <__udivmoddi4+0x126>
 8000ea8:	3e02      	subs	r6, #2
 8000eaa:	4462      	add	r2, ip
 8000eac:	e6c6      	b.n	8000c3c <__udivmoddi4+0x5c>
 8000eae:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb2:	4461      	add	r1, ip
 8000eb4:	e76f      	b.n	8000d96 <__udivmoddi4+0x1b6>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	4462      	add	r2, ip
 8000eba:	e7cb      	b.n	8000e54 <__udivmoddi4+0x274>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	e77d      	b.n	8000dbe <__udivmoddi4+0x1de>
 8000ec2:	3e02      	subs	r6, #2
 8000ec4:	4461      	add	r1, ip
 8000ec6:	e7d9      	b.n	8000e7c <__udivmoddi4+0x29c>
 8000ec8:	462e      	mov	r6, r5
 8000eca:	e6d6      	b.n	8000c7a <__udivmoddi4+0x9a>

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <adcTempSensor>:
 * @param ADC_Periph_t ADC_no: The ADC peripheral (ADC1 or ADC4)
 * 		  ADC_HandleTypeDef: The ADC peripheral structure instance on the micro-controller (ADC1 or ADC4)
 * @retval ret_status: Error status
 */
uint8_t adcTempSensor(int16_t* temp_C, ADC_Periph_t ADC_no, ADC_HandleTypeDef ADC_Handle)
{
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b084      	sub	sp, #16
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	f107 0018 	add.w	r0, r7, #24
 8000ede:	e880 000c 	stmia.w	r0, {r2, r3}
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	70fb      	strb	r3, [r7, #3]
	int32_t rawTemp;
	uint8_t ret_status = HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	73fb      	strb	r3, [r7, #15]
	//	HAL_ADC_Start(&ADC_Handle);

	//	if(HAL_OK != HAL_ADC_PollForConversion(&ADC_Handle, 1))
	//		ret_status = HAL_ERROR;

	rawTemp = HAL_ADC_GetValue(&ADC_Handle);
 8000eea:	f107 0018 	add.w	r0, r7, #24
 8000eee:	f005 fa6a 	bl	80063c6 <HAL_ADC_GetValue>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	60bb      	str	r3, [r7, #8]

	if(ADC_no == ADC_4)
 8000ef6:	78fb      	ldrb	r3, [r7, #3]
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	d124      	bne.n	8000f46 <adcTempSensor+0x76>
		*temp_C = __LL_ADC_CALC_TEMPERATURE(ADC4, VDD_REF, rawTemp, LL_ADC_RESOLUTION_12B);
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000f02:	fb02 f303 	mul.w	r3, r2, r3
 8000f06:	4a27      	ldr	r2, [pc, #156]	; (8000fa4 <adcTempSensor+0xd4>)
 8000f08:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0c:	099b      	lsrs	r3, r3, #6
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b25      	ldr	r3, [pc, #148]	; (8000fa8 <adcTempSensor+0xd8>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	089b      	lsrs	r3, r3, #2
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2264      	movs	r2, #100	; 0x64
 8000f1c:	fb03 f202 	mul.w	r2, r3, r2
 8000f20:	4b22      	ldr	r3, [pc, #136]	; (8000fac <adcTempSensor+0xdc>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	089b      	lsrs	r3, r3, #2
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <adcTempSensor+0xd8>)
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	089b      	lsrs	r3, r3, #2
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	1acb      	subs	r3, r1, r3
 8000f34:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	331e      	adds	r3, #30
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	801a      	strh	r2, [r3, #0]
 8000f44:	e022      	b.n	8000f8c <adcTempSensor+0xbc>
	else if(ADC_no == ADC_1)
 8000f46:	78fb      	ldrb	r3, [r7, #3]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d11f      	bne.n	8000f8c <adcTempSensor+0xbc>
		*temp_C = __LL_ADC_CALC_TEMPERATURE(ADC1, VDD_REF, rawTemp, LL_ADC_RESOLUTION_12B);
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	461a      	mov	r2, r3
 8000f52:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000f56:	fb02 f303 	mul.w	r3, r2, r3
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <adcTempSensor+0xd4>)
 8000f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f60:	099b      	lsrs	r3, r3, #6
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <adcTempSensor+0xd8>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2264      	movs	r2, #100	; 0x64
 8000f6c:	fb03 f202 	mul.w	r2, r3, r2
 8000f70:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <adcTempSensor+0xdc>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <adcTempSensor+0xd8>)
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	1acb      	subs	r3, r1, r3
 8000f7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	331e      	adds	r3, #30
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	b21a      	sxth	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	801a      	strh	r2, [r3, #0]

	HAL_Delay(2);
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	f004 fa83 	bl	8005498 <HAL_Delay>


	return ret_status;
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f9e:	b002      	add	sp, #8
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	057619f1 	.word	0x057619f1
 8000fa8:	0bfa0710 	.word	0x0bfa0710
 8000fac:	0bfa0742 	.word	0x0bfa0742

08000fb0 <triggerADCIRQ>:
 * @brief ADC internal temperature sensor trigger for IRQ
 * @param ADC_HandleTypeDef: The ADC peripheral structure instance on the micro-controller (ADC1 or ADC4)
 * @retval ret_status: None
 */
void triggerADCIRQ(ADC_HandleTypeDef ADC_Handle)
{
 8000fb0:	b084      	sub	sp, #16
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	f107 0c08 	add.w	ip, r7, #8
 8000fba:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_ADC_Start_IT(&ADC_Handle);
 8000fbe:	f107 0008 	add.w	r0, r7, #8
 8000fc2:	f005 f94b 	bl	800625c <HAL_ADC_Start_IT>
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fce:	b004      	add	sp, #16
 8000fd0:	4770      	bx	lr

08000fd2 <adxl375SPIWhoami>:
 * @brief ADXL375 Device Identification
 * @param SPI_HandleTypeDef: The SPI peripheral on the micro-controller
 * @retval ret_status: Error status
 */
uint8_t adxl375SPIWhoami(SPI_HandleTypeDef SPI_Handle)
{
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	b590      	push	{r4, r7, lr}
 8000fd6:	b0a5      	sub	sp, #148	; 0x94
 8000fd8:	af22      	add	r7, sp, #136	; 0x88
 8000fda:	f107 0418 	add.w	r4, r7, #24
 8000fde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t ret_status = HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buf[2];

	if(HAL_OK != readRegSPI(ADXL375_WHOAMI, rx_buf, SPI_Handle))
 8000fe6:	1d3c      	adds	r4, r7, #4
 8000fe8:	4668      	mov	r0, sp
 8000fea:	f107 0320 	add.w	r3, r7, #32
 8000fee:	2288      	movs	r2, #136	; 0x88
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f00d fed7 	bl	800eda4 <memcpy>
 8000ff6:	f107 0318 	add.w	r3, r7, #24
 8000ffa:	cb0c      	ldmia	r3, {r2, r3}
 8000ffc:	4621      	mov	r1, r4
 8000ffe:	2000      	movs	r0, #0
 8001000:	f000 fbac 	bl	800175c <readRegSPI>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d002      	beq.n	8001010 <adxl375SPIWhoami+0x3e>
		ret_status  = HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	71fb      	strb	r3, [r7, #7]
 800100e:	e007      	b.n	8001020 <adxl375SPIWhoami+0x4e>
	else if(rx_buf[1] == ADXL375_DEV_ID)
 8001010:	797b      	ldrb	r3, [r7, #5]
 8001012:	2be5      	cmp	r3, #229	; 0xe5
 8001014:	d102      	bne.n	800101c <adxl375SPIWhoami+0x4a>
		ret_status = HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	71fb      	strb	r3, [r7, #7]
 800101a:	e001      	b.n	8001020 <adxl375SPIWhoami+0x4e>
	else
		ret_status = HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	71fb      	strb	r3, [r7, #7]

	return ret_status;
 8001020:	79fb      	ldrb	r3, [r7, #7]

}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800102c:	b004      	add	sp, #16
 800102e:	4770      	bx	lr

08001030 <adxl375SPISetup>:
 * @brief ADXL375 Sensor Initialization
 * @param SPI_HandleTypeDef: The SPI peripheral on the micro-controller
 * @retval ret_status: Error status
 */
uint8_t adxl375SPISetup(SPI_HandleTypeDef SPI_Handle)
{
 8001030:	b084      	sub	sp, #16
 8001032:	b580      	push	{r7, lr}
 8001034:	b0a4      	sub	sp, #144	; 0x90
 8001036:	af22      	add	r7, sp, #136	; 0x88
 8001038:	f107 0c10 	add.w	ip, r7, #16
 800103c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t ret_status = HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	71fb      	strb	r3, [r7, #7]

	//Standby mode
	if(HAL_OK != writeRegSPI(ADXL375_POWER_CTL, 00u, SPI_Handle))
 8001044:	4668      	mov	r0, sp
 8001046:	f107 0318 	add.w	r3, r7, #24
 800104a:	2288      	movs	r2, #136	; 0x88
 800104c:	4619      	mov	r1, r3
 800104e:	f00d fea9 	bl	800eda4 <memcpy>
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	cb0c      	ldmia	r3, {r2, r3}
 8001058:	2100      	movs	r1, #0
 800105a:	202d      	movs	r0, #45	; 0x2d
 800105c:	f000 fb1f 	bl	800169e <writeRegSPI>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <adxl375SPISetup+0x3a>
		ret_status = HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	71fb      	strb	r3, [r7, #7]

	//	//Set baud rate to 1600 Hz
	if(HAL_OK != writeRegSPI(ADXL375_BW_RATE, a375_output_freq_1600Hz, SPI_Handle))
 800106a:	4668      	mov	r0, sp
 800106c:	f107 0318 	add.w	r3, r7, #24
 8001070:	2288      	movs	r2, #136	; 0x88
 8001072:	4619      	mov	r1, r3
 8001074:	f00d fe96 	bl	800eda4 <memcpy>
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	cb0c      	ldmia	r3, {r2, r3}
 800107e:	210e      	movs	r1, #14
 8001080:	202c      	movs	r0, #44	; 0x2c
 8001082:	f000 fb0c 	bl	800169e <writeRegSPI>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <adxl375SPISetup+0x60>
		ret_status = HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	71fb      	strb	r3, [r7, #7]

	//Interrupt pins active low
	//Data is right shifted
	if(HAL_OK != writeRegSPI(ADXL375_DATA_FMT, (a375_justify_rightLSB | a375_INT_PIN_ACT_LOW), SPI_Handle))
 8001090:	4668      	mov	r0, sp
 8001092:	f107 0318 	add.w	r3, r7, #24
 8001096:	2288      	movs	r2, #136	; 0x88
 8001098:	4619      	mov	r1, r3
 800109a:	f00d fe83 	bl	800eda4 <memcpy>
 800109e:	f107 0310 	add.w	r3, r7, #16
 80010a2:	cb0c      	ldmia	r3, {r2, r3}
 80010a4:	212b      	movs	r1, #43	; 0x2b
 80010a6:	2031      	movs	r0, #49	; 0x31
 80010a8:	f000 faf9 	bl	800169e <writeRegSPI>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <adxl375SPISetup+0x86>
		ret_status = HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	71fb      	strb	r3, [r7, #7]

	//Data ready signal to INT1 pin
	//Rest of the interrupts to INT2 pin
	if(HAL_OK != writeRegSPI(ADXL375_INT_MAP, (A375_INT2_OVERRUN |
 80010b6:	4668      	mov	r0, sp
 80010b8:	f107 0318 	add.w	r3, r7, #24
 80010bc:	2288      	movs	r2, #136	; 0x88
 80010be:	4619      	mov	r1, r3
 80010c0:	f00d fe70 	bl	800eda4 <memcpy>
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	cb0c      	ldmia	r3, {r2, r3}
 80010ca:	217b      	movs	r1, #123	; 0x7b
 80010cc:	202f      	movs	r0, #47	; 0x2f
 80010ce:	f000 fae6 	bl	800169e <writeRegSPI>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <adxl375SPISetup+0xac>
			A375_INT2_ACTIVITY | A375_INT2_DOUBLE_SHOCK | A375_INT2_SINGLE_SHOCK |
			A375_INT2_WATERMARK | A375_INT2_INACTIVITY), SPI_Handle))
		ret_status = HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	71fb      	strb	r3, [r7, #7]

	//Enable interrupts for data ready
	if(HAL_OK != writeRegSPI(ADXL375_INT_ENABLE, A375_DATA_READY, SPI_Handle))
 80010dc:	4668      	mov	r0, sp
 80010de:	f107 0318 	add.w	r3, r7, #24
 80010e2:	2288      	movs	r2, #136	; 0x88
 80010e4:	4619      	mov	r1, r3
 80010e6:	f00d fe5d 	bl	800eda4 <memcpy>
 80010ea:	f107 0310 	add.w	r3, r7, #16
 80010ee:	cb0c      	ldmia	r3, {r2, r3}
 80010f0:	2180      	movs	r1, #128	; 0x80
 80010f2:	202e      	movs	r0, #46	; 0x2e
 80010f4:	f000 fad3 	bl	800169e <writeRegSPI>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <adxl375SPISetup+0xd2>
		ret_status = HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	71fb      	strb	r3, [r7, #7]

	//Measurement mode
	if(HAL_OK != writeRegSPI(ADXL375_POWER_CTL, A375_MEASURE, SPI_Handle))
 8001102:	4668      	mov	r0, sp
 8001104:	f107 0318 	add.w	r3, r7, #24
 8001108:	2288      	movs	r2, #136	; 0x88
 800110a:	4619      	mov	r1, r3
 800110c:	f00d fe4a 	bl	800eda4 <memcpy>
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	cb0c      	ldmia	r3, {r2, r3}
 8001116:	2108      	movs	r1, #8
 8001118:	202d      	movs	r0, #45	; 0x2d
 800111a:	f000 fac0 	bl	800169e <writeRegSPI>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <adxl375SPISetup+0xf8>
		ret_status = HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	71fb      	strb	r3, [r7, #7]

#if (ADXL375_DRDY_EN == 1)
	//TO clear the data ready interrupt, the data registers have to be read
	//Refer ADXL375 data-sheet Page 13
	int16_t dummy_data[3];
	if(HAL_OK != adxl375SPIAccData(SPI_Handle, dummy_data))
 8001128:	463b      	mov	r3, r7
 800112a:	9320      	str	r3, [sp, #128]	; 0x80
 800112c:	4668      	mov	r0, sp
 800112e:	f107 0320 	add.w	r3, r7, #32
 8001132:	2280      	movs	r2, #128	; 0x80
 8001134:	4619      	mov	r1, r3
 8001136:	f00d fe35 	bl	800eda4 <memcpy>
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001140:	f000 f80d 	bl	800115e <adxl375SPIAccData>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <adxl375SPISetup+0x11e>
		ret_status = HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	71fb      	strb	r3, [r7, #7]
#endif

	return ret_status;
 800114e:	79fb      	ldrb	r3, [r7, #7]

}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800115a:	b004      	add	sp, #16
 800115c:	4770      	bx	lr

0800115e <adxl375SPIAccData>:
 * @param : int16_t acc_data[]: Pointer to acquired acceleration data [output]
 * 			SPI_HandleTypeDef: The SPI peripheral on the micro-controller
 * @retval ret_status: Error status
 */
uint8_t adxl375SPIAccData(SPI_HandleTypeDef SPI_Handle , int16_t acc_data[])
{
 800115e:	b084      	sub	sp, #16
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b0a7      	sub	sp, #156	; 0x9c
 8001164:	af22      	add	r7, sp, #136	; 0x88
 8001166:	f107 0420 	add.w	r4, r7, #32
 800116a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t rx_buf[2];
	int8_t acc_raw_data[8];
	uint8_t ret_status = HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != readRegSPI(ADXL375_DATA_X_0, rx_buf, SPI_Handle))
 8001172:	f107 040c 	add.w	r4, r7, #12
 8001176:	4668      	mov	r0, sp
 8001178:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800117c:	2288      	movs	r2, #136	; 0x88
 800117e:	4619      	mov	r1, r3
 8001180:	f00d fe10 	bl	800eda4 <memcpy>
 8001184:	f107 0320 	add.w	r3, r7, #32
 8001188:	cb0c      	ldmia	r3, {r2, r3}
 800118a:	4621      	mov	r1, r4
 800118c:	2032      	movs	r0, #50	; 0x32
 800118e:	f000 fae5 	bl	800175c <readRegSPI>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <adxl375SPIAccData+0x40>
		ret_status = HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	e002      	b.n	80011a4 <adxl375SPIAccData+0x46>
	else
		acc_raw_data[0] = (int8_t)rx_buf[1];
 800119e:	7b7b      	ldrb	r3, [r7, #13]
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	713b      	strb	r3, [r7, #4]

	if(HAL_OK != readRegSPI(ADXL375_DATA_X_1, rx_buf, SPI_Handle))
 80011a4:	f107 040c 	add.w	r4, r7, #12
 80011a8:	4668      	mov	r0, sp
 80011aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ae:	2288      	movs	r2, #136	; 0x88
 80011b0:	4619      	mov	r1, r3
 80011b2:	f00d fdf7 	bl	800eda4 <memcpy>
 80011b6:	f107 0320 	add.w	r3, r7, #32
 80011ba:	cb0c      	ldmia	r3, {r2, r3}
 80011bc:	4621      	mov	r1, r4
 80011be:	2033      	movs	r0, #51	; 0x33
 80011c0:	f000 facc 	bl	800175c <readRegSPI>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d002      	beq.n	80011d0 <adxl375SPIAccData+0x72>
		ret_status = HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	73fb      	strb	r3, [r7, #15]
 80011ce:	e002      	b.n	80011d6 <adxl375SPIAccData+0x78>
	else
		acc_raw_data[1] = (int8_t)rx_buf[1];
 80011d0:	7b7b      	ldrb	r3, [r7, #13]
 80011d2:	b25b      	sxtb	r3, r3
 80011d4:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != readRegSPI(ADXL375_DATA_Y_0, rx_buf, SPI_Handle))
 80011d6:	f107 040c 	add.w	r4, r7, #12
 80011da:	4668      	mov	r0, sp
 80011dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e0:	2288      	movs	r2, #136	; 0x88
 80011e2:	4619      	mov	r1, r3
 80011e4:	f00d fdde 	bl	800eda4 <memcpy>
 80011e8:	f107 0320 	add.w	r3, r7, #32
 80011ec:	cb0c      	ldmia	r3, {r2, r3}
 80011ee:	4621      	mov	r1, r4
 80011f0:	2034      	movs	r0, #52	; 0x34
 80011f2:	f000 fab3 	bl	800175c <readRegSPI>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d002      	beq.n	8001202 <adxl375SPIAccData+0xa4>
		ret_status = HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	e002      	b.n	8001208 <adxl375SPIAccData+0xaa>
	else
		acc_raw_data[2] = (int8_t)rx_buf[1];
 8001202:	7b7b      	ldrb	r3, [r7, #13]
 8001204:	b25b      	sxtb	r3, r3
 8001206:	71bb      	strb	r3, [r7, #6]

	if(HAL_OK != readRegSPI(ADXL375_DATA_Y_1, rx_buf, SPI_Handle))
 8001208:	f107 040c 	add.w	r4, r7, #12
 800120c:	4668      	mov	r0, sp
 800120e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001212:	2288      	movs	r2, #136	; 0x88
 8001214:	4619      	mov	r1, r3
 8001216:	f00d fdc5 	bl	800eda4 <memcpy>
 800121a:	f107 0320 	add.w	r3, r7, #32
 800121e:	cb0c      	ldmia	r3, {r2, r3}
 8001220:	4621      	mov	r1, r4
 8001222:	2035      	movs	r0, #53	; 0x35
 8001224:	f000 fa9a 	bl	800175c <readRegSPI>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d002      	beq.n	8001234 <adxl375SPIAccData+0xd6>
		ret_status = HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	73fb      	strb	r3, [r7, #15]
 8001232:	e002      	b.n	800123a <adxl375SPIAccData+0xdc>
	else
		acc_raw_data[3] = (int8_t)rx_buf[1];
 8001234:	7b7b      	ldrb	r3, [r7, #13]
 8001236:	b25b      	sxtb	r3, r3
 8001238:	71fb      	strb	r3, [r7, #7]

	if(HAL_OK != readRegSPI(ADXL375_DATA_Z_0, rx_buf, SPI_Handle))
 800123a:	f107 040c 	add.w	r4, r7, #12
 800123e:	4668      	mov	r0, sp
 8001240:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001244:	2288      	movs	r2, #136	; 0x88
 8001246:	4619      	mov	r1, r3
 8001248:	f00d fdac 	bl	800eda4 <memcpy>
 800124c:	f107 0320 	add.w	r3, r7, #32
 8001250:	cb0c      	ldmia	r3, {r2, r3}
 8001252:	4621      	mov	r1, r4
 8001254:	2036      	movs	r0, #54	; 0x36
 8001256:	f000 fa81 	bl	800175c <readRegSPI>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d002      	beq.n	8001266 <adxl375SPIAccData+0x108>
		ret_status = HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	73fb      	strb	r3, [r7, #15]
 8001264:	e002      	b.n	800126c <adxl375SPIAccData+0x10e>
	else
		acc_raw_data[4] = (int8_t)rx_buf[1];
 8001266:	7b7b      	ldrb	r3, [r7, #13]
 8001268:	b25b      	sxtb	r3, r3
 800126a:	723b      	strb	r3, [r7, #8]

	if(HAL_OK != readRegSPI(ADXL375_DATA_Z_1, rx_buf, SPI_Handle))
 800126c:	f107 040c 	add.w	r4, r7, #12
 8001270:	4668      	mov	r0, sp
 8001272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001276:	2288      	movs	r2, #136	; 0x88
 8001278:	4619      	mov	r1, r3
 800127a:	f00d fd93 	bl	800eda4 <memcpy>
 800127e:	f107 0320 	add.w	r3, r7, #32
 8001282:	cb0c      	ldmia	r3, {r2, r3}
 8001284:	4621      	mov	r1, r4
 8001286:	2037      	movs	r0, #55	; 0x37
 8001288:	f000 fa68 	bl	800175c <readRegSPI>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d002      	beq.n	8001298 <adxl375SPIAccData+0x13a>
		ret_status = HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	73fb      	strb	r3, [r7, #15]
 8001296:	e002      	b.n	800129e <adxl375SPIAccData+0x140>
	else
		acc_raw_data[5] = (int8_t)rx_buf[1];
 8001298:	7b7b      	ldrb	r3, [r7, #13]
 800129a:	b25b      	sxtb	r3, r3
 800129c:	727b      	strb	r3, [r7, #9]

	acc_data[0] = (int16_t)((acc_raw_data[1] << 8) | acc_raw_data[0]);
 800129e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	4313      	orrs	r3, r2
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80012b4:	801a      	strh	r2, [r3, #0]
	acc_data[1] = (int16_t)((acc_raw_data[3] << 8) | acc_raw_data[2]);
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	b219      	sxth	r1, r3
 80012be:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80012c2:	b21a      	sxth	r2, r3
 80012c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80012c8:	3302      	adds	r3, #2
 80012ca:	430a      	orrs	r2, r1
 80012cc:	b212      	sxth	r2, r2
 80012ce:	801a      	strh	r2, [r3, #0]
	acc_data[2] = (int16_t)((acc_raw_data[5] << 8) | acc_raw_data[4]);
 80012d0:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	b219      	sxth	r1, r3
 80012d8:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80012dc:	b21a      	sxth	r2, r3
 80012de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80012e2:	3304      	adds	r3, #4
 80012e4:	430a      	orrs	r2, r1
 80012e6:	b212      	sxth	r2, r2
 80012e8:	801a      	strh	r2, [r3, #0]

	return ret_status;
 80012ea:	7bfb      	ldrb	r3, [r7, #15]

}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80012f6:	b004      	add	sp, #16
 80012f8:	4770      	bx	lr

080012fa <aht20TempHumiditySetup>:
 * @brief   Temperature and Humidity data acquisition
 * @param : I2C_HandleTypeDef: The I2C peripheral on the micro-controller
 * @retval  ret_status: Error status
 */
uint8_t aht20TempHumiditySetup(I2C_HandleTypeDef I2C_Handle)
{
 80012fa:	b084      	sub	sp, #16
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b097      	sub	sp, #92	; 0x5c
 8001300:	af14      	add	r7, sp, #80	; 0x50
 8001302:	f107 0418 	add.w	r4, r7, #24
 8001306:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//	uint8_t reg_addr;
	uint8_t buf[2] = {0};
 800130a:	2300      	movs	r3, #0
 800130c:	80bb      	strh	r3, [r7, #4]
	uint8_t ret_status = HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	71fb      	strb	r3, [r7, #7]
	//	float raw_data;

	//Wait for 40 milliseconds after power-on
	HAL_Delay(AHT20_POWERON_TIME);
 8001312:	2028      	movs	r0, #40	; 0x28
 8001314:	f004 f8c0 	bl	8005498 <HAL_Delay>

	//	if(HAL_OK != HAL_I2C_Mem_Read(&I2C_Handle, AHT20_I2C_ADDR, AHT20_STATUS, I2C_MEMADD_SIZE_8BIT, buf, I2C_MEMADD_SIZE_8BIT, 100))
	if(HAL_OK != readRegI2C(AHT20_I2C_ADDR, AHT20_STATUS, buf, I2C_MEMADD_SIZE_8BIT, I2C_Handle))
 8001318:	1d3c      	adds	r4, r7, #4
 800131a:	466b      	mov	r3, sp
 800131c:	f107 0118 	add.w	r1, r7, #24
 8001320:	224c      	movs	r2, #76	; 0x4c
 8001322:	4618      	mov	r0, r3
 8001324:	f00d fd3e 	bl	800eda4 <memcpy>
 8001328:	2301      	movs	r3, #1
 800132a:	4622      	mov	r2, r4
 800132c:	2171      	movs	r1, #113	; 0x71
 800132e:	2070      	movs	r0, #112	; 0x70
 8001330:	f000 f9ed 	bl	800170e <readRegI2C>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <aht20TempHumiditySetup+0x44>
		ret_status = HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	71fb      	strb	r3, [r7, #7]

	if(!(buf[0] & AHT20_IS_CALIB))
 800133e:	793b      	ldrb	r3, [r7, #4]
 8001340:	f003 0308 	and.w	r3, r3, #8
 8001344:	2b00      	cmp	r3, #0
 8001346:	d119      	bne.n	800137c <aht20TempHumiditySetup+0x82>
	{
		//Write the initialization sequence
		buf[0] = 0x08u;
 8001348:	2308      	movs	r3, #8
 800134a:	713b      	strb	r3, [r7, #4]
		buf[1] = 0x00u;
 800134c:	2300      	movs	r3, #0
 800134e:	717b      	strb	r3, [r7, #5]

		//		if (HAL_OK != HAL_I2C_Mem_Write(&I2C_Handle, AHT20_I2C_ADDR, AHT20_INIT, I2C_MEMADD_SIZE_8BIT, buf, sizeof(buf), 100))
		if(HAL_OK != writeRegI2C(AHT20_I2C_ADDR, AHT20_INIT, buf, sizeof(buf), I2C_Handle))
 8001350:	1d3c      	adds	r4, r7, #4
 8001352:	466b      	mov	r3, sp
 8001354:	f107 0118 	add.w	r1, r7, #24
 8001358:	224c      	movs	r2, #76	; 0x4c
 800135a:	4618      	mov	r0, r3
 800135c:	f00d fd22 	bl	800eda4 <memcpy>
 8001360:	2302      	movs	r3, #2
 8001362:	4622      	mov	r2, r4
 8001364:	21be      	movs	r1, #190	; 0xbe
 8001366:	2070      	movs	r0, #112	; 0x70
 8001368:	f000 f972 	bl	8001650 <writeRegI2C>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <aht20TempHumiditySetup+0x7c>
			ret_status = HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	71fb      	strb	r3, [r7, #7]

		//Wait for 10 milliseconds for the sequence to be written
		HAL_Delay(AHT20_SEQ_TIME);
 8001376:	200a      	movs	r0, #10
 8001378:	f004 f88e 	bl	8005498 <HAL_Delay>
	}

	return ret_status;
 800137c:	79fb      	ldrb	r3, [r7, #7]
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001388:	b004      	add	sp, #16
 800138a:	4770      	bx	lr

0800138c <aht20TempHumidityRawData>:
 * @param : I2C_HandleTypeDef: The I2C peripheral on the micro-controller
 * 			uint8_t raw_sensor data[]: Returns raw sensor data
 * @retval  ret_status: Error status
 */
uint8_t aht20TempHumidityRawData(I2C_HandleTypeDef I2C_Handle , uint8_t raw_data[])
{
 800138c:	b084      	sub	sp, #16
 800138e:	b590      	push	{r4, r7, lr}
 8001390:	b097      	sub	sp, #92	; 0x5c
 8001392:	af14      	add	r7, sp, #80	; 0x50
 8001394:	f107 0418 	add.w	r4, r7, #24
 8001398:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t buf[2] = {0};
 800139c:	2300      	movs	r3, #0
 800139e:	80bb      	strh	r3, [r7, #4]
	uint8_t status_bit = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	70fb      	strb	r3, [r7, #3]
	uint8_t ret_status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	71fb      	strb	r3, [r7, #7]

	//Sequence to start measurement
	buf[0] = 0x33u;
 80013a8:	2333      	movs	r3, #51	; 0x33
 80013aa:	713b      	strb	r3, [r7, #4]
	buf[1] = 0x00u;
 80013ac:	2300      	movs	r3, #0
 80013ae:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != writeRegI2C(AHT20_I2C_ADDR, AHT20_MEASURE, buf, sizeof(buf), I2C_Handle))
 80013b0:	1d3c      	adds	r4, r7, #4
 80013b2:	466b      	mov	r3, sp
 80013b4:	f107 0118 	add.w	r1, r7, #24
 80013b8:	224c      	movs	r2, #76	; 0x4c
 80013ba:	4618      	mov	r0, r3
 80013bc:	f00d fcf2 	bl	800eda4 <memcpy>
 80013c0:	2302      	movs	r3, #2
 80013c2:	4622      	mov	r2, r4
 80013c4:	21ac      	movs	r1, #172	; 0xac
 80013c6:	2070      	movs	r0, #112	; 0x70
 80013c8:	f000 f942 	bl	8001650 <writeRegI2C>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <aht20TempHumidityRawData+0x4a>
		ret_status = HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	71fb      	strb	r3, [r7, #7]

	//Wait for measurements to complete
	HAL_Delay(AHT20_CONV_TIME);
 80013d6:	2050      	movs	r0, #80	; 0x50
 80013d8:	f004 f85e 	bl	8005498 <HAL_Delay>

	while(status_bit & AHT20_STATUS_BIT)
 80013dc:	e012      	b.n	8001404 <aht20TempHumidityRawData+0x78>
	{
		if(HAL_OK != readRegI2C(AHT20_I2C_ADDR, AHT20_STATUS, &status_bit, I2C_MEMADD_SIZE_8BIT, I2C_Handle))
 80013de:	1cfc      	adds	r4, r7, #3
 80013e0:	466b      	mov	r3, sp
 80013e2:	f107 0118 	add.w	r1, r7, #24
 80013e6:	224c      	movs	r2, #76	; 0x4c
 80013e8:	4618      	mov	r0, r3
 80013ea:	f00d fcdb 	bl	800eda4 <memcpy>
 80013ee:	2301      	movs	r3, #1
 80013f0:	4622      	mov	r2, r4
 80013f2:	2171      	movs	r1, #113	; 0x71
 80013f4:	2070      	movs	r0, #112	; 0x70
 80013f6:	f000 f98a 	bl	800170e <readRegI2C>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <aht20TempHumidityRawData+0x78>
			ret_status = HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	71fb      	strb	r3, [r7, #7]
	while(status_bit & AHT20_STATUS_BIT)
 8001404:	78fb      	ldrb	r3, [r7, #3]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1e7      	bne.n	80013de <aht20TempHumidityRawData+0x52>
	}
	if(HAL_OK != receiveI2C(AHT20_I2C_ADDR, &raw_data[0], 6, I2C_Handle))
 800140e:	4668      	mov	r0, sp
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	2248      	movs	r2, #72	; 0x48
 8001416:	4619      	mov	r1, r3
 8001418:	f00d fcc4 	bl	800eda4 <memcpy>
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	2206      	movs	r2, #6
 8001420:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001422:	2070      	movs	r0, #112	; 0x70
 8001424:	f000 f9c5 	bl	80017b2 <receiveI2C>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <aht20TempHumidityRawData+0xa6>
		ret_status = HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	71fb      	strb	r3, [r7, #7]

	return ret_status;
 8001432:	79fb      	ldrb	r3, [r7, #7]
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800143e:	b004      	add	sp, #16
 8001440:	4770      	bx	lr
	...

08001444 <aht20TempData>:
 * @param : uint8_t raw_data[] : raw temperature data
 * @retval  float temp: Temperature data
 * 			ret_status: Error status
 */
uint8_t aht20TempData(float *temp , I2C_HandleTypeDef I2C_Handle)
{
 8001444:	b084      	sub	sp, #16
 8001446:	b5b0      	push	{r4, r5, r7, lr}
 8001448:	b096      	sub	sp, #88	; 0x58
 800144a:	af10      	add	r7, sp, #64	; 0x40
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001452:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t raw_data[6];
	uint8_t ret_status = HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	75fb      	strb	r3, [r7, #23]
	if (HAL_OK != aht20TempHumidityRawData(I2C_Handle, raw_data))
 800145a:	f107 0308 	add.w	r3, r7, #8
 800145e:	930f      	str	r3, [sp, #60]	; 0x3c
 8001460:	466d      	mov	r5, sp
 8001462:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800146a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800146c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800146e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001472:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001476:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800147a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800147e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001480:	f7ff ff84 	bl	800138c <aht20TempHumidityRawData>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <aht20TempData+0x4a>
		ret_status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	75fb      	strb	r3, [r7, #23]

	uint32_t t_data = (((raw_data[3] & 0x0F) << 16) | (raw_data[4] << 8) | (raw_data[5]));
 800148e:	7afb      	ldrb	r3, [r7, #11]
 8001490:	041b      	lsls	r3, r3, #16
 8001492:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001496:	7b3b      	ldrb	r3, [r7, #12]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	4313      	orrs	r3, r2
 800149c:	7b7a      	ldrb	r2, [r7, #13]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]

	*temp = (((float)t_data / 0x100000) * 200) - 50;
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014ac:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80014dc <aht20TempData+0x98>
 80014b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80014e0 <aht20TempData+0x9c>
 80014b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014bc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80014e4 <aht20TempData+0xa0>
 80014c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	edc3 7a00 	vstr	s15, [r3]

	return ret_status;
 80014ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80014d6:	b004      	add	sp, #16
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	49800000 	.word	0x49800000
 80014e0:	43480000 	.word	0x43480000
 80014e4:	42480000 	.word	0x42480000

080014e8 <aht20HumidityData>:
 * @param : uint8_t raw_data[] : raw temperature data
 * @retval  float temp: Temperature data
 * 			ret_status: Error status
 */
uint8_t aht20HumidityData(float *humidity, I2C_HandleTypeDef I2C_Handle)
{
 80014e8:	b084      	sub	sp, #16
 80014ea:	b5b0      	push	{r4, r5, r7, lr}
 80014ec:	b096      	sub	sp, #88	; 0x58
 80014ee:	af10      	add	r7, sp, #64	; 0x40
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80014f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t raw_data[6];
	uint8_t ret_status = HAL_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	75fb      	strb	r3, [r7, #23]
	if(HAL_OK != aht20TempHumidityRawData(I2C_Handle, raw_data))
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	930f      	str	r3, [sp, #60]	; 0x3c
 8001504:	466d      	mov	r5, sp
 8001506:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800150a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001514:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001516:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800151a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800151e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001522:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001524:	f7ff ff32 	bl	800138c <aht20TempHumidityRawData>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <aht20HumidityData+0x4a>
		ret_status = HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	75fb      	strb	r3, [r7, #23]
	//Raw data to final data
	uint32_t h_data = ((raw_data[1] << 8) | (raw_data[2] << 4) | (raw_data[3] >> 4));
 8001532:	7a7b      	ldrb	r3, [r7, #9]
 8001534:	021a      	lsls	r2, r3, #8
 8001536:	7abb      	ldrb	r3, [r7, #10]
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	4313      	orrs	r3, r2
 800153c:	7afa      	ldrb	r2, [r7, #11]
 800153e:	0912      	lsrs	r2, r2, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]

	*humidity = ((float)h_data / 0x100000) * 100;
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	ee07 3a90 	vmov	s15, r3
 800154c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001550:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001578 <aht20HumidityData+0x90>
 8001554:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001558:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800157c <aht20HumidityData+0x94>
 800155c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	edc3 7a00 	vstr	s15, [r3]

	return ret_status;
 8001566:	7dfb      	ldrb	r3, [r7, #23]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001572:	b004      	add	sp, #16
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	49800000 	.word	0x49800000
 800157c:	42c80000 	.word	0x42c80000

08001580 <bh1750I2CSetup>:
 * @brief Light sensor setup
 * @param : I2C_HandleTypeDef: The I2C peripheral on the micro-controller
 * @retval ret_status: Error status
 */
uint8_t bh1750I2CSetup(I2C_HandleTypeDef I2C_Handle)
{
 8001580:	b084      	sub	sp, #16
 8001582:	b590      	push	{r4, r7, lr}
 8001584:	b095      	sub	sp, #84	; 0x54
 8001586:	af12      	add	r7, sp, #72	; 0x48
 8001588:	f107 0418 	add.w	r4, r7, #24
 800158c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t reg_addr;
	uint8_t ret_status = HAL_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	71fb      	strb	r3, [r7, #7]

	//Continuous mode in High resolution (0.5lx)
	reg_addr = BH1750_CONT_H_RES_MODE;
 8001594:	2310      	movs	r3, #16
 8001596:	71bb      	strb	r3, [r7, #6]

	//Send command for continuous mode
	if(HAL_OK != transmitI2C(BH1750_I2C_ADDR, &reg_addr, I2C_MEMADD_SIZE_8BIT, I2C_Handle))
 8001598:	1dbc      	adds	r4, r7, #6
 800159a:	4668      	mov	r0, sp
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	2248      	movs	r2, #72	; 0x48
 80015a2:	4619      	mov	r1, r3
 80015a4:	f00d fbfe 	bl	800eda4 <memcpy>
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2201      	movs	r2, #1
 80015ac:	4621      	mov	r1, r4
 80015ae:	2046      	movs	r0, #70	; 0x46
 80015b0:	f000 f923 	bl	80017fa <transmitI2C>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <bh1750I2CSetup+0x3e>
		ret_status  = HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	71fb      	strb	r3, [r7, #7]

	return ret_status;
 80015be:	79fb      	ldrb	r3, [r7, #7]

}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80015ca:	b004      	add	sp, #16
 80015cc:	4770      	bx	lr
	...

080015d0 <bh1750LightData>:
 * @param : uint16_t: Pointer to acquired light data (in lux) [output]
 * 	     I2C_HandleTypeDef: The I2C peripheral on the micro-controller
 * @retval ret_status: Error status
 */
uint8_t bh1750LightData(I2C_HandleTypeDef I2C_Handle , uint16_t *light_data)
{
 80015d0:	b084      	sub	sp, #16
 80015d2:	b590      	push	{r4, r7, lr}
 80015d4:	b097      	sub	sp, #92	; 0x5c
 80015d6:	af12      	add	r7, sp, #72	; 0x48
 80015d8:	f107 0420 	add.w	r4, r7, #32
 80015dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//	uint8_t reg_addr;
	uint8_t ret_status = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	73fb      	strb	r3, [r7, #15]
	uint8_t l_data[2] = {0};
 80015e4:	2300      	movs	r3, #0
 80015e6:	80bb      	strh	r3, [r7, #4]
	float raw_data;

	//Fetch 2 bytes of light data
	if(HAL_OK != receiveI2C(BH1750_I2C_ADDR, &l_data[0], sizeof(l_data), I2C_Handle))
 80015e8:	1d3c      	adds	r4, r7, #4
 80015ea:	4668      	mov	r0, sp
 80015ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f0:	2248      	movs	r2, #72	; 0x48
 80015f2:	4619      	mov	r1, r3
 80015f4:	f00d fbd6 	bl	800eda4 <memcpy>
 80015f8:	6a3b      	ldr	r3, [r7, #32]
 80015fa:	2202      	movs	r2, #2
 80015fc:	4621      	mov	r1, r4
 80015fe:	2046      	movs	r0, #70	; 0x46
 8001600:	f000 f8d7 	bl	80017b2 <receiveI2C>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <bh1750LightData+0x3e>
		ret_status = HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	73fb      	strb	r3, [r7, #15]

	//Concatenate data
	raw_data = ((l_data[0] << 8) | l_data[1]);
 800160e:	793b      	ldrb	r3, [r7, #4]
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	797a      	ldrb	r2, [r7, #5]
 8001614:	4313      	orrs	r3, r2
 8001616:	ee07 3a90 	vmov	s15, r3
 800161a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800161e:	edc7 7a02 	vstr	s15, [r7, #8]

	//Multiply by offset
	*light_data = raw_data / 1.20f;
 8001622:	ed97 7a02 	vldr	s14, [r7, #8]
 8001626:	eddf 6a09 	vldr	s13, [pc, #36]	; 800164c <bh1750LightData+0x7c>
 800162a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800162e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001632:	ee17 3a90 	vmov	r3, s15
 8001636:	b29a      	uxth	r2, r3
 8001638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800163a:	801a      	strh	r2, [r3, #0]

	return ret_status;
 800163c:	7bfb      	ldrb	r3, [r7, #15]

}
 800163e:	4618      	mov	r0, r3
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001648:	b004      	add	sp, #16
 800164a:	4770      	bx	lr
 800164c:	3f99999a 	.word	0x3f99999a

08001650 <writeRegI2C>:
 *  		uint8_ dev_addr: Slave address for I2C device
 * 	        I2C_HandleTypeDef: The I2C peripheral on the micro-controller
 * @retval ret_status: Error status
 */
uint8_t writeRegI2C(uint8_t dev_addr ,uint8_t reg , uint8_t *value , uint8_t data_bytes , I2C_HandleTypeDef I2C_Handle)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af04      	add	r7, sp, #16
 8001656:	603a      	str	r2, [r7, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
 800165e:	460b      	mov	r3, r1
 8001660:	71bb      	strb	r3, [r7, #6]
 8001662:	4613      	mov	r3, r2
 8001664:	717b      	strb	r3, [r7, #5]
	uint8_t ret_status = HAL_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	73fb      	strb	r3, [r7, #15]
	//Clear the register before writing the actual value
	//	if(HAL_OK != HAL_I2C_Mem_Write(&I2C_Handle, dev_addr, reg, I2C_MEMADD_SIZE_8BIT, &clr_bit, I2C_MEMADD_SIZE_8BIT, I2C_TIMEOUT))
	//		ret_status = HAL_ERROR;

	//Write the desired value to the register
	if(HAL_OK != HAL_I2C_Mem_Write(&I2C_Handle, dev_addr, reg, I2C_MEMADD_SIZE_8BIT, value, data_bytes, I2C_TIMEOUT))
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	b299      	uxth	r1, r3
 800166e:	79bb      	ldrb	r3, [r7, #6]
 8001670:	b29a      	uxth	r2, r3
 8001672:	797b      	ldrb	r3, [r7, #5]
 8001674:	b29b      	uxth	r3, r3
 8001676:	2064      	movs	r0, #100	; 0x64
 8001678:	9002      	str	r0, [sp, #8]
 800167a:	9301      	str	r3, [sp, #4]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	2301      	movs	r3, #1
 8001682:	f107 0018 	add.w	r0, r7, #24
 8001686:	f006 fd45 	bl	8008114 <HAL_I2C_Mem_Write>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <writeRegI2C+0x44>
		ret_status = HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	73fb      	strb	r3, [r7, #15]

	return ret_status;
 8001694:	7bfb      	ldrb	r3, [r7, #15]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <writeRegSPI>:
 *  		uint8_t value: Value to write to the register
 *  		SPI_HandleTypeDef SPI_Handle: The SPI peripheral on the micro-controller
 * @retval ret_status: Error status
 */
uint8_t writeRegSPI(uint8_t reg , uint8_t value , SPI_HandleTypeDef SPI_Handle)
{
 800169e:	b082      	sub	sp, #8
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	f107 0c18 	add.w	ip, r7, #24
 80016aa:	e88c 000c 	stmia.w	ip, {r2, r3}
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
 80016b2:	460b      	mov	r3, r1
 80016b4:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_status = HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_buf[SPI_TX_SIZE];
	tx_buf[0] = tx_buf[1] = (CLR_REG | SPI_WR_BIT) ;
 80016ba:	2300      	movs	r3, #0
 80016bc:	737b      	strb	r3, [r7, #13]
 80016be:	7b7b      	ldrb	r3, [r7, #13]
 80016c0:	733b      	strb	r3, [r7, #12]

	//Clear the register before writing to the register
	if(HAL_OK != HAL_SPI_Transmit(&SPI_Handle, tx_buf, SPI_TX_SIZE, SPI_TIMEOUT))
 80016c2:	f107 010c 	add.w	r1, r7, #12
 80016c6:	2364      	movs	r3, #100	; 0x64
 80016c8:	2202      	movs	r2, #2
 80016ca:	f107 0018 	add.w	r0, r7, #24
 80016ce:	f00c f869 	bl	800d7a4 <HAL_SPI_Transmit>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <writeRegSPI+0x3e>
		ret_status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]

	tx_buf[0] = (reg | SPI_WR_BIT);
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = value;
 80016e0:	79bb      	ldrb	r3, [r7, #6]
 80016e2:	737b      	strb	r3, [r7, #13]

	//Write the value to the SPI register
	if(HAL_OK != HAL_SPI_Transmit(&SPI_Handle, tx_buf , SPI_TX_SIZE, SPI_TIMEOUT))
 80016e4:	f107 010c 	add.w	r1, r7, #12
 80016e8:	2364      	movs	r3, #100	; 0x64
 80016ea:	2202      	movs	r2, #2
 80016ec:	f107 0018 	add.w	r0, r7, #24
 80016f0:	f00c f858 	bl	800d7a4 <HAL_SPI_Transmit>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <writeRegSPI+0x60>
		ret_status = HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	73fb      	strb	r3, [r7, #15]

	return ret_status;
 80016fe:	7bfb      	ldrb	r3, [r7, #15]

}
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800170a:	b002      	add	sp, #8
 800170c:	4770      	bx	lr

0800170e <readRegI2C>:
 *  		uint8_t dev_addr: Slave address for I2C device
 *  		I2C_HandleTypeDef I2C_Handle: The I2C peripheral on the micro-controller
 * @retval ret_status: Error status
 */
uint8_t readRegI2C(uint8_t dev_addr ,uint8_t reg , uint8_t *value , uint8_t data_bytes ,  I2C_HandleTypeDef I2C_Handle)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b088      	sub	sp, #32
 8001712:	af04      	add	r7, sp, #16
 8001714:	603a      	str	r2, [r7, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	4603      	mov	r3, r0
 800171a:	71fb      	strb	r3, [r7, #7]
 800171c:	460b      	mov	r3, r1
 800171e:	71bb      	strb	r3, [r7, #6]
 8001720:	4613      	mov	r3, r2
 8001722:	717b      	strb	r3, [r7, #5]
	uint8_t ret_status = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	73fb      	strb	r3, [r7, #15]

	//Read the specified number of bytes from the device
	if(HAL_OK != HAL_I2C_Mem_Read(&I2C_Handle, dev_addr, reg, I2C_MEMADD_SIZE_8BIT, value, data_bytes, I2C_TIMEOUT))
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	b299      	uxth	r1, r3
 800172c:	79bb      	ldrb	r3, [r7, #6]
 800172e:	b29a      	uxth	r2, r3
 8001730:	797b      	ldrb	r3, [r7, #5]
 8001732:	b29b      	uxth	r3, r3
 8001734:	2064      	movs	r0, #100	; 0x64
 8001736:	9002      	str	r0, [sp, #8]
 8001738:	9301      	str	r3, [sp, #4]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	2301      	movs	r3, #1
 8001740:	f107 0018 	add.w	r0, r7, #24
 8001744:	f006 fdfa 	bl	800833c <HAL_I2C_Mem_Read>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <readRegI2C+0x44>
		ret_status = HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	73fb      	strb	r3, [r7, #15]

	return ret_status;
 8001752:	7bfb      	ldrb	r3, [r7, #15]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <readRegSPI>:
 *  		uint8_t data_bytes: Amount of data to be read
 *  		SPI_HandleTypeDef SPI_Handle: The SPI peripheral on the micro-controller
 * @retval ret_status: Error status
 */
uint8_t readRegSPI(uint8_t reg , uint8_t *value  , SPI_HandleTypeDef SPI_Handle)
{
 800175c:	b082      	sub	sp, #8
 800175e:	b580      	push	{r7, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af02      	add	r7, sp, #8
 8001764:	6039      	str	r1, [r7, #0]
 8001766:	f107 0118 	add.w	r1, r7, #24
 800176a:	e881 000c 	stmia.w	r1, {r2, r3}
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
	uint8_t ret_status = HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_buf[SPI_TX_SIZE];

	tx_buf[0] = reg | SPI_RD_BIT;
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800177c:	b2db      	uxtb	r3, r3
 800177e:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	737b      	strb	r3, [r7, #13]

	//Read from register using SPI
	if(HAL_OK != HAL_SPI_TransmitReceive(&SPI_Handle, tx_buf, value, SPI_TX_SIZE , SPI_TIMEOUT))
 8001784:	f107 010c 	add.w	r1, r7, #12
 8001788:	2364      	movs	r3, #100	; 0x64
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	2302      	movs	r3, #2
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	f107 0018 	add.w	r0, r7, #24
 8001794:	f00c fa18 	bl	800dbc8 <HAL_SPI_TransmitReceive>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <readRegSPI+0x46>
		ret_status = HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	73fb      	strb	r3, [r7, #15]

	return ret_status;
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017ae:	b002      	add	sp, #8
 80017b0:	4770      	bx	lr

080017b2 <receiveI2C>:
 *  		uint8_t data_bytes: Amount of data to be read
 *  		I2C_HandleTypeDef I2C_Handle: The I2C peripheral on the micro-controller
 * @retval ret_status: Error status
 */
uint8_t receiveI2C(uint8_t dev_addr , uint8_t *value , uint8_t data_bytes , I2C_HandleTypeDef I2C_Handle)
{
 80017b2:	b082      	sub	sp, #8
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af02      	add	r7, sp, #8
 80017ba:	6039      	str	r1, [r7, #0]
 80017bc:	61fb      	str	r3, [r7, #28]
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
 80017c2:	4613      	mov	r3, r2
 80017c4:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_status = HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	73fb      	strb	r3, [r7, #15]
	if(HAL_OK != HAL_I2C_Master_Receive(&I2C_Handle, dev_addr, value, data_bytes, 100))
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	b299      	uxth	r1, r3
 80017ce:	79bb      	ldrb	r3, [r7, #6]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	f107 001c 	add.w	r0, r7, #28
 80017d6:	2264      	movs	r2, #100	; 0x64
 80017d8:	9200      	str	r2, [sp, #0]
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	f006 fba4 	bl	8007f28 <HAL_I2C_Master_Receive>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <receiveI2C+0x38>
		ret_status = HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	73fb      	strb	r3, [r7, #15]

	return ret_status;
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017f6:	b002      	add	sp, #8
 80017f8:	4770      	bx	lr

080017fa <transmitI2C>:
 *  		uint8_t data_bytes: Amount of data to be written
 *  		I2C_HandleTypeDef I2C_Handle: The I2C peripheral on the micro-controller
 * @retval ret_status: Error status
 */
uint8_t transmitI2C(uint8_t dev_addr , uint8_t *value , uint8_t data_bytes , I2C_HandleTypeDef I2C_Handle)
{
 80017fa:	b082      	sub	sp, #8
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af02      	add	r7, sp, #8
 8001802:	6039      	str	r1, [r7, #0]
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
 800180a:	4613      	mov	r3, r2
 800180c:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_status = HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	73fb      	strb	r3, [r7, #15]
	if(HAL_OK != HAL_I2C_Master_Transmit(&I2C_Handle, dev_addr, value, data_bytes, 100))
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	b299      	uxth	r1, r3
 8001816:	79bb      	ldrb	r3, [r7, #6]
 8001818:	b29b      	uxth	r3, r3
 800181a:	f107 001c 	add.w	r0, r7, #28
 800181e:	2264      	movs	r2, #100	; 0x64
 8001820:	9200      	str	r2, [sp, #0]
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	f006 fa8c 	bl	8007d40 <HAL_I2C_Master_Transmit>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <transmitI2C+0x38>
		ret_status = HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	73fb      	strb	r3, [r7, #15]

	return ret_status;
 8001832:	7bfb      	ldrb	r3, [r7, #15]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800183e:	b002      	add	sp, #8
 8001840:	4770      	bx	lr

08001842 <lis2mdlI2CWhoami>:
 * @brief LIS2MDL Device Identification
 * @param I2C_HandleTypeDef: The I2C peripheral on the micro-controller
 * @retval ret_status: Error status
 */
uint8_t lis2mdlI2CWhoami(I2C_HandleTypeDef I2C_Handle)
{
 8001842:	b084      	sub	sp, #16
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b097      	sub	sp, #92	; 0x5c
 8001848:	af14      	add	r7, sp, #80	; 0x50
 800184a:	f107 0418 	add.w	r4, r7, #24
 800184e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t buf = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_status = HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	71fb      	strb	r3, [r7, #7]

	if(HAL_OK != readRegI2C(LIS2MDL_I2C_ADDR, LIS2MDL_WHOAMI,
 800185a:	1dbc      	adds	r4, r7, #6
 800185c:	466b      	mov	r3, sp
 800185e:	f107 0118 	add.w	r1, r7, #24
 8001862:	224c      	movs	r2, #76	; 0x4c
 8001864:	4618      	mov	r0, r3
 8001866:	f00d fa9d 	bl	800eda4 <memcpy>
 800186a:	2301      	movs	r3, #1
 800186c:	4622      	mov	r2, r4
 800186e:	214f      	movs	r1, #79	; 0x4f
 8001870:	203c      	movs	r0, #60	; 0x3c
 8001872:	f7ff ff4c 	bl	800170e <readRegI2C>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d002      	beq.n	8001882 <lis2mdlI2CWhoami+0x40>
			&buf, I2C_MEMADD_SIZE_8BIT, I2C_Handle))
		ret_status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	71fb      	strb	r3, [r7, #7]
 8001880:	e007      	b.n	8001892 <lis2mdlI2CWhoami+0x50>
	else if(buf == LIS2MDL_DEV_ID)
 8001882:	79bb      	ldrb	r3, [r7, #6]
 8001884:	2b40      	cmp	r3, #64	; 0x40
 8001886:	d102      	bne.n	800188e <lis2mdlI2CWhoami+0x4c>
		ret_status = HAL_OK;
 8001888:	2300      	movs	r3, #0
 800188a:	71fb      	strb	r3, [r7, #7]
 800188c:	e001      	b.n	8001892 <lis2mdlI2CWhoami+0x50>
	else
		ret_status = HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	71fb      	strb	r3, [r7, #7]

	return ret_status;
 8001892:	79fb      	ldrb	r3, [r7, #7]
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800189e:	b004      	add	sp, #16
 80018a0:	4770      	bx	lr

080018a2 <lis2mdlI2CSetup>:
 * @brief LIS2MDL Sensor Initialization
 * @param I2C_HandleTypeDef: The I2C peripheral on the micro-controller
 * @retval ret_status: Error status
 */
uint8_t lis2mdlI2CSetup(I2C_HandleTypeDef I2C_Handle)
{
 80018a2:	b084      	sub	sp, #16
 80018a4:	b590      	push	{r4, r7, lr}
 80018a6:	b097      	sub	sp, #92	; 0x5c
 80018a8:	af14      	add	r7, sp, #80	; 0x50
 80018aa:	f107 0418 	add.w	r4, r7, #24
 80018ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t val = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_status = HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	71fb      	strb	r3, [r7, #7]

	//Low Power Mode
	//Continuous mode
	//10 Hz ODR
	val = (m2_cont_mode | M2_LOW_PWR);
 80018ba:	2310      	movs	r3, #16
 80018bc:	71bb      	strb	r3, [r7, #6]
	if(HAL_OK != writeRegI2C(LIS2MDL_I2C_ADDR, LIS2MDL_CFG_A,
 80018be:	1dbc      	adds	r4, r7, #6
 80018c0:	466b      	mov	r3, sp
 80018c2:	f107 0118 	add.w	r1, r7, #24
 80018c6:	224c      	movs	r2, #76	; 0x4c
 80018c8:	4618      	mov	r0, r3
 80018ca:	f00d fa6b 	bl	800eda4 <memcpy>
 80018ce:	2301      	movs	r3, #1
 80018d0:	4622      	mov	r2, r4
 80018d2:	2160      	movs	r1, #96	; 0x60
 80018d4:	203c      	movs	r0, #60	; 0x3c
 80018d6:	f7ff febb 	bl	8001650 <writeRegI2C>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <lis2mdlI2CSetup+0x42>
			&val, I2C_MEMADD_SIZE_8BIT, I2C_Handle))
		ret_status = HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	71fb      	strb	r3, [r7, #7]

	//LPF enabled
	val = M2_LPF;
 80018e4:	2301      	movs	r3, #1
 80018e6:	71bb      	strb	r3, [r7, #6]
	if(HAL_OK != writeRegI2C(LIS2MDL_I2C_ADDR, LIS2MDL_CFG_B,
 80018e8:	1dbc      	adds	r4, r7, #6
 80018ea:	466b      	mov	r3, sp
 80018ec:	f107 0118 	add.w	r1, r7, #24
 80018f0:	224c      	movs	r2, #76	; 0x4c
 80018f2:	4618      	mov	r0, r3
 80018f4:	f00d fa56 	bl	800eda4 <memcpy>
 80018f8:	2301      	movs	r3, #1
 80018fa:	4622      	mov	r2, r4
 80018fc:	2161      	movs	r1, #97	; 0x61
 80018fe:	203c      	movs	r0, #60	; 0x3c
 8001900:	f7ff fea6 	bl	8001650 <writeRegI2C>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <lis2mdlI2CSetup+0x6c>
			&val, I2C_MEMADD_SIZE_8BIT, I2C_Handle))
		ret_status = HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	71fb      	strb	r3, [r7, #7]

	return ret_status;
 800190e:	79fb      	ldrb	r3, [r7, #7]

}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800191a:	b004      	add	sp, #16
 800191c:	4770      	bx	lr

0800191e <lis2mdlMagneticData>:
 * @param : uint8_t magn_data[]: Pointer to acquired magnetic data [output]
 * 	     I2C_HandleTypeDef: The I2C peripheral on the micro-controller
 * @retval ret_status: Error status
 */
uint8_t lis2mdlMagneticData(float mag_data[], I2C_HandleTypeDef I2C_Handle)
{
 800191e:	b084      	sub	sp, #16
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b099      	sub	sp, #100	; 0x64
 8001924:	af14      	add	r7, sp, #80	; 0x50
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800192c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t buf;
	uint8_t ret_status = HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	73fb      	strb	r3, [r7, #15]
	uint8_t mag_raw_data[3];

	//Status register - Polling for new data
	while(!(buf & M2_ZYXDA))
 8001934:	e013      	b.n	800195e <lis2mdlMagneticData+0x40>
	{
		if(HAL_OK != readRegI2C(LIS2MDL_I2C_ADDR, LIS2MDL_STATUS ,
 8001936:	f107 040e 	add.w	r4, r7, #14
 800193a:	4668      	mov	r0, sp
 800193c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001940:	224c      	movs	r2, #76	; 0x4c
 8001942:	4619      	mov	r1, r3
 8001944:	f00d fa2e 	bl	800eda4 <memcpy>
 8001948:	2301      	movs	r3, #1
 800194a:	4622      	mov	r2, r4
 800194c:	2167      	movs	r1, #103	; 0x67
 800194e:	203c      	movs	r0, #60	; 0x3c
 8001950:	f7ff fedd 	bl	800170e <readRegI2C>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <lis2mdlMagneticData+0x40>
				&buf, I2C_MEMADD_SIZE_8BIT, I2C_Handle))
			ret_status = HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	73fb      	strb	r3, [r7, #15]
	while(!(buf & M2_ZYXDA))
 800195e:	7bbb      	ldrb	r3, [r7, #14]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0e6      	beq.n	8001936 <lis2mdlMagneticData+0x18>
	}

	//Magnetic data - multi-byte read
	if(HAL_OK != readRegI2C(LIS2MDL_I2C_ADDR, LIS2MDL_OUT_X_L,
 8001968:	f107 0408 	add.w	r4, r7, #8
 800196c:	4668      	mov	r0, sp
 800196e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001972:	224c      	movs	r2, #76	; 0x4c
 8001974:	4619      	mov	r1, r3
 8001976:	f00d fa15 	bl	800eda4 <memcpy>
 800197a:	2306      	movs	r3, #6
 800197c:	4622      	mov	r2, r4
 800197e:	2168      	movs	r1, #104	; 0x68
 8001980:	203c      	movs	r0, #60	; 0x3c
 8001982:	f7ff fec4 	bl	800170e <readRegI2C>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <lis2mdlMagneticData+0x72>
			&mag_raw_data[0], 6 , I2C_Handle))
		ret_status = HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]

	lis2mdlI2CMagneticFinalData(mag_raw_data, sizeof(mag_raw_data), mag_data);
 8001990:	f107 0308 	add.w	r3, r7, #8
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	2103      	movs	r1, #3
 8001998:	4618      	mov	r0, r3
 800199a:	f000 f808 	bl	80019ae <lis2mdlI2CMagneticFinalData>

	return ret_status;
 800199e:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80019aa:	b004      	add	sp, #16
 80019ac:	4770      	bx	lr

080019ae <lis2mdlI2CMagneticFinalData>:
 * 			uint8_t magn_size: Size of array of the magnetic data
 * 			float magn_final_data[]: Pointer to final magnetic data
 * @retval ret_status: Error status
 */
uint8_t lis2mdlI2CMagneticFinalData(uint8_t *magn_raw_data , uint8_t magn_size , float magn_final_data[])
{
 80019ae:	b480      	push	{r7}
 80019b0:	b08b      	sub	sp, #44	; 0x2c
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	60f8      	str	r0, [r7, #12]
 80019b6:	460b      	mov	r3, r1
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	72fb      	strb	r3, [r7, #11]
	uint8_t magn_data[6];

	float lis2mdl_sens = 1.50f;
 80019bc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80019c0:	623b      	str	r3, [r7, #32]

	for (int i = 0 ; i < magn_size ; i++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
 80019c6:	e00c      	b.n	80019e2 <lis2mdlI2CMagneticFinalData+0x34>
	{
		magn_data[i] = magn_raw_data[i];
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	4413      	add	r3, r2
 80019ce:	7819      	ldrb	r1, [r3, #0]
 80019d0:	f107 0214 	add.w	r2, r7, #20
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	4413      	add	r3, r2
 80019d8:	460a      	mov	r2, r1
 80019da:	701a      	strb	r2, [r3, #0]
	for (int i = 0 ; i < magn_size ; i++)
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	3301      	adds	r3, #1
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
 80019e2:	7afb      	ldrb	r3, [r7, #11]
 80019e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e6:	429a      	cmp	r2, r3
 80019e8:	dbee      	blt.n	80019c8 <lis2mdlI2CMagneticFinalData+0x1a>
	}

	//X axis raw concatenated data
	int16_t X_concat = (int16_t)((magn_data[1] << 8) | magn_data[0]);
 80019ea:	7d7b      	ldrb	r3, [r7, #21]
 80019ec:	021b      	lsls	r3, r3, #8
 80019ee:	b21a      	sxth	r2, r3
 80019f0:	7d3b      	ldrb	r3, [r7, #20]
 80019f2:	b21b      	sxth	r3, r3
 80019f4:	4313      	orrs	r3, r2
 80019f6:	83fb      	strh	r3, [r7, #30]

	//Y axis raw concatenated data
	int16_t Y_concat = (int16_t)((magn_data[3] << 8) | magn_data[2]);
 80019f8:	7dfb      	ldrb	r3, [r7, #23]
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	b21a      	sxth	r2, r3
 80019fe:	7dbb      	ldrb	r3, [r7, #22]
 8001a00:	b21b      	sxth	r3, r3
 8001a02:	4313      	orrs	r3, r2
 8001a04:	83bb      	strh	r3, [r7, #28]

	//Z axis raw concatenated data
	int16_t Z_concat = (int16_t)((magn_data[5] << 8) | magn_data[4]);
 8001a06:	7e7b      	ldrb	r3, [r7, #25]
 8001a08:	021b      	lsls	r3, r3, #8
 8001a0a:	b21a      	sxth	r2, r3
 8001a0c:	7e3b      	ldrb	r3, [r7, #24]
 8001a0e:	b21b      	sxth	r3, r3
 8001a10:	4313      	orrs	r3, r2
 8001a12:	837b      	strh	r3, [r7, #26]

	//Multiply the magnetic data with sensitivity
	magn_final_data[0] = (X_concat * lis2mdl_sens);
 8001a14:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001a18:	ee07 3a90 	vmov	s15, r3
 8001a1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a20:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	edc3 7a00 	vstr	s15, [r3]
	magn_final_data[1] = (Y_concat * lis2mdl_sens);
 8001a2e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001a32:	ee07 3a90 	vmov	s15, r3
 8001a36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a46:	edc3 7a00 	vstr	s15, [r3]
	magn_final_data[2] = (Z_concat * lis2mdl_sens);
 8001a4a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001a4e:	ee07 3a90 	vmov	s15, r3
 8001a52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3308      	adds	r3, #8
 8001a5a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a62:	edc3 7a00 	vstr	s15, [r3]

	return 0;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	372c      	adds	r7, #44	; 0x2c
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <lis3mdlI2CWhoami>:
 * @brief LIS3MDL Device Identification
 * @param I2C_HandleTypeDef: The I2C peripheral on the micro-controller
 * @retval ret_status: Error status
 */
uint8_t lis3mdlI2CWhoami(I2C_HandleTypeDef I2C_Handle)
{
 8001a74:	b084      	sub	sp, #16
 8001a76:	b590      	push	{r4, r7, lr}
 8001a78:	b097      	sub	sp, #92	; 0x5c
 8001a7a:	af14      	add	r7, sp, #80	; 0x50
 8001a7c:	f107 0418 	add.w	r4, r7, #24
 8001a80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t buf = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_status = HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	71fb      	strb	r3, [r7, #7]

	if(HAL_OK != readRegI2C(LIS3MDL_I2C_ADDR, LIS3MDL_WHOAMI , &buf, I2C_MEMADD_SIZE_8BIT, I2C_Handle))
 8001a8c:	1dbc      	adds	r4, r7, #6
 8001a8e:	466b      	mov	r3, sp
 8001a90:	f107 0118 	add.w	r1, r7, #24
 8001a94:	224c      	movs	r2, #76	; 0x4c
 8001a96:	4618      	mov	r0, r3
 8001a98:	f00d f984 	bl	800eda4 <memcpy>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	4622      	mov	r2, r4
 8001aa0:	210f      	movs	r1, #15
 8001aa2:	2038      	movs	r0, #56	; 0x38
 8001aa4:	f7ff fe33 	bl	800170e <readRegI2C>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d002      	beq.n	8001ab4 <lis3mdlI2CWhoami+0x40>
		ret_status = HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	71fb      	strb	r3, [r7, #7]
 8001ab2:	e007      	b.n	8001ac4 <lis3mdlI2CWhoami+0x50>
	else if(buf == LIS3MDL_DEV_ID)
 8001ab4:	79bb      	ldrb	r3, [r7, #6]
 8001ab6:	2b3d      	cmp	r3, #61	; 0x3d
 8001ab8:	d102      	bne.n	8001ac0 <lis3mdlI2CWhoami+0x4c>
		ret_status = HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	71fb      	strb	r3, [r7, #7]
 8001abe:	e001      	b.n	8001ac4 <lis3mdlI2CWhoami+0x50>
	else
		ret_status = HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	71fb      	strb	r3, [r7, #7]

	return ret_status;
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001ad0:	b004      	add	sp, #16
 8001ad2:	4770      	bx	lr

08001ad4 <lis3mdlI2CSetup>:
 * @brief LIS3MDL Sensor Initialization
 * @param I2C_HandleTypeDef: The I2C peripheral on the micro-controller
 * @retval ret_status: Error status
 */
uint8_t lis3mdlI2CSetup(I2C_HandleTypeDef I2C_Handle)
{
 8001ad4:	b084      	sub	sp, #16
 8001ad6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ad8:	b097      	sub	sp, #92	; 0x5c
 8001ada:	af14      	add	r7, sp, #80	; 0x50
 8001adc:	f107 0420 	add.w	r4, r7, #32
 8001ae0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t val = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_status = HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	71fb      	strb	r3, [r7, #7]

	//80 Hz ODR
	//Ultra-high performance
	val = (m3_odr_80Hz | m3_op_mode_UHP);
 8001aec:	237c      	movs	r3, #124	; 0x7c
 8001aee:	71bb      	strb	r3, [r7, #6]
	if(HAL_OK != writeRegI2C(LIS3MDL_I2C_ADDR, LIS3MDL_CTRL1,
 8001af0:	1dbc      	adds	r4, r7, #6
 8001af2:	466b      	mov	r3, sp
 8001af4:	f107 0120 	add.w	r1, r7, #32
 8001af8:	224c      	movs	r2, #76	; 0x4c
 8001afa:	4618      	mov	r0, r3
 8001afc:	f00d f952 	bl	800eda4 <memcpy>
 8001b00:	2301      	movs	r3, #1
 8001b02:	4622      	mov	r2, r4
 8001b04:	2120      	movs	r1, #32
 8001b06:	2038      	movs	r0, #56	; 0x38
 8001b08:	f7ff fda2 	bl	8001650 <writeRegI2C>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <lis3mdlI2CSetup+0x42>
			&val, I2C_MEMADD_SIZE_8BIT, I2C_Handle))
		ret_status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	71fb      	strb	r3, [r7, #7]

	//Full scale: +- 8 Gauss
	val = m3_fs_8gauss;
 8001b16:	2320      	movs	r3, #32
 8001b18:	71bb      	strb	r3, [r7, #6]
	if(HAL_OK != writeRegI2C(LIS3MDL_I2C_ADDR, LIS3MDL_CTRL2,
 8001b1a:	1dbc      	adds	r4, r7, #6
 8001b1c:	466b      	mov	r3, sp
 8001b1e:	f107 0120 	add.w	r1, r7, #32
 8001b22:	224c      	movs	r2, #76	; 0x4c
 8001b24:	4618      	mov	r0, r3
 8001b26:	f00d f93d 	bl	800eda4 <memcpy>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	4622      	mov	r2, r4
 8001b2e:	2121      	movs	r1, #33	; 0x21
 8001b30:	2038      	movs	r0, #56	; 0x38
 8001b32:	f7ff fd8d 	bl	8001650 <writeRegI2C>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <lis3mdlI2CSetup+0x6c>
			&val, I2C_MEMADD_SIZE_8BIT, I2C_Handle))
		ret_status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	71fb      	strb	r3, [r7, #7]

	//Continuous conversion mode
	val = m3_cont_mode;
 8001b40:	2300      	movs	r3, #0
 8001b42:	71bb      	strb	r3, [r7, #6]
	if(HAL_OK != writeRegI2C(LIS3MDL_I2C_ADDR, LIS3MDL_CTRL3,
 8001b44:	1dbc      	adds	r4, r7, #6
 8001b46:	466b      	mov	r3, sp
 8001b48:	f107 0120 	add.w	r1, r7, #32
 8001b4c:	224c      	movs	r2, #76	; 0x4c
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f00d f928 	bl	800eda4 <memcpy>
 8001b54:	2301      	movs	r3, #1
 8001b56:	4622      	mov	r2, r4
 8001b58:	2122      	movs	r1, #34	; 0x22
 8001b5a:	2038      	movs	r0, #56	; 0x38
 8001b5c:	f7ff fd78 	bl	8001650 <writeRegI2C>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <lis3mdlI2CSetup+0x96>
			&val, I2C_MEMADD_SIZE_8BIT, I2C_Handle))
		ret_status = HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	71fb      	strb	r3, [r7, #7]

	//Ultra-high performance
	val = m3_omz_UHP;
 8001b6a:	230c      	movs	r3, #12
 8001b6c:	71bb      	strb	r3, [r7, #6]
	if(HAL_OK != writeRegI2C(LIS3MDL_I2C_ADDR, LIS3MDL_CTRL4,
 8001b6e:	1dbc      	adds	r4, r7, #6
 8001b70:	466b      	mov	r3, sp
 8001b72:	f107 0120 	add.w	r1, r7, #32
 8001b76:	224c      	movs	r2, #76	; 0x4c
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f00d f913 	bl	800eda4 <memcpy>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	4622      	mov	r2, r4
 8001b82:	2123      	movs	r1, #35	; 0x23
 8001b84:	2038      	movs	r0, #56	; 0x38
 8001b86:	f7ff fd63 	bl	8001650 <writeRegI2C>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <lis3mdlI2CSetup+0xc0>
			&val, I2C_MEMADD_SIZE_8BIT, I2C_Handle))
		ret_status = HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	71fb      	strb	r3, [r7, #7]

	//To clear the data ready interrupt, the data registers have to be read
#if(LIS3MDL_DRDY_EN == 1)
	{
		int16_t dummy_data[3];
		lis3mdlMagneticData(dummy_data, I2C_Handle);
 8001b94:	463e      	mov	r6, r7
 8001b96:	466d      	mov	r5, sp
 8001b98:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ba8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001bb0:	f107 0320 	add.w	r3, r7, #32
 8001bb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bb6:	4630      	mov	r0, r6
 8001bb8:	f000 f808 	bl	8001bcc <lis3mdlMagneticData>
	}
#endif

	return ret_status;
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001bc8:	b004      	add	sp, #16
 8001bca:	4770      	bx	lr

08001bcc <lis3mdlMagneticData>:
 * @param : uint8_t magn_data[]: Pointer to acquired magnetic data [output]
 * 	     I2C_HandleTypeDef: The I2C peripheral on the micro-controller
 * @retval ret_status: Error status
 */
uint8_t lis3mdlMagneticData(int16_t magn_data[], I2C_HandleTypeDef I2C_Handle)
{
 8001bcc:	b084      	sub	sp, #16
 8001bce:	b590      	push	{r4, r7, lr}
 8001bd0:	b099      	sub	sp, #100	; 0x64
 8001bd2:	af14      	add	r7, sp, #80	; 0x50
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t buf = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	73bb      	strb	r3, [r7, #14]
	uint8_t ret_status = HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	73fb      	strb	r3, [r7, #15]
	uint8_t raw_mag_data[6];

	//Status register - Polling for new data
	while(!(buf & M3_ZYXDA))
 8001be6:	e013      	b.n	8001c10 <lis3mdlMagneticData+0x44>
	{
		if(HAL_OK != readRegI2C(LIS3MDL_I2C_ADDR, LIS3MDL_STATUS, &buf, I2C_MEMADD_SIZE_8BIT, I2C_Handle))
 8001be8:	f107 040e 	add.w	r4, r7, #14
 8001bec:	4668      	mov	r0, sp
 8001bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf2:	224c      	movs	r2, #76	; 0x4c
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f00d f8d5 	bl	800eda4 <memcpy>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	4622      	mov	r2, r4
 8001bfe:	2127      	movs	r1, #39	; 0x27
 8001c00:	2038      	movs	r0, #56	; 0x38
 8001c02:	f7ff fd84 	bl	800170e <readRegI2C>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <lis3mdlMagneticData+0x44>
			ret_status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
	while(!(buf & M3_ZYXDA))
 8001c10:	7bbb      	ldrb	r3, [r7, #14]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0e6      	beq.n	8001be8 <lis3mdlMagneticData+0x1c>
	}

	//Read 6 bytes of data(2 for each X, Y and Z axes)
	if(HAL_OK != readRegI2C(LIS3MDL_I2C_ADDR, LIS3MDL_OUT_X_L , &raw_mag_data[0], sizeof(raw_mag_data), I2C_Handle))
 8001c1a:	f107 0408 	add.w	r4, r7, #8
 8001c1e:	4668      	mov	r0, sp
 8001c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c24:	224c      	movs	r2, #76	; 0x4c
 8001c26:	4619      	mov	r1, r3
 8001c28:	f00d f8bc 	bl	800eda4 <memcpy>
 8001c2c:	2306      	movs	r3, #6
 8001c2e:	4622      	mov	r2, r4
 8001c30:	2128      	movs	r1, #40	; 0x28
 8001c32:	2038      	movs	r0, #56	; 0x38
 8001c34:	f7ff fd6b 	bl	800170e <readRegI2C>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <lis3mdlMagneticData+0x76>
		ret_status = HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	73fb      	strb	r3, [r7, #15]

	magn_data[0] = (int16_t)(((int16_t)raw_mag_data[1] << 8) | (int16_t)raw_mag_data[0]);
 8001c42:	7a7b      	ldrb	r3, [r7, #9]
 8001c44:	021b      	lsls	r3, r3, #8
 8001c46:	b21a      	sxth	r2, r3
 8001c48:	7a3b      	ldrb	r3, [r7, #8]
 8001c4a:	b21b      	sxth	r3, r3
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	b21a      	sxth	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	801a      	strh	r2, [r3, #0]
	magn_data[1] = (int16_t)(((int16_t)raw_mag_data[3] << 8) | (int16_t)raw_mag_data[2]);
 8001c54:	7afb      	ldrb	r3, [r7, #11]
 8001c56:	021b      	lsls	r3, r3, #8
 8001c58:	b219      	sxth	r1, r3
 8001c5a:	7abb      	ldrb	r3, [r7, #10]
 8001c5c:	b21a      	sxth	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3302      	adds	r3, #2
 8001c62:	430a      	orrs	r2, r1
 8001c64:	b212      	sxth	r2, r2
 8001c66:	801a      	strh	r2, [r3, #0]
	magn_data[2] = (int16_t)(((int16_t)raw_mag_data[5] << 8) | (int16_t)raw_mag_data[4]);
 8001c68:	7b7b      	ldrb	r3, [r7, #13]
 8001c6a:	021b      	lsls	r3, r3, #8
 8001c6c:	b219      	sxth	r1, r3
 8001c6e:	7b3b      	ldrb	r3, [r7, #12]
 8001c70:	b21a      	sxth	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3304      	adds	r3, #4
 8001c76:	430a      	orrs	r2, r1
 8001c78:	b212      	sxth	r2, r2
 8001c7a:	801a      	strh	r2, [r3, #0]

	return ret_status;
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001c88:	b004      	add	sp, #16
 8001c8a:	4770      	bx	lr

08001c8c <lps227SPIWhoami>:
 * @brief LPS27 Device Identification
 * @param SPI_HandleTypeDef: The SPI peripheral on the micro-controller
 * @retval ret_status: Error status
 */
uint8_t lps227SPIWhoami(SPI_HandleTypeDef SPI_Handle)
{
 8001c8c:	b084      	sub	sp, #16
 8001c8e:	b590      	push	{r4, r7, lr}
 8001c90:	b0a5      	sub	sp, #148	; 0x94
 8001c92:	af22      	add	r7, sp, #136	; 0x88
 8001c94:	f107 0418 	add.w	r4, r7, #24
 8001c98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t ret_status = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buf[2];

	if(HAL_OK != readRegSPI(LPS277_WHOAMI, rx_buf, SPI_Handle))
 8001ca0:	1d3c      	adds	r4, r7, #4
 8001ca2:	4668      	mov	r0, sp
 8001ca4:	f107 0320 	add.w	r3, r7, #32
 8001ca8:	2288      	movs	r2, #136	; 0x88
 8001caa:	4619      	mov	r1, r3
 8001cac:	f00d f87a 	bl	800eda4 <memcpy>
 8001cb0:	f107 0318 	add.w	r3, r7, #24
 8001cb4:	cb0c      	ldmia	r3, {r2, r3}
 8001cb6:	4621      	mov	r1, r4
 8001cb8:	200f      	movs	r0, #15
 8001cba:	f7ff fd4f 	bl	800175c <readRegSPI>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <lps227SPIWhoami+0x3e>
		ret_status  = HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	71fb      	strb	r3, [r7, #7]
 8001cc8:	e007      	b.n	8001cda <lps227SPIWhoami+0x4e>
	else if(rx_buf[1] == LPS277_DEV_ID)
 8001cca:	797b      	ldrb	r3, [r7, #5]
 8001ccc:	2bb3      	cmp	r3, #179	; 0xb3
 8001cce:	d102      	bne.n	8001cd6 <lps227SPIWhoami+0x4a>
		ret_status = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	71fb      	strb	r3, [r7, #7]
 8001cd4:	e001      	b.n	8001cda <lps227SPIWhoami+0x4e>
	else
		ret_status = HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	71fb      	strb	r3, [r7, #7]


	return ret_status;
 8001cda:	79fb      	ldrb	r3, [r7, #7]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001ce6:	b004      	add	sp, #16
 8001ce8:	4770      	bx	lr

08001cea <lps277SPISetup>:
 * @brief LPS27 Sesnsor Initialization
 * @param SPI_HandleTypeDef: The SPI peripheral on the micro-controller
 * @retval ret_status: Error status
 */
uint8_t lps277SPISetup(SPI_HandleTypeDef SPI_Handle)
{
 8001cea:	b084      	sub	sp, #16
 8001cec:	b590      	push	{r4, r7, lr}
 8001cee:	b0a5      	sub	sp, #148	; 0x94
 8001cf0:	af22      	add	r7, sp, #136	; 0x88
 8001cf2:	f107 0418 	add.w	r4, r7, #24
 8001cf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t ret_status = HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	71fb      	strb	r3, [r7, #7]


	//Enable SPI interface
	if(HAL_OK != writeRegSPI(LPS277_IF_CTRL,
 8001cfe:	4668      	mov	r0, sp
 8001d00:	f107 0320 	add.w	r3, r7, #32
 8001d04:	2288      	movs	r2, #136	; 0x88
 8001d06:	4619      	mov	r1, r3
 8001d08:	f00d f84c 	bl	800eda4 <memcpy>
 8001d0c:	f107 0318 	add.w	r3, r7, #24
 8001d10:	cb0c      	ldmia	r3, {r2, r3}
 8001d12:	2107      	movs	r1, #7
 8001d14:	200e      	movs	r0, #14
 8001d16:	f7ff fcc2 	bl	800169e <writeRegSPI>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <lps277SPISetup+0x3a>
			(LPS_I2C_DISABLE | LPS_I3C_DISABLE | LPS_PD_DIS_INT1), SPI_Handle))
		ret_status = HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	71fb      	strb	r3, [r7, #7]

	//ODR = 10 Hz
	//BDU enabled
	//LPF enabled -> ODR/20
	if(HAL_OK != writeRegSPI(LPS277_CTRL1,
 8001d24:	4668      	mov	r0, sp
 8001d26:	f107 0320 	add.w	r3, r7, #32
 8001d2a:	2288      	movs	r2, #136	; 0x88
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f00d f839 	bl	800eda4 <memcpy>
 8001d32:	f107 0318 	add.w	r3, r7, #24
 8001d36:	cb0c      	ldmia	r3, {r2, r3}
 8001d38:	212e      	movs	r1, #46	; 0x2e
 8001d3a:	2010      	movs	r0, #16
 8001d3c:	f7ff fcaf 	bl	800169e <writeRegSPI>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <lps277SPISetup+0x60>
			(lps_10Hz | LPS_BDU | lps_lpf_odr_20), SPI_Handle))
		ret_status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	71fb      	strb	r3, [r7, #7]

	//Enable the data ready signal hardware pin to trigger when new data set available
	//The interrupt is active high.
	if(HAL_OK != writeRegSPI(LPS277_CTRL3, LPS_DRDY, SPI_Handle))
 8001d4a:	4668      	mov	r0, sp
 8001d4c:	f107 0320 	add.w	r3, r7, #32
 8001d50:	2288      	movs	r2, #136	; 0x88
 8001d52:	4619      	mov	r1, r3
 8001d54:	f00d f826 	bl	800eda4 <memcpy>
 8001d58:	f107 0318 	add.w	r3, r7, #24
 8001d5c:	cb0c      	ldmia	r3, {r2, r3}
 8001d5e:	2104      	movs	r1, #4
 8001d60:	2012      	movs	r0, #18
 8001d62:	f7ff fc9c 	bl	800169e <writeRegSPI>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <lps277SPISetup+0x86>
		ret_status = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	71fb      	strb	r3, [r7, #7]

	//To clear the data ready interrupt, the data registers have to be read
#if(LPS27_DRDY_EN == 1)
	{
		uint8_t dummy_data[3];
		lps277SPIPressureRawData(dummy_data , SPI_Handle);
 8001d70:	1d3c      	adds	r4, r7, #4
 8001d72:	4668      	mov	r0, sp
 8001d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d78:	2284      	movs	r2, #132	; 0x84
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f00d f812 	bl	800eda4 <memcpy>
 8001d80:	f107 0318 	add.w	r3, r7, #24
 8001d84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d86:	4620      	mov	r0, r4
 8001d88:	f000 f808 	bl	8001d9c <lps277SPIPressureRawData>
	}
#endif

	return ret_status;
 8001d8c:	79fb      	ldrb	r3, [r7, #7]

}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001d98:	b004      	add	sp, #16
 8001d9a:	4770      	bx	lr

08001d9c <lps277SPIPressureRawData>:
 * 			SPI_HandleTypeDef: The SPI peripheral on the micro-controller
 * 			uint8_t *conv_flag: User-defined flag to check if data ready pin was triggered
 * @retval ret_status: Error status
 */
uint8_t lps277SPIPressureRawData(uint8_t pres_data[], SPI_HandleTypeDef SPI_Handle)
{
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	b590      	push	{r4, r7, lr}
 8001da0:	b0a7      	sub	sp, #156	; 0x9c
 8001da2:	af22      	add	r7, sp, #136	; 0x88
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001daa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//	uint8_t tx_buf[2];
	uint8_t rx_buf[2] = {0 , 0};
 8001dae:	2300      	movs	r3, #0
 8001db0:	81bb      	strh	r3, [r7, #12]
	uint8_t ret_status = HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	73fb      	strb	r3, [r7, #15]
	//		if(HAL_OK != HAL_SPI_TransmitReceive(&SPI_Handle, tx_buf, rx_buf, 2, 500))
	//			ret_status = HAL_ERROR;
	//	}

	//LSB data
	if(HAL_OK != readRegSPI(LPS277_PRESS_LOW, rx_buf, SPI_Handle))
 8001db6:	f107 040c 	add.w	r4, r7, #12
 8001dba:	4668      	mov	r0, sp
 8001dbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc0:	2288      	movs	r2, #136	; 0x88
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f00c ffee 	bl	800eda4 <memcpy>
 8001dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dcc:	cb0c      	ldmia	r3, {r2, r3}
 8001dce:	4621      	mov	r1, r4
 8001dd0:	2028      	movs	r0, #40	; 0x28
 8001dd2:	f7ff fcc3 	bl	800175c <readRegSPI>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <lps277SPIPressureRawData+0x46>
		ret_status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
 8001de0:	e002      	b.n	8001de8 <lps277SPIPressureRawData+0x4c>
	else
		pres_data[0] = rx_buf[1];
 8001de2:	7b7a      	ldrb	r2, [r7, #13]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	701a      	strb	r2, [r3, #0]

	//Middle data
	if(HAL_OK != readRegSPI(LPS277_PRESS_MIDDLE, rx_buf, SPI_Handle))
 8001de8:	f107 040c 	add.w	r4, r7, #12
 8001dec:	4668      	mov	r0, sp
 8001dee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df2:	2288      	movs	r2, #136	; 0x88
 8001df4:	4619      	mov	r1, r3
 8001df6:	f00c ffd5 	bl	800eda4 <memcpy>
 8001dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dfe:	cb0c      	ldmia	r3, {r2, r3}
 8001e00:	4621      	mov	r1, r4
 8001e02:	2029      	movs	r0, #41	; 0x29
 8001e04:	f7ff fcaa 	bl	800175c <readRegSPI>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <lps277SPIPressureRawData+0x78>
		ret_status = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	73fb      	strb	r3, [r7, #15]
 8001e12:	e003      	b.n	8001e1c <lps277SPIPressureRawData+0x80>
	else
		pres_data[1] = rx_buf[1];
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3301      	adds	r3, #1
 8001e18:	7b7a      	ldrb	r2, [r7, #13]
 8001e1a:	701a      	strb	r2, [r3, #0]

	//MSB data
	if(HAL_OK != readRegSPI(LPS277_PRESS_HIGH, rx_buf, SPI_Handle))
 8001e1c:	f107 040c 	add.w	r4, r7, #12
 8001e20:	4668      	mov	r0, sp
 8001e22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e26:	2288      	movs	r2, #136	; 0x88
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f00c ffbb 	bl	800eda4 <memcpy>
 8001e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e32:	cb0c      	ldmia	r3, {r2, r3}
 8001e34:	4621      	mov	r1, r4
 8001e36:	202a      	movs	r0, #42	; 0x2a
 8001e38:	f7ff fc90 	bl	800175c <readRegSPI>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <lps277SPIPressureRawData+0xac>
		ret_status = HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	73fb      	strb	r3, [r7, #15]
 8001e46:	e003      	b.n	8001e50 <lps277SPIPressureRawData+0xb4>
	else
		pres_data[2] = rx_buf[1];
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	7b7a      	ldrb	r2, [r7, #13]
 8001e4e:	701a      	strb	r2, [r3, #0]

	return ret_status;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]

}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001e5c:	b004      	add	sp, #16
 8001e5e:	4770      	bx	lr

08001e60 <lps277SPIPressureData>:
 * 			SPI_HandleTypeDef: The SPI peripheral on the micro-controller
 * 			uint8_t *conv_flag: User-defined flag to check if data ready pin was triggered
 * @retval ret_status: Error status
 */
uint8_t lps277SPIPressureData(uint32_t *pres_data, SPI_HandleTypeDef SPI_Handle)
{
 8001e60:	b084      	sub	sp, #16
 8001e62:	b590      	push	{r4, r7, lr}
 8001e64:	b0a7      	sub	sp, #156	; 0x9c
 8001e66:	af22      	add	r7, sp, #136	; 0x88
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001e6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//	uint8_t tx_buf[2];
	uint8_t rx_buf[2] = {0 , 0};
 8001e72:	2300      	movs	r3, #0
 8001e74:	81bb      	strh	r3, [r7, #12]
	uint8_t ret_status = HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	73fb      	strb	r3, [r7, #15]
	//		if(HAL_OK != HAL_SPI_TransmitReceive(&SPI_Handle, tx_buf, rx_buf, 2, 500))
	//			ret_status = HAL_ERROR;
	//	}

	//LSB data
	if(HAL_OK != readRegSPI(LPS277_PRESS_LOW, rx_buf, SPI_Handle))
 8001e7a:	f107 040c 	add.w	r4, r7, #12
 8001e7e:	4668      	mov	r0, sp
 8001e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e84:	2288      	movs	r2, #136	; 0x88
 8001e86:	4619      	mov	r1, r3
 8001e88:	f00c ff8c 	bl	800eda4 <memcpy>
 8001e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e90:	cb0c      	ldmia	r3, {r2, r3}
 8001e92:	4621      	mov	r1, r4
 8001e94:	2028      	movs	r0, #40	; 0x28
 8001e96:	f7ff fc61 	bl	800175c <readRegSPI>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <lps277SPIPressureData+0x46>
		ret_status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	73fb      	strb	r3, [r7, #15]
 8001ea4:	e001      	b.n	8001eaa <lps277SPIPressureData+0x4a>
	else
		pres_raw_data[0] = rx_buf[1];
 8001ea6:	7b7b      	ldrb	r3, [r7, #13]
 8001ea8:	723b      	strb	r3, [r7, #8]

	//Middle data
	if(HAL_OK != readRegSPI(LPS277_PRESS_MIDDLE, rx_buf, SPI_Handle))
 8001eaa:	f107 040c 	add.w	r4, r7, #12
 8001eae:	4668      	mov	r0, sp
 8001eb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb4:	2288      	movs	r2, #136	; 0x88
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f00c ff74 	bl	800eda4 <memcpy>
 8001ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec0:	cb0c      	ldmia	r3, {r2, r3}
 8001ec2:	4621      	mov	r1, r4
 8001ec4:	2029      	movs	r0, #41	; 0x29
 8001ec6:	f7ff fc49 	bl	800175c <readRegSPI>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <lps277SPIPressureData+0x76>
		ret_status = HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	73fb      	strb	r3, [r7, #15]
 8001ed4:	e001      	b.n	8001eda <lps277SPIPressureData+0x7a>
	else
		pres_raw_data[1] = rx_buf[1];
 8001ed6:	7b7b      	ldrb	r3, [r7, #13]
 8001ed8:	727b      	strb	r3, [r7, #9]

	//MSB data
	if(HAL_OK != readRegSPI(LPS277_PRESS_HIGH, rx_buf, SPI_Handle))
 8001eda:	f107 040c 	add.w	r4, r7, #12
 8001ede:	4668      	mov	r0, sp
 8001ee0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ee4:	2288      	movs	r2, #136	; 0x88
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f00c ff5c 	bl	800eda4 <memcpy>
 8001eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef0:	cb0c      	ldmia	r3, {r2, r3}
 8001ef2:	4621      	mov	r1, r4
 8001ef4:	202a      	movs	r0, #42	; 0x2a
 8001ef6:	f7ff fc31 	bl	800175c <readRegSPI>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <lps277SPIPressureData+0xa6>
		ret_status = HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	73fb      	strb	r3, [r7, #15]
 8001f04:	e001      	b.n	8001f0a <lps277SPIPressureData+0xaa>
	else
		pres_raw_data[2] = rx_buf[1];
 8001f06:	7b7b      	ldrb	r3, [r7, #13]
 8001f08:	72bb      	strb	r3, [r7, #10]

	*pres_data = lps277SPIPressureFinalData(pres_raw_data, sizeof(pres_raw_data));
 8001f0a:	f107 0308 	add.w	r3, r7, #8
 8001f0e:	2103      	movs	r1, #3
 8001f10:	4618      	mov	r0, r3
 8001f12:	f000 f80b 	bl	8001f2c <lps277SPIPressureFinalData>
 8001f16:	4602      	mov	r2, r0
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	601a      	str	r2, [r3, #0]

	return ret_status;
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]

}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001f28:	b004      	add	sp, #16
 8001f2a:	4770      	bx	lr

08001f2c <lps277SPIPressureFinalData>:
 * @param : uint8_t *pres_raw_data: Pointer to acquired pressure data [input]
 * 			uint8_t pres_size: Size of array of the pressure data
 * @retval ret_status: Error status
 */
uint32_t lps277SPIPressureFinalData(uint8_t *pres_raw_data , uint8_t pres_size)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	70fb      	strb	r3, [r7, #3]
	uint32_t pres_final_data;

	uint8_t pres_data[3];

	for (int i = 0 ; i < pres_size ; i++)
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	e00c      	b.n	8001f58 <lps277SPIPressureFinalData+0x2c>
	{
		pres_data[i] = pres_raw_data[i];
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	4413      	add	r3, r2
 8001f44:	7819      	ldrb	r1, [r3, #0]
 8001f46:	f107 020c 	add.w	r2, r7, #12
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	460a      	mov	r2, r1
 8001f50:	701a      	strb	r2, [r3, #0]
	for (int i = 0 ; i < pres_size ; i++)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	3301      	adds	r3, #1
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	dbee      	blt.n	8001f3e <lps277SPIPressureFinalData+0x12>
	}

	//Concatenate the data into a 24 bit number
	pres_final_data = ((pres_data[2] << 16) | (pres_data[1] << 8) | (pres_data[0]));
 8001f60:	7bbb      	ldrb	r3, [r7, #14]
 8001f62:	041a      	lsls	r2, r3, #16
 8001f64:	7b7b      	ldrb	r3, [r7, #13]
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	7b3a      	ldrb	r2, [r7, #12]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]

	//Divide the value by sensitivity
	pres_final_data = pres_final_data/4096u;
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	0b1b      	lsrs	r3, r3, #12
 8001f74:	613b      	str	r3, [r7, #16]

	return pres_final_data;
 8001f76:	693b      	ldr	r3, [r7, #16]

}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	371c      	adds	r7, #28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <lsm6dso32SPIWhoami>:
 * @brief LSM6DSO32 Device Identification
 * @param SPI_HandleTypeDef: The SPI peripheral on the micro-controller
 * @retval ret_status: Error status
 */
uint8_t lsm6dso32SPIWhoami(SPI_HandleTypeDef SPI_Handle)
{
 8001f84:	b084      	sub	sp, #16
 8001f86:	b590      	push	{r4, r7, lr}
 8001f88:	b0a5      	sub	sp, #148	; 0x94
 8001f8a:	af22      	add	r7, sp, #136	; 0x88
 8001f8c:	f107 0418 	add.w	r4, r7, #24
 8001f90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t ret_status = HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buf[2];

	if(HAL_OK != readRegSPI(LSM6DSO32_WHOAMI, rx_buf, SPI_Handle))
 8001f98:	1d3c      	adds	r4, r7, #4
 8001f9a:	4668      	mov	r0, sp
 8001f9c:	f107 0320 	add.w	r3, r7, #32
 8001fa0:	2288      	movs	r2, #136	; 0x88
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f00c fefe 	bl	800eda4 <memcpy>
 8001fa8:	f107 0318 	add.w	r3, r7, #24
 8001fac:	cb0c      	ldmia	r3, {r2, r3}
 8001fae:	4621      	mov	r1, r4
 8001fb0:	200f      	movs	r0, #15
 8001fb2:	f7ff fbd3 	bl	800175c <readRegSPI>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <lsm6dso32SPIWhoami+0x3e>
		ret_status  = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	71fb      	strb	r3, [r7, #7]
 8001fc0:	e007      	b.n	8001fd2 <lsm6dso32SPIWhoami+0x4e>
	else if(rx_buf[1] == LSM6DSO32_DEV_ID)
 8001fc2:	797b      	ldrb	r3, [r7, #5]
 8001fc4:	2b6c      	cmp	r3, #108	; 0x6c
 8001fc6:	d102      	bne.n	8001fce <lsm6dso32SPIWhoami+0x4a>
		ret_status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	71fb      	strb	r3, [r7, #7]
 8001fcc:	e001      	b.n	8001fd2 <lsm6dso32SPIWhoami+0x4e>
	else
		ret_status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	71fb      	strb	r3, [r7, #7]


	return ret_status;
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001fde:	b004      	add	sp, #16
 8001fe0:	4770      	bx	lr

08001fe2 <lsm6dso32SPISetup>:
 * @brief LSM6DSO32 Sensor Initialization
 * @param SPI_HandleTypeDef: The SPI peripheral on the micro-controller
 * @retval ret_status: Error status
 */
uint8_t lsm6dso32SPISetup(SPI_HandleTypeDef SPI_Handle)
{
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b0a4      	sub	sp, #144	; 0x90
 8001fe8:	af22      	add	r7, sp, #136	; 0x88
 8001fea:	f107 0c10 	add.w	ip, r7, #16
 8001fee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uint8_t ret_status = HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	71fb      	strb	r3, [r7, #7]

	//Enable data ready interrupt for acceleration on INT1 pin
	if(HAL_OK != writeRegSPI(LSM6DSO32_INT1_CTRL,
 8001ff6:	4668      	mov	r0, sp
 8001ff8:	f107 0318 	add.w	r3, r7, #24
 8001ffc:	2288      	movs	r2, #136	; 0x88
 8001ffe:	4619      	mov	r1, r3
 8002000:	f00c fed0 	bl	800eda4 <memcpy>
 8002004:	f107 0310 	add.w	r3, r7, #16
 8002008:	cb0c      	ldmia	r3, {r2, r3}
 800200a:	2101      	movs	r1, #1
 800200c:	200d      	movs	r0, #13
 800200e:	f7ff fb46 	bl	800169e <writeRegSPI>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <lsm6dso32SPISetup+0x3a>
			DSO32_INT1_DRDY_XL, SPI_Handle))
		ret_status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	71fb      	strb	r3, [r7, #7]

	//Enable data ready interrupt for gyroscope on INT2 pin
	if(HAL_OK != writeRegSPI(LSM6DSO32_INT2_CTRL,
 800201c:	4668      	mov	r0, sp
 800201e:	f107 0318 	add.w	r3, r7, #24
 8002022:	2288      	movs	r2, #136	; 0x88
 8002024:	4619      	mov	r1, r3
 8002026:	f00c febd 	bl	800eda4 <memcpy>
 800202a:	f107 0310 	add.w	r3, r7, #16
 800202e:	cb0c      	ldmia	r3, {r2, r3}
 8002030:	2102      	movs	r1, #2
 8002032:	200e      	movs	r0, #14
 8002034:	f7ff fb33 	bl	800169e <writeRegSPI>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <lsm6dso32SPISetup+0x60>
			DSO32_INT2_DRDY_GYRO, SPI_Handle))
		ret_status = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	71fb      	strb	r3, [r7, #7]

	//Disable I3C interface
	if(HAL_OK != writeRegSPI(LSM6DSO32_CTRL9_C,
 8002042:	4668      	mov	r0, sp
 8002044:	f107 0318 	add.w	r3, r7, #24
 8002048:	2288      	movs	r2, #136	; 0x88
 800204a:	4619      	mov	r1, r3
 800204c:	f00c feaa 	bl	800eda4 <memcpy>
 8002050:	f107 0310 	add.w	r3, r7, #16
 8002054:	cb0c      	ldmia	r3, {r2, r3}
 8002056:	2102      	movs	r1, #2
 8002058:	2018      	movs	r0, #24
 800205a:	f7ff fb20 	bl	800169e <writeRegSPI>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <lsm6dso32SPISetup+0x86>
			DSO32_I3C_DISABLE, SPI_Handle))
		ret_status = HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	71fb      	strb	r3, [r7, #7]

	//Accelerometer ODR: 208 Hz
	//Full scale selection: 2g
	if(HAL_OK != writeRegSPI(LSM6DSO32_CTRL1_XL,
 8002068:	4668      	mov	r0, sp
 800206a:	f107 0318 	add.w	r3, r7, #24
 800206e:	2288      	movs	r2, #136	; 0x88
 8002070:	4619      	mov	r1, r3
 8002072:	f00c fe97 	bl	800eda4 <memcpy>
 8002076:	f107 0310 	add.w	r3, r7, #16
 800207a:	cb0c      	ldmia	r3, {r2, r3}
 800207c:	2150      	movs	r1, #80	; 0x50
 800207e:	2010      	movs	r0, #16
 8002080:	f7ff fb0d 	bl	800169e <writeRegSPI>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <lsm6dso32SPISetup+0xac>
			(dso32_odr_xl_208Hz | dso32_fs_xl_4g), SPI_Handle))
		ret_status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	71fb      	strb	r3, [r7, #7]

	//Gyroscope ODR: 208 Hz
	//Full scale selection: 250 dps
	if(HAL_OK != writeRegSPI(LSM6DSO32_CTRL2_G,
 800208e:	4668      	mov	r0, sp
 8002090:	f107 0318 	add.w	r3, r7, #24
 8002094:	2288      	movs	r2, #136	; 0x88
 8002096:	4619      	mov	r1, r3
 8002098:	f00c fe84 	bl	800eda4 <memcpy>
 800209c:	f107 0310 	add.w	r3, r7, #16
 80020a0:	cb0c      	ldmia	r3, {r2, r3}
 80020a2:	2150      	movs	r1, #80	; 0x50
 80020a4:	2011      	movs	r0, #17
 80020a6:	f7ff fafa 	bl	800169e <writeRegSPI>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <lsm6dso32SPISetup+0xd2>
			(dso32_odr_g_208Hz | dso32_fs_g_250), SPI_Handle))
		ret_status = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	71fb      	strb	r3, [r7, #7]

	//To clear the data ready interrupt, the data registers have to be read
#if(LSM6DSO32_DRDY_EN == 1)
	{
		int16_t dummy_data[3];
		lsm6dso32SPIAccData(SPI_Handle , dummy_data);
 80020b4:	463b      	mov	r3, r7
 80020b6:	9320      	str	r3, [sp, #128]	; 0x80
 80020b8:	4668      	mov	r0, sp
 80020ba:	f107 0320 	add.w	r3, r7, #32
 80020be:	2280      	movs	r2, #128	; 0x80
 80020c0:	4619      	mov	r1, r3
 80020c2:	f00c fe6f 	bl	800eda4 <memcpy>
 80020c6:	f107 0310 	add.w	r3, r7, #16
 80020ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020cc:	f000 f816 	bl	80020fc <lsm6dso32SPIAccData>
		lsm6dso32SPIGyroData(SPI_Handle , dummy_data);
 80020d0:	463b      	mov	r3, r7
 80020d2:	9320      	str	r3, [sp, #128]	; 0x80
 80020d4:	4668      	mov	r0, sp
 80020d6:	f107 0320 	add.w	r3, r7, #32
 80020da:	2280      	movs	r2, #128	; 0x80
 80020dc:	4619      	mov	r1, r3
 80020de:	f00c fe61 	bl	800eda4 <memcpy>
 80020e2:	f107 0310 	add.w	r3, r7, #16
 80020e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020e8:	f000 f8d6 	bl	8002298 <lsm6dso32SPIGyroData>

	}
#endif

	return ret_status;
 80020ec:	79fb      	ldrb	r3, [r7, #7]

}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020f8:	b004      	add	sp, #16
 80020fa:	4770      	bx	lr

080020fc <lsm6dso32SPIAccData>:
 * @param : int16_t acc_data[]: Pointer to acquired acceleration data [output]
 * 			SPI_HandleTypeDef: The SPI peripheral on the micro-controller
 * @retval ret_status: Error status
 */
uint8_t lsm6dso32SPIAccData(SPI_HandleTypeDef SPI_Handle , int16_t acc_data[])
{
 80020fc:	b084      	sub	sp, #16
 80020fe:	b590      	push	{r4, r7, lr}
 8002100:	b0a7      	sub	sp, #156	; 0x9c
 8002102:	af22      	add	r7, sp, #136	; 0x88
 8002104:	f107 0420 	add.w	r4, r7, #32
 8002108:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t rx_buf[2];
	int8_t temp_data[8];
	uint8_t ret_status = HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != readRegSPI(LSM6DSO32_OUTX_L_ACC, rx_buf, SPI_Handle))
 8002110:	f107 040c 	add.w	r4, r7, #12
 8002114:	4668      	mov	r0, sp
 8002116:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800211a:	2288      	movs	r2, #136	; 0x88
 800211c:	4619      	mov	r1, r3
 800211e:	f00c fe41 	bl	800eda4 <memcpy>
 8002122:	f107 0320 	add.w	r3, r7, #32
 8002126:	cb0c      	ldmia	r3, {r2, r3}
 8002128:	4621      	mov	r1, r4
 800212a:	2028      	movs	r0, #40	; 0x28
 800212c:	f7ff fb16 	bl	800175c <readRegSPI>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <lsm6dso32SPIAccData+0x40>
		ret_status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
 800213a:	e002      	b.n	8002142 <lsm6dso32SPIAccData+0x46>
	else
		temp_data[0] = (int8_t)rx_buf[1];
 800213c:	7b7b      	ldrb	r3, [r7, #13]
 800213e:	b25b      	sxtb	r3, r3
 8002140:	713b      	strb	r3, [r7, #4]

	if(HAL_OK != readRegSPI(LSM6DSO32_OUTX_H_ACC, rx_buf, SPI_Handle))
 8002142:	f107 040c 	add.w	r4, r7, #12
 8002146:	4668      	mov	r0, sp
 8002148:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800214c:	2288      	movs	r2, #136	; 0x88
 800214e:	4619      	mov	r1, r3
 8002150:	f00c fe28 	bl	800eda4 <memcpy>
 8002154:	f107 0320 	add.w	r3, r7, #32
 8002158:	cb0c      	ldmia	r3, {r2, r3}
 800215a:	4621      	mov	r1, r4
 800215c:	2029      	movs	r0, #41	; 0x29
 800215e:	f7ff fafd 	bl	800175c <readRegSPI>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d002      	beq.n	800216e <lsm6dso32SPIAccData+0x72>
		ret_status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
 800216c:	e002      	b.n	8002174 <lsm6dso32SPIAccData+0x78>
	else
		temp_data[1] = (int8_t)rx_buf[1];
 800216e:	7b7b      	ldrb	r3, [r7, #13]
 8002170:	b25b      	sxtb	r3, r3
 8002172:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != readRegSPI(LSM6DSO32_OUTY_L_ACC, rx_buf, SPI_Handle))
 8002174:	f107 040c 	add.w	r4, r7, #12
 8002178:	4668      	mov	r0, sp
 800217a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800217e:	2288      	movs	r2, #136	; 0x88
 8002180:	4619      	mov	r1, r3
 8002182:	f00c fe0f 	bl	800eda4 <memcpy>
 8002186:	f107 0320 	add.w	r3, r7, #32
 800218a:	cb0c      	ldmia	r3, {r2, r3}
 800218c:	4621      	mov	r1, r4
 800218e:	202a      	movs	r0, #42	; 0x2a
 8002190:	f7ff fae4 	bl	800175c <readRegSPI>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <lsm6dso32SPIAccData+0xa4>
		ret_status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]
 800219e:	e002      	b.n	80021a6 <lsm6dso32SPIAccData+0xaa>
	else
		temp_data[2] = (int8_t)rx_buf[1];
 80021a0:	7b7b      	ldrb	r3, [r7, #13]
 80021a2:	b25b      	sxtb	r3, r3
 80021a4:	71bb      	strb	r3, [r7, #6]

	if(HAL_OK != readRegSPI(LSM6DSO32_OUTY_H_ACC, rx_buf, SPI_Handle))
 80021a6:	f107 040c 	add.w	r4, r7, #12
 80021aa:	4668      	mov	r0, sp
 80021ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021b0:	2288      	movs	r2, #136	; 0x88
 80021b2:	4619      	mov	r1, r3
 80021b4:	f00c fdf6 	bl	800eda4 <memcpy>
 80021b8:	f107 0320 	add.w	r3, r7, #32
 80021bc:	cb0c      	ldmia	r3, {r2, r3}
 80021be:	4621      	mov	r1, r4
 80021c0:	202b      	movs	r0, #43	; 0x2b
 80021c2:	f7ff facb 	bl	800175c <readRegSPI>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <lsm6dso32SPIAccData+0xd6>
		ret_status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
 80021d0:	e002      	b.n	80021d8 <lsm6dso32SPIAccData+0xdc>
	else
		temp_data[3] = (int8_t)rx_buf[1];
 80021d2:	7b7b      	ldrb	r3, [r7, #13]
 80021d4:	b25b      	sxtb	r3, r3
 80021d6:	71fb      	strb	r3, [r7, #7]

	if(HAL_OK != readRegSPI(LSM6DSO32_OUTZ_L_ACC, rx_buf, SPI_Handle))
 80021d8:	f107 040c 	add.w	r4, r7, #12
 80021dc:	4668      	mov	r0, sp
 80021de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021e2:	2288      	movs	r2, #136	; 0x88
 80021e4:	4619      	mov	r1, r3
 80021e6:	f00c fddd 	bl	800eda4 <memcpy>
 80021ea:	f107 0320 	add.w	r3, r7, #32
 80021ee:	cb0c      	ldmia	r3, {r2, r3}
 80021f0:	4621      	mov	r1, r4
 80021f2:	202c      	movs	r0, #44	; 0x2c
 80021f4:	f7ff fab2 	bl	800175c <readRegSPI>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <lsm6dso32SPIAccData+0x108>
		ret_status = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	73fb      	strb	r3, [r7, #15]
 8002202:	e002      	b.n	800220a <lsm6dso32SPIAccData+0x10e>
	else
		temp_data[4] = (int8_t)rx_buf[1];
 8002204:	7b7b      	ldrb	r3, [r7, #13]
 8002206:	b25b      	sxtb	r3, r3
 8002208:	723b      	strb	r3, [r7, #8]

	if(HAL_OK != readRegSPI(LSM6DSO32_OUTZ_H_ACC, rx_buf, SPI_Handle))
 800220a:	f107 040c 	add.w	r4, r7, #12
 800220e:	4668      	mov	r0, sp
 8002210:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002214:	2288      	movs	r2, #136	; 0x88
 8002216:	4619      	mov	r1, r3
 8002218:	f00c fdc4 	bl	800eda4 <memcpy>
 800221c:	f107 0320 	add.w	r3, r7, #32
 8002220:	cb0c      	ldmia	r3, {r2, r3}
 8002222:	4621      	mov	r1, r4
 8002224:	202d      	movs	r0, #45	; 0x2d
 8002226:	f7ff fa99 	bl	800175c <readRegSPI>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d002      	beq.n	8002236 <lsm6dso32SPIAccData+0x13a>
		ret_status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
 8002234:	e002      	b.n	800223c <lsm6dso32SPIAccData+0x140>
	else
		temp_data[5] = (int8_t)rx_buf[1];
 8002236:	7b7b      	ldrb	r3, [r7, #13]
 8002238:	b25b      	sxtb	r3, r3
 800223a:	727b      	strb	r3, [r7, #9]

	acc_data[0] = (int16_t)((temp_data[1] << 8) | temp_data[0]);
 800223c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	b21a      	sxth	r2, r3
 8002244:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002248:	b21b      	sxth	r3, r3
 800224a:	4313      	orrs	r3, r2
 800224c:	b21a      	sxth	r2, r3
 800224e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002252:	801a      	strh	r2, [r3, #0]
	acc_data[1] = (int16_t)((temp_data[3] << 8) | temp_data[2]);
 8002254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	b219      	sxth	r1, r3
 800225c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002260:	b21a      	sxth	r2, r3
 8002262:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002266:	3302      	adds	r3, #2
 8002268:	430a      	orrs	r2, r1
 800226a:	b212      	sxth	r2, r2
 800226c:	801a      	strh	r2, [r3, #0]
	acc_data[2] = (int16_t)((temp_data[5] << 8) | temp_data[4]);
 800226e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002272:	021b      	lsls	r3, r3, #8
 8002274:	b219      	sxth	r1, r3
 8002276:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800227a:	b21a      	sxth	r2, r3
 800227c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002280:	3304      	adds	r3, #4
 8002282:	430a      	orrs	r2, r1
 8002284:	b212      	sxth	r2, r2
 8002286:	801a      	strh	r2, [r3, #0]

	return ret_status;
 8002288:	7bfb      	ldrb	r3, [r7, #15]

}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002294:	b004      	add	sp, #16
 8002296:	4770      	bx	lr

08002298 <lsm6dso32SPIGyroData>:
 * @param : int16_t gyro_data[]: Pointer to acquired acceleration data [output]
 * 			SPI_HandleTypeDef: The SPI peripheral on the micro-controller
 * @retval ret_status: Error status
 */
uint8_t lsm6dso32SPIGyroData(SPI_HandleTypeDef SPI_Handle , int16_t gyro_data[])
{
 8002298:	b084      	sub	sp, #16
 800229a:	b590      	push	{r4, r7, lr}
 800229c:	b0a7      	sub	sp, #156	; 0x9c
 800229e:	af22      	add	r7, sp, #136	; 0x88
 80022a0:	f107 0420 	add.w	r4, r7, #32
 80022a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//	uint8_t tx_buf[2];
	uint8_t rx_buf[2];
	int8_t temp_data[8];
	uint8_t ret_status = HAL_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != readRegSPI(LSM6DSO32_OUTX_L_GYRO, rx_buf, SPI_Handle))
 80022ac:	f107 040c 	add.w	r4, r7, #12
 80022b0:	4668      	mov	r0, sp
 80022b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022b6:	2288      	movs	r2, #136	; 0x88
 80022b8:	4619      	mov	r1, r3
 80022ba:	f00c fd73 	bl	800eda4 <memcpy>
 80022be:	f107 0320 	add.w	r3, r7, #32
 80022c2:	cb0c      	ldmia	r3, {r2, r3}
 80022c4:	4621      	mov	r1, r4
 80022c6:	2022      	movs	r0, #34	; 0x22
 80022c8:	f7ff fa48 	bl	800175c <readRegSPI>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <lsm6dso32SPIGyroData+0x40>
		ret_status = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	73fb      	strb	r3, [r7, #15]
 80022d6:	e002      	b.n	80022de <lsm6dso32SPIGyroData+0x46>
	else
		temp_data[0] = (int8_t)rx_buf[1];
 80022d8:	7b7b      	ldrb	r3, [r7, #13]
 80022da:	b25b      	sxtb	r3, r3
 80022dc:	713b      	strb	r3, [r7, #4]

	if(HAL_OK != readRegSPI(LSM6DSO32_OUTX_H_GYRO, rx_buf, SPI_Handle))
 80022de:	f107 040c 	add.w	r4, r7, #12
 80022e2:	4668      	mov	r0, sp
 80022e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022e8:	2288      	movs	r2, #136	; 0x88
 80022ea:	4619      	mov	r1, r3
 80022ec:	f00c fd5a 	bl	800eda4 <memcpy>
 80022f0:	f107 0320 	add.w	r3, r7, #32
 80022f4:	cb0c      	ldmia	r3, {r2, r3}
 80022f6:	4621      	mov	r1, r4
 80022f8:	2023      	movs	r0, #35	; 0x23
 80022fa:	f7ff fa2f 	bl	800175c <readRegSPI>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <lsm6dso32SPIGyroData+0x72>
		ret_status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
 8002308:	e002      	b.n	8002310 <lsm6dso32SPIGyroData+0x78>
	else
		temp_data[1] = (int8_t)rx_buf[1];
 800230a:	7b7b      	ldrb	r3, [r7, #13]
 800230c:	b25b      	sxtb	r3, r3
 800230e:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != readRegSPI(LSM6DSO32_OUTY_L_GYRO, rx_buf, SPI_Handle))
 8002310:	f107 040c 	add.w	r4, r7, #12
 8002314:	4668      	mov	r0, sp
 8002316:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800231a:	2288      	movs	r2, #136	; 0x88
 800231c:	4619      	mov	r1, r3
 800231e:	f00c fd41 	bl	800eda4 <memcpy>
 8002322:	f107 0320 	add.w	r3, r7, #32
 8002326:	cb0c      	ldmia	r3, {r2, r3}
 8002328:	4621      	mov	r1, r4
 800232a:	2024      	movs	r0, #36	; 0x24
 800232c:	f7ff fa16 	bl	800175c <readRegSPI>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <lsm6dso32SPIGyroData+0xa4>
		ret_status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	73fb      	strb	r3, [r7, #15]
 800233a:	e002      	b.n	8002342 <lsm6dso32SPIGyroData+0xaa>
	else
		temp_data[2] = (int8_t)rx_buf[1];
 800233c:	7b7b      	ldrb	r3, [r7, #13]
 800233e:	b25b      	sxtb	r3, r3
 8002340:	71bb      	strb	r3, [r7, #6]

	if(HAL_OK != readRegSPI(LSM6DSO32_OUTY_H_GYRO, rx_buf, SPI_Handle))
 8002342:	f107 040c 	add.w	r4, r7, #12
 8002346:	4668      	mov	r0, sp
 8002348:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800234c:	2288      	movs	r2, #136	; 0x88
 800234e:	4619      	mov	r1, r3
 8002350:	f00c fd28 	bl	800eda4 <memcpy>
 8002354:	f107 0320 	add.w	r3, r7, #32
 8002358:	cb0c      	ldmia	r3, {r2, r3}
 800235a:	4621      	mov	r1, r4
 800235c:	2025      	movs	r0, #37	; 0x25
 800235e:	f7ff f9fd 	bl	800175c <readRegSPI>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <lsm6dso32SPIGyroData+0xd6>
		ret_status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
 800236c:	e002      	b.n	8002374 <lsm6dso32SPIGyroData+0xdc>
	else
		temp_data[3] = (int8_t)rx_buf[1];
 800236e:	7b7b      	ldrb	r3, [r7, #13]
 8002370:	b25b      	sxtb	r3, r3
 8002372:	71fb      	strb	r3, [r7, #7]

	if(HAL_OK != readRegSPI(LSM6DSO32_OUTZ_L_GYRO, rx_buf, SPI_Handle))
 8002374:	f107 040c 	add.w	r4, r7, #12
 8002378:	4668      	mov	r0, sp
 800237a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800237e:	2288      	movs	r2, #136	; 0x88
 8002380:	4619      	mov	r1, r3
 8002382:	f00c fd0f 	bl	800eda4 <memcpy>
 8002386:	f107 0320 	add.w	r3, r7, #32
 800238a:	cb0c      	ldmia	r3, {r2, r3}
 800238c:	4621      	mov	r1, r4
 800238e:	2026      	movs	r0, #38	; 0x26
 8002390:	f7ff f9e4 	bl	800175c <readRegSPI>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <lsm6dso32SPIGyroData+0x108>
		ret_status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
 800239e:	e002      	b.n	80023a6 <lsm6dso32SPIGyroData+0x10e>
	else
		temp_data[4] = (int8_t)rx_buf[1];
 80023a0:	7b7b      	ldrb	r3, [r7, #13]
 80023a2:	b25b      	sxtb	r3, r3
 80023a4:	723b      	strb	r3, [r7, #8]

	if(HAL_OK != readRegSPI(LSM6DSO32_OUTZ_H_GYRO, rx_buf, SPI_Handle))
 80023a6:	f107 040c 	add.w	r4, r7, #12
 80023aa:	4668      	mov	r0, sp
 80023ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023b0:	2288      	movs	r2, #136	; 0x88
 80023b2:	4619      	mov	r1, r3
 80023b4:	f00c fcf6 	bl	800eda4 <memcpy>
 80023b8:	f107 0320 	add.w	r3, r7, #32
 80023bc:	cb0c      	ldmia	r3, {r2, r3}
 80023be:	4621      	mov	r1, r4
 80023c0:	2027      	movs	r0, #39	; 0x27
 80023c2:	f7ff f9cb 	bl	800175c <readRegSPI>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <lsm6dso32SPIGyroData+0x13a>
		ret_status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	e002      	b.n	80023d8 <lsm6dso32SPIGyroData+0x140>
	else
		temp_data[5] = (int8_t)rx_buf[1];
 80023d2:	7b7b      	ldrb	r3, [r7, #13]
 80023d4:	b25b      	sxtb	r3, r3
 80023d6:	727b      	strb	r3, [r7, #9]

	gyro_data[0] = (int16_t)((temp_data[1] << 8) | temp_data[0]);
 80023d8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	b21a      	sxth	r2, r3
 80023e0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80023e4:	b21b      	sxth	r3, r3
 80023e6:	4313      	orrs	r3, r2
 80023e8:	b21a      	sxth	r2, r3
 80023ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023ee:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = (int16_t)((temp_data[3] << 8) | temp_data[2]);
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	021b      	lsls	r3, r3, #8
 80023f6:	b219      	sxth	r1, r3
 80023f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80023fc:	b21a      	sxth	r2, r3
 80023fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002402:	3302      	adds	r3, #2
 8002404:	430a      	orrs	r2, r1
 8002406:	b212      	sxth	r2, r2
 8002408:	801a      	strh	r2, [r3, #0]
	gyro_data[2] = (int16_t)((temp_data[5] << 8) | temp_data[4]);
 800240a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	b219      	sxth	r1, r3
 8002412:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002416:	b21a      	sxth	r2, r3
 8002418:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800241c:	3304      	adds	r3, #4
 800241e:	430a      	orrs	r2, r1
 8002420:	b212      	sxth	r2, r2
 8002422:	801a      	strh	r2, [r3, #0]

	return ret_status;
 8002424:	7bfb      	ldrb	r3, [r7, #15]

}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002430:	b004      	add	sp, #16
 8002432:	4770      	bx	lr

08002434 <lsm6dsoxI2CWhoami>:
 * @brief LSM6DSOX Device Identification
 * @param I2C_HandleTypeDef: The I2C peripheral on the micro-controller
 * @retval ret_status: Error status
 */
uint8_t lsm6dsoxI2CWhoami(I2C_HandleTypeDef I2C_Handle)
{
 8002434:	b084      	sub	sp, #16
 8002436:	b590      	push	{r4, r7, lr}
 8002438:	b097      	sub	sp, #92	; 0x5c
 800243a:	af14      	add	r7, sp, #80	; 0x50
 800243c:	f107 0418 	add.w	r4, r7, #24
 8002440:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t buf = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_status = HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	71fb      	strb	r3, [r7, #7]

	if(HAL_OK != readRegI2C(LSM6DSOX_I2C_ADDR, LSM6DSOX_WHOAMI , &buf, I2C_MEMADD_SIZE_8BIT, I2C_Handle))
 800244c:	1dbc      	adds	r4, r7, #6
 800244e:	466b      	mov	r3, sp
 8002450:	f107 0118 	add.w	r1, r7, #24
 8002454:	224c      	movs	r2, #76	; 0x4c
 8002456:	4618      	mov	r0, r3
 8002458:	f00c fca4 	bl	800eda4 <memcpy>
 800245c:	2301      	movs	r3, #1
 800245e:	4622      	mov	r2, r4
 8002460:	210f      	movs	r1, #15
 8002462:	20d4      	movs	r0, #212	; 0xd4
 8002464:	f7ff f953 	bl	800170e <readRegI2C>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <lsm6dsoxI2CWhoami+0x40>
		ret_status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	71fb      	strb	r3, [r7, #7]
 8002472:	e007      	b.n	8002484 <lsm6dsoxI2CWhoami+0x50>
	else if(buf == LSM6DSOX_DEV_ID)
 8002474:	79bb      	ldrb	r3, [r7, #6]
 8002476:	2b6c      	cmp	r3, #108	; 0x6c
 8002478:	d102      	bne.n	8002480 <lsm6dsoxI2CWhoami+0x4c>
		ret_status = HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	71fb      	strb	r3, [r7, #7]
 800247e:	e001      	b.n	8002484 <lsm6dsoxI2CWhoami+0x50>
	else
		ret_status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	71fb      	strb	r3, [r7, #7]

	return ret_status;
 8002484:	79fb      	ldrb	r3, [r7, #7]
}
 8002486:	4618      	mov	r0, r3
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002490:	b004      	add	sp, #16
 8002492:	4770      	bx	lr

08002494 <lsm6dsoxI2CSetup>:
 * @brief LSM6DSOX Sensor Initialization
 * @param I2C_HandleTypeDef: The I2C peripheral on the micro-controller
 * @retval ret_status: Error status
 */
uint8_t lsm6dsoxI2CSetup(I2C_HandleTypeDef I2C_Handle)
{
 8002494:	b084      	sub	sp, #16
 8002496:	b5b0      	push	{r4, r5, r7, lr}
 8002498:	b096      	sub	sp, #88	; 0x58
 800249a:	af14      	add	r7, sp, #80	; 0x50
 800249c:	f107 0418 	add.w	r4, r7, #24
 80024a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//	uint8_t buf;
	uint8_t val = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_status;

	//Enable interrupt for accelerometer data ready on INT1 pin
	val = DSOX_INT1_DRDY_XL;
 80024a8:	2301      	movs	r3, #1
 80024aa:	71bb      	strb	r3, [r7, #6]
	if(HAL_OK != writeRegI2C(LSM6DSOX_I2C_ADDR, LSM6DSOX_INT1_CTRL,
 80024ac:	1dbc      	adds	r4, r7, #6
 80024ae:	466b      	mov	r3, sp
 80024b0:	f107 0118 	add.w	r1, r7, #24
 80024b4:	224c      	movs	r2, #76	; 0x4c
 80024b6:	4618      	mov	r0, r3
 80024b8:	f00c fc74 	bl	800eda4 <memcpy>
 80024bc:	2301      	movs	r3, #1
 80024be:	4622      	mov	r2, r4
 80024c0:	210d      	movs	r1, #13
 80024c2:	20d4      	movs	r0, #212	; 0xd4
 80024c4:	f7ff f8c4 	bl	8001650 <writeRegI2C>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <lsm6dsoxI2CSetup+0x3e>
			&val, I2C_MEMADD_SIZE_8BIT, I2C_Handle))
		ret_status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	71fb      	strb	r3, [r7, #7]

	//Enable interrupt for gyroscope data ready on INT2 pin
	val = DSOX_I3C_DISABLE;
 80024d2:	2302      	movs	r3, #2
 80024d4:	71bb      	strb	r3, [r7, #6]
	if(HAL_OK != writeRegI2C(LSM6DSOX_I2C_ADDR, LSM6DSOX_CTRL9_C,
 80024d6:	1dbc      	adds	r4, r7, #6
 80024d8:	466b      	mov	r3, sp
 80024da:	f107 0118 	add.w	r1, r7, #24
 80024de:	224c      	movs	r2, #76	; 0x4c
 80024e0:	4618      	mov	r0, r3
 80024e2:	f00c fc5f 	bl	800eda4 <memcpy>
 80024e6:	2301      	movs	r3, #1
 80024e8:	4622      	mov	r2, r4
 80024ea:	2118      	movs	r1, #24
 80024ec:	20d4      	movs	r0, #212	; 0xd4
 80024ee:	f7ff f8af 	bl	8001650 <writeRegI2C>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <lsm6dsoxI2CSetup+0x68>
			&val, I2C_MEMADD_SIZE_8BIT, I2C_Handle))
		ret_status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	71fb      	strb	r3, [r7, #7]

	//Disable I3C interface [IMPORTANT]
	val = DSOX_INT2_DRDY_GYRO;
 80024fc:	2302      	movs	r3, #2
 80024fe:	71bb      	strb	r3, [r7, #6]
	if(HAL_OK != writeRegI2C(LSM6DSOX_I2C_ADDR, LSM6DSOX_INT2_CTRL,
 8002500:	1dbc      	adds	r4, r7, #6
 8002502:	466b      	mov	r3, sp
 8002504:	f107 0118 	add.w	r1, r7, #24
 8002508:	224c      	movs	r2, #76	; 0x4c
 800250a:	4618      	mov	r0, r3
 800250c:	f00c fc4a 	bl	800eda4 <memcpy>
 8002510:	2301      	movs	r3, #1
 8002512:	4622      	mov	r2, r4
 8002514:	210e      	movs	r1, #14
 8002516:	20d4      	movs	r0, #212	; 0xd4
 8002518:	f7ff f89a 	bl	8001650 <writeRegI2C>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <lsm6dsoxI2CSetup+0x92>
			&val, I2C_MEMADD_SIZE_8BIT, I2C_Handle))
		ret_status = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	71fb      	strb	r3, [r7, #7]

	//Accelerometer ODR: 208 Hz
	//              Full scale selection: 4g
	//				High-resolution selection: Output from first stage dig filtering selected
	val = (dsox_odr_xl_208Hz | dsox_fs_xl_4g);
 8002526:	2350      	movs	r3, #80	; 0x50
 8002528:	71bb      	strb	r3, [r7, #6]
	if(HAL_OK != writeRegI2C(LSM6DSOX_I2C_ADDR, LSM6DSOX_CTRL1_XL,
 800252a:	1dbc      	adds	r4, r7, #6
 800252c:	466b      	mov	r3, sp
 800252e:	f107 0118 	add.w	r1, r7, #24
 8002532:	224c      	movs	r2, #76	; 0x4c
 8002534:	4618      	mov	r0, r3
 8002536:	f00c fc35 	bl	800eda4 <memcpy>
 800253a:	2301      	movs	r3, #1
 800253c:	4622      	mov	r2, r4
 800253e:	2110      	movs	r1, #16
 8002540:	20d4      	movs	r0, #212	; 0xd4
 8002542:	f7ff f885 	bl	8001650 <writeRegI2C>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <lsm6dsoxI2CSetup+0xbc>
			&val, I2C_MEMADD_SIZE_8BIT, I2C_Handle))
		ret_status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	71fb      	strb	r3, [r7, #7]

	//Gyroscope ODR: 208 Hz
	//              Full scale selection: 250 dps
	val = (dsox_odr_g_208Hz | dsox_fs_g_250);
 8002550:	2350      	movs	r3, #80	; 0x50
 8002552:	71bb      	strb	r3, [r7, #6]
	if(HAL_OK != writeRegI2C(LSM6DSOX_I2C_ADDR, LSM6DSOX_CTRL2_G,
 8002554:	1dbc      	adds	r4, r7, #6
 8002556:	466b      	mov	r3, sp
 8002558:	f107 0118 	add.w	r1, r7, #24
 800255c:	224c      	movs	r2, #76	; 0x4c
 800255e:	4618      	mov	r0, r3
 8002560:	f00c fc20 	bl	800eda4 <memcpy>
 8002564:	2301      	movs	r3, #1
 8002566:	4622      	mov	r2, r4
 8002568:	2111      	movs	r1, #17
 800256a:	20d4      	movs	r0, #212	; 0xd4
 800256c:	f7ff f870 	bl	8001650 <writeRegI2C>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <lsm6dsoxI2CSetup+0xe6>
			&val, I2C_MEMADD_SIZE_8BIT, I2C_Handle))
		ret_status = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	71fb      	strb	r3, [r7, #7]

	//To clear the data ready interrupt, the data registers have to be read
#if(LSM6DSOX_DRDY_EN == 1)
	{
		int16_t dummy_data[3];
		lsm6dsoxI2CAccData(I2C_Handle ,dummy_data);
 800257a:	463b      	mov	r3, r7
 800257c:	930f      	str	r3, [sp, #60]	; 0x3c
 800257e:	466d      	mov	r5, sp
 8002580:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002586:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002588:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800258a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800258c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800258e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002590:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002594:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002598:	f107 0318 	add.w	r3, r7, #24
 800259c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800259e:	f000 f81c 	bl	80025da <lsm6dsoxI2CAccData>
		lsm6dsoxI2CGyroData(I2C_Handle ,dummy_data);
 80025a2:	463b      	mov	r3, r7
 80025a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80025a6:	466d      	mov	r5, sp
 80025a8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80025ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025b8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80025bc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80025c0:	f107 0318 	add.w	r3, r7, #24
 80025c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025c6:	f000 f84a 	bl	800265e <lsm6dsoxI2CGyroData>

	}
#endif

	return ret_status;
 80025ca:	79fb      	ldrb	r3, [r7, #7]

}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80025d6:	b004      	add	sp, #16
 80025d8:	4770      	bx	lr

080025da <lsm6dsoxI2CAccData>:
 * @param I2C_HandleTypeDef: The I2C peripheral on the micro-controller
 * 		  Pointer to acceleration data (3 axes) (output)
 * @retval ret_status: Error status
 */
uint8_t lsm6dsoxI2CAccData(I2C_HandleTypeDef I2C_Handle , int16_t acc_data[])
{
 80025da:	b084      	sub	sp, #16
 80025dc:	b590      	push	{r4, r7, lr}
 80025de:	b097      	sub	sp, #92	; 0x5c
 80025e0:	af14      	add	r7, sp, #80	; 0x50
 80025e2:	f107 0418 	add.w	r4, r7, #24
 80025e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//	uint8_t buf = 0;
	uint8_t ret_status = HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	71fb      	strb	r3, [r7, #7]
	//		if(HAL_OK != HAL_I2C_Mem_Read(&I2C_Handle, LSM6DSOX_I2C_ADDR, LSM6DSOX_STATUS, 1, &buf, 1, 100))
	//			ret_status = HAL_ERROR;
	//	}

	//Read 6 bytes of data (2 bytes for each X, Y and Z axes)
	if(HAL_OK != readRegI2C(LSM6DSOX_I2C_ADDR, LSM6DSOX_OUTX_L_ACC,
 80025ee:	463c      	mov	r4, r7
 80025f0:	466b      	mov	r3, sp
 80025f2:	f107 0118 	add.w	r1, r7, #24
 80025f6:	224c      	movs	r2, #76	; 0x4c
 80025f8:	4618      	mov	r0, r3
 80025fa:	f00c fbd3 	bl	800eda4 <memcpy>
 80025fe:	2306      	movs	r3, #6
 8002600:	4622      	mov	r2, r4
 8002602:	2128      	movs	r1, #40	; 0x28
 8002604:	20d4      	movs	r0, #212	; 0xd4
 8002606:	f7ff f882 	bl	800170e <readRegI2C>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <lsm6dsoxI2CAccData+0x3a>
			&raw_data[0], sizeof(raw_data), I2C_Handle))
		ret_status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	71fb      	strb	r3, [r7, #7]

	//Concatenate data
	acc_data[0] = (int16_t)(((int16_t)raw_data[1] << 8) | (int16_t)raw_data[0]);
 8002614:	787b      	ldrb	r3, [r7, #1]
 8002616:	021b      	lsls	r3, r3, #8
 8002618:	b21a      	sxth	r2, r3
 800261a:	783b      	ldrb	r3, [r7, #0]
 800261c:	b21b      	sxth	r3, r3
 800261e:	4313      	orrs	r3, r2
 8002620:	b21a      	sxth	r2, r3
 8002622:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002624:	801a      	strh	r2, [r3, #0]
	acc_data[1] = (int16_t)(((int16_t)raw_data[3] << 8) | (int16_t)raw_data[2]);
 8002626:	78fb      	ldrb	r3, [r7, #3]
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	b219      	sxth	r1, r3
 800262c:	78bb      	ldrb	r3, [r7, #2]
 800262e:	b21a      	sxth	r2, r3
 8002630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002632:	3302      	adds	r3, #2
 8002634:	430a      	orrs	r2, r1
 8002636:	b212      	sxth	r2, r2
 8002638:	801a      	strh	r2, [r3, #0]
	acc_data[2] = (int16_t)(((int16_t)raw_data[5] << 8) | (int16_t)raw_data[4]);
 800263a:	797b      	ldrb	r3, [r7, #5]
 800263c:	021b      	lsls	r3, r3, #8
 800263e:	b219      	sxth	r1, r3
 8002640:	793b      	ldrb	r3, [r7, #4]
 8002642:	b21a      	sxth	r2, r3
 8002644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002646:	3304      	adds	r3, #4
 8002648:	430a      	orrs	r2, r1
 800264a:	b212      	sxth	r2, r2
 800264c:	801a      	strh	r2, [r3, #0]


	return ret_status;
 800264e:	79fb      	ldrb	r3, [r7, #7]
}
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800265a:	b004      	add	sp, #16
 800265c:	4770      	bx	lr

0800265e <lsm6dsoxI2CGyroData>:
 * @param I2C_HandleTypeDef: The I2C peripheral on the micro-controller
 * 		  Pointer to gyroscope data (3 axes) (output)
 * @retval ret_status: Error status
 */
uint8_t lsm6dsoxI2CGyroData(I2C_HandleTypeDef I2C_Handle , int16_t gyro_data[])
{
 800265e:	b084      	sub	sp, #16
 8002660:	b590      	push	{r4, r7, lr}
 8002662:	b097      	sub	sp, #92	; 0x5c
 8002664:	af14      	add	r7, sp, #80	; 0x50
 8002666:	f107 0418 	add.w	r4, r7, #24
 800266a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//	uint8_t buf = 0;
	uint8_t ret_status = HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	71fb      	strb	r3, [r7, #7]
	//		if(HAL_OK != HAL_I2C_Mem_Read(&I2C_Handle, LSM6DSOX_I2C_ADDR, LSM6DSOX_STATUS, 1, &buf, 1, 100))
	//			ret_status = HAL_ERROR;
	//	}

	//Read 6 bytes of data(2 bytes for each X, Y and Z axes)
	if(HAL_OK != readRegI2C(LSM6DSOX_I2C_ADDR, LSM6DSOX_OUTX_L_GYRO,
 8002672:	463c      	mov	r4, r7
 8002674:	466b      	mov	r3, sp
 8002676:	f107 0118 	add.w	r1, r7, #24
 800267a:	224c      	movs	r2, #76	; 0x4c
 800267c:	4618      	mov	r0, r3
 800267e:	f00c fb91 	bl	800eda4 <memcpy>
 8002682:	2306      	movs	r3, #6
 8002684:	4622      	mov	r2, r4
 8002686:	2122      	movs	r1, #34	; 0x22
 8002688:	20d4      	movs	r0, #212	; 0xd4
 800268a:	f7ff f840 	bl	800170e <readRegI2C>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <lsm6dsoxI2CGyroData+0x3a>
			&raw_data[0], sizeof(raw_data), I2C_Handle))
		ret_status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	71fb      	strb	r3, [r7, #7]

	//Concatenate data
	gyro_data[0] = (int16_t)(((int16_t)raw_data[1] << 8) | (int16_t)raw_data[0]);
 8002698:	787b      	ldrb	r3, [r7, #1]
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	b21a      	sxth	r2, r3
 800269e:	783b      	ldrb	r3, [r7, #0]
 80026a0:	b21b      	sxth	r3, r3
 80026a2:	4313      	orrs	r3, r2
 80026a4:	b21a      	sxth	r2, r3
 80026a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026a8:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = (int16_t)((int16_t)(raw_data[3] << 8) | (int16_t)raw_data[2]);
 80026aa:	78fb      	ldrb	r3, [r7, #3]
 80026ac:	021b      	lsls	r3, r3, #8
 80026ae:	b219      	sxth	r1, r3
 80026b0:	78bb      	ldrb	r3, [r7, #2]
 80026b2:	b21a      	sxth	r2, r3
 80026b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026b6:	3302      	adds	r3, #2
 80026b8:	430a      	orrs	r2, r1
 80026ba:	b212      	sxth	r2, r2
 80026bc:	801a      	strh	r2, [r3, #0]
	gyro_data[2] = (int16_t)(((int16_t)raw_data[5] << 8) | (int16_t)raw_data[4]);
 80026be:	797b      	ldrb	r3, [r7, #5]
 80026c0:	021b      	lsls	r3, r3, #8
 80026c2:	b219      	sxth	r1, r3
 80026c4:	793b      	ldrb	r3, [r7, #4]
 80026c6:	b21a      	sxth	r2, r3
 80026c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026ca:	3304      	adds	r3, #4
 80026cc:	430a      	orrs	r2, r1
 80026ce:	b212      	sxth	r2, r2
 80026d0:	801a      	strh	r2, [r3, #0]

	return ret_status;
 80026d2:	79fb      	ldrb	r3, [r7, #7]

}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80026de:	b004      	add	sp, #16
 80026e0:	4770      	bx	lr
	...

080026e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e6:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
 80026ea:	f44f 6784 	mov.w	r7, #1056	; 0x420
 80026ee:	446f      	add	r7, sp
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026f0:	f002 ff20 	bl	8005534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026f4:	f000 f8d0 	bl	8002898 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80026f8:	f000 f934 	bl	8002964 <SystemPower_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026fc:	f000 fd08 	bl	8003110 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002700:	f000 fcba 	bl	8003078 <MX_USART1_UART_Init>
  MX_ICACHE_Init();
 8002704:	f000 fab4 	bl	8002c70 <MX_ICACHE_Init>
  MX_I2C1_Init();
 8002708:	f000 f9b2 	bl	8002a70 <MX_I2C1_Init>
  MX_SPI1_Init();
 800270c:	f000 fb5e 	bl	8002dcc <MX_SPI1_Init>
  MX_RTC_Init();
 8002710:	f000 fac2 	bl	8002c98 <MX_RTC_Init>
  MX_ADC4_Init();
 8002714:	f000 f936 	bl	8002984 <MX_ADC4_Init>
  MX_I2C2_Init();
 8002718:	f000 f9ea 	bl	8002af0 <MX_I2C2_Init>
  MX_I2C3_Init();
 800271c:	f000 fa28 	bl	8002b70 <MX_I2C3_Init>
  MX_I2C4_Init();
 8002720:	f000 fa66 	bl	8002bf0 <MX_I2C4_Init>
  MX_SPI2_Init();
 8002724:	f000 fbc4 	bl	8002eb0 <MX_SPI2_Init>
  MX_SPI3_Init();
 8002728:	f000 fc34 	bl	8002f94 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

	//Initializes all the test sensors
	if(HAL_OK != sensorsInit(hi2c1, hi2c2, hi2c3, hi2c4,
 800272c:	4e50      	ldr	r6, [pc, #320]	; (8002870 <main+0x18c>)
 800272e:	4a51      	ldr	r2, [pc, #324]	; (8002874 <main+0x190>)
 8002730:	abb4      	add	r3, sp, #720	; 0x2d0
 8002732:	4611      	mov	r1, r2
 8002734:	228c      	movs	r2, #140	; 0x8c
 8002736:	4618      	mov	r0, r3
 8002738:	f00c fb34 	bl	800eda4 <memcpy>
 800273c:	4a4e      	ldr	r2, [pc, #312]	; (8002878 <main+0x194>)
 800273e:	ab90      	add	r3, sp, #576	; 0x240
 8002740:	4611      	mov	r1, r2
 8002742:	2290      	movs	r2, #144	; 0x90
 8002744:	4618      	mov	r0, r3
 8002746:	f00c fb2d 	bl	800eda4 <memcpy>
 800274a:	4a4c      	ldr	r2, [pc, #304]	; (800287c <main+0x198>)
 800274c:	ab6c      	add	r3, sp, #432	; 0x1b0
 800274e:	4611      	mov	r1, r2
 8002750:	2290      	movs	r2, #144	; 0x90
 8002752:	4618      	mov	r0, r3
 8002754:	f00c fb26 	bl	800eda4 <memcpy>
 8002758:	4a49      	ldr	r2, [pc, #292]	; (8002880 <main+0x19c>)
 800275a:	ab48      	add	r3, sp, #288	; 0x120
 800275c:	4611      	mov	r1, r2
 800275e:	2290      	movs	r2, #144	; 0x90
 8002760:	4618      	mov	r0, r3
 8002762:	f00c fb1f 	bl	800eda4 <memcpy>
 8002766:	4a47      	ldr	r2, [pc, #284]	; (8002884 <main+0x1a0>)
 8002768:	ab35      	add	r3, sp, #212	; 0xd4
 800276a:	4611      	mov	r1, r2
 800276c:	224c      	movs	r2, #76	; 0x4c
 800276e:	4618      	mov	r0, r3
 8002770:	f00c fb18 	bl	800eda4 <memcpy>
 8002774:	4a44      	ldr	r2, [pc, #272]	; (8002888 <main+0x1a4>)
 8002776:	ab22      	add	r3, sp, #136	; 0x88
 8002778:	4611      	mov	r1, r2
 800277a:	224c      	movs	r2, #76	; 0x4c
 800277c:	4618      	mov	r0, r3
 800277e:	f00c fb11 	bl	800eda4 <memcpy>
 8002782:	4a42      	ldr	r2, [pc, #264]	; (800288c <main+0x1a8>)
 8002784:	ab0f      	add	r3, sp, #60	; 0x3c
 8002786:	4611      	mov	r1, r2
 8002788:	224c      	movs	r2, #76	; 0x4c
 800278a:	4618      	mov	r0, r3
 800278c:	f00c fb0a 	bl	800eda4 <memcpy>
 8002790:	466d      	mov	r5, sp
 8002792:	f106 0410 	add.w	r4, r6, #16
 8002796:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002798:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800279a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800279c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800279e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027a2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80027a6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80027aa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80027ae:	f002 fd29 	bl	8005204 <sensorsInit>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <main+0xd8>
			hspi1, hspi2 , hspi3 , hadc4))
		return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e055      	b.n	8002868 <main+0x184>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//Main sensor framework
		sensor_framework(hi2c1, hi2c2, hi2c3, hi2c4,
 80027bc:	4e2c      	ldr	r6, [pc, #176]	; (8002870 <main+0x18c>)
 80027be:	4b34      	ldr	r3, [pc, #208]	; (8002890 <main+0x1ac>)
 80027c0:	acfb      	add	r4, sp, #1004	; 0x3ec
 80027c2:	461d      	mov	r5, r3
 80027c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80027d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80027d4:	4a2f      	ldr	r2, [pc, #188]	; (8002894 <main+0x1b0>)
 80027d6:	abd7      	add	r3, sp, #860	; 0x35c
 80027d8:	4611      	mov	r1, r2
 80027da:	2290      	movs	r2, #144	; 0x90
 80027dc:	4618      	mov	r0, r3
 80027de:	f00c fae1 	bl	800eda4 <memcpy>
 80027e2:	4a24      	ldr	r2, [pc, #144]	; (8002874 <main+0x190>)
 80027e4:	abb4      	add	r3, sp, #720	; 0x2d0
 80027e6:	4611      	mov	r1, r2
 80027e8:	228c      	movs	r2, #140	; 0x8c
 80027ea:	4618      	mov	r0, r3
 80027ec:	f00c fada 	bl	800eda4 <memcpy>
 80027f0:	4a21      	ldr	r2, [pc, #132]	; (8002878 <main+0x194>)
 80027f2:	ab90      	add	r3, sp, #576	; 0x240
 80027f4:	4611      	mov	r1, r2
 80027f6:	2290      	movs	r2, #144	; 0x90
 80027f8:	4618      	mov	r0, r3
 80027fa:	f00c fad3 	bl	800eda4 <memcpy>
 80027fe:	4a1f      	ldr	r2, [pc, #124]	; (800287c <main+0x198>)
 8002800:	ab6c      	add	r3, sp, #432	; 0x1b0
 8002802:	4611      	mov	r1, r2
 8002804:	2290      	movs	r2, #144	; 0x90
 8002806:	4618      	mov	r0, r3
 8002808:	f00c facc 	bl	800eda4 <memcpy>
 800280c:	4a1c      	ldr	r2, [pc, #112]	; (8002880 <main+0x19c>)
 800280e:	ab48      	add	r3, sp, #288	; 0x120
 8002810:	4611      	mov	r1, r2
 8002812:	2290      	movs	r2, #144	; 0x90
 8002814:	4618      	mov	r0, r3
 8002816:	f00c fac5 	bl	800eda4 <memcpy>
 800281a:	4a1a      	ldr	r2, [pc, #104]	; (8002884 <main+0x1a0>)
 800281c:	ab35      	add	r3, sp, #212	; 0xd4
 800281e:	4611      	mov	r1, r2
 8002820:	224c      	movs	r2, #76	; 0x4c
 8002822:	4618      	mov	r0, r3
 8002824:	f00c fabe 	bl	800eda4 <memcpy>
 8002828:	4a17      	ldr	r2, [pc, #92]	; (8002888 <main+0x1a4>)
 800282a:	ab22      	add	r3, sp, #136	; 0x88
 800282c:	4611      	mov	r1, r2
 800282e:	224c      	movs	r2, #76	; 0x4c
 8002830:	4618      	mov	r0, r3
 8002832:	f00c fab7 	bl	800eda4 <memcpy>
 8002836:	4a15      	ldr	r2, [pc, #84]	; (800288c <main+0x1a8>)
 8002838:	ab0f      	add	r3, sp, #60	; 0x3c
 800283a:	4611      	mov	r1, r2
 800283c:	224c      	movs	r2, #76	; 0x4c
 800283e:	4618      	mov	r0, r3
 8002840:	f00c fab0 	bl	800eda4 <memcpy>
 8002844:	466d      	mov	r5, sp
 8002846:	f106 0410 	add.w	r4, r6, #16
 800284a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800284c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800284e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002850:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002854:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002856:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800285a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800285e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002862:	f000 fe57 	bl	8003514 <sensor_framework>
 8002866:	e7a9      	b.n	80027bc <main+0xd8>
				hspi1, hspi2 , hspi3 , hadc4 , huart1 , hrtc);
	}
  /* USER CODE END 3 */
}
 8002868:	4618      	mov	r0, r3
 800286a:	3704      	adds	r7, #4
 800286c:	46bd      	mov	sp, r7
 800286e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002870:	200002a8 	.word	0x200002a8
 8002874:	2000021c 	.word	0x2000021c
 8002878:	20000528 	.word	0x20000528
 800287c:	20000498 	.word	0x20000498
 8002880:	20000408 	.word	0x20000408
 8002884:	2000038c 	.word	0x2000038c
 8002888:	20000340 	.word	0x20000340
 800288c:	200002f4 	.word	0x200002f4
 8002890:	200003d8 	.word	0x200003d8
 8002894:	200005b8 	.word	0x200005b8

08002898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b09e      	sub	sp, #120	; 0x78
 800289c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800289e:	f107 0318 	add.w	r3, r7, #24
 80028a2:	2260      	movs	r2, #96	; 0x60
 80028a4:	2100      	movs	r1, #0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f00c fa89 	bl	800edbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028ac:	463b      	mov	r3, r7
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	609a      	str	r2, [r3, #8]
 80028b6:	60da      	str	r2, [r3, #12]
 80028b8:	611a      	str	r2, [r3, #16]
 80028ba:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80028bc:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80028c0:	f006 fa3e 	bl	8008d40 <HAL_PWREx_ControlVoltageScaling>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <SystemClock_Config+0x36>
  {
    Error_Handler();
 80028ca:	f000 fd95 	bl	80033f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80028ce:	231a      	movs	r3, #26
 80028d0:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028d8:	2310      	movs	r3, #16
 80028da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80028dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80028e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80028e2:	2301      	movs	r3, #1
 80028e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80028e6:	2310      	movs	r3, #16
 80028e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80028ee:	2300      	movs	r3, #0
 80028f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028f2:	2302      	movs	r3, #2
 80028f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80028f6:	2301      	movs	r3, #1
 80028f8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 80028fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8002900:	2303      	movs	r3, #3
 8002902:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002904:	230a      	movs	r3, #10
 8002906:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002908:	2302      	movs	r3, #2
 800290a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800290c:	2302      	movs	r3, #2
 800290e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8002910:	2301      	movs	r3, #1
 8002912:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8002914:	230c      	movs	r3, #12
 8002916:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800291c:	f107 0318 	add.w	r3, r7, #24
 8002920:	4618      	mov	r0, r3
 8002922:	f006 fb0f 	bl	8008f44 <HAL_RCC_OscConfig>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800292c:	f000 fd64 	bl	80033f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002930:	231f      	movs	r3, #31
 8002932:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002934:	2303      	movs	r3, #3
 8002936:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002938:	2300      	movs	r3, #0
 800293a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002940:	2300      	movs	r3, #0
 8002942:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002948:	463b      	mov	r3, r7
 800294a:	2104      	movs	r1, #4
 800294c:	4618      	mov	r0, r3
 800294e:	f007 f9cf 	bl	8009cf0 <HAL_RCC_ClockConfig>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002958:	f000 fd4e 	bl	80033f8 <Error_Handler>
  }
}
 800295c:	bf00      	nop
 800295e:	3778      	adds	r7, #120	; 0x78
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8002968:	f006 fabc 	bl	8008ee4 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800296c:	f006 fada 	bl	8008f24 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8002970:	2002      	movs	r0, #2
 8002972:	f006 fa67 	bl	8008e44 <HAL_PWREx_ConfigSupply>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <SystemPower_Config+0x1c>
  {
    Error_Handler();
 800297c:	f000 fd3c 	bl	80033f8 <Error_Handler>
  }
}
 8002980:	bf00      	nop
 8002982:	bd80      	pop	{r7, pc}

08002984 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800298a:	463b      	mov	r3, r7
 800298c:	2220      	movs	r2, #32
 800298e:	2100      	movs	r1, #0
 8002990:	4618      	mov	r0, r3
 8002992:	f00c fa14 	bl	800edbe <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8002996:	4b33      	ldr	r3, [pc, #204]	; (8002a64 <MX_ADC4_Init+0xe0>)
 8002998:	4a33      	ldr	r2, [pc, #204]	; (8002a68 <MX_ADC4_Init+0xe4>)
 800299a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800299c:	4b31      	ldr	r3, [pc, #196]	; (8002a64 <MX_ADC4_Init+0xe0>)
 800299e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80029a2:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80029a4:	4b2f      	ldr	r3, [pc, #188]	; (8002a64 <MX_ADC4_Init+0xe0>)
 80029a6:	2204      	movs	r2, #4
 80029a8:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029aa:	4b2e      	ldr	r3, [pc, #184]	; (8002a64 <MX_ADC4_Init+0xe0>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_DISABLE;
 80029b0:	4b2c      	ldr	r3, [pc, #176]	; (8002a64 <MX_ADC4_Init+0xe0>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029b6:	4b2b      	ldr	r3, [pc, #172]	; (8002a64 <MX_ADC4_Init+0xe0>)
 80029b8:	2204      	movs	r2, #4
 80029ba:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 80029bc:	4b29      	ldr	r3, [pc, #164]	; (8002a64 <MX_ADC4_Init+0xe0>)
 80029be:	2200      	movs	r2, #0
 80029c0:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80029c2:	4b28      	ldr	r3, [pc, #160]	; (8002a64 <MX_ADC4_Init+0xe0>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80029c8:	4b26      	ldr	r3, [pc, #152]	; (8002a64 <MX_ADC4_Init+0xe0>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.NbrOfConversion = 1;
 80029d0:	4b24      	ldr	r3, [pc, #144]	; (8002a64 <MX_ADC4_Init+0xe0>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029d6:	4b23      	ldr	r3, [pc, #140]	; (8002a64 <MX_ADC4_Init+0xe0>)
 80029d8:	2200      	movs	r2, #0
 80029da:	635a      	str	r2, [r3, #52]	; 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029dc:	4b21      	ldr	r3, [pc, #132]	; (8002a64 <MX_ADC4_Init+0xe0>)
 80029de:	2200      	movs	r2, #0
 80029e0:	639a      	str	r2, [r3, #56]	; 0x38
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80029e2:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <MX_ADC4_Init+0xe0>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 80029ea:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <MX_ADC4_Init+0xe0>)
 80029ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80029f0:	669a      	str	r2, [r3, #104]	; 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80029f2:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <MX_ADC4_Init+0xe0>)
 80029f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029f8:	645a      	str	r2, [r3, #68]	; 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 80029fa:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <MX_ADC4_Init+0xe0>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	649a      	str	r2, [r3, #72]	; 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8002a00:	4b18      	ldr	r3, [pc, #96]	; (8002a64 <MX_ADC4_Init+0xe0>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8002a06:	4b17      	ldr	r3, [pc, #92]	; (8002a64 <MX_ADC4_Init+0xe0>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8002a0e:	4815      	ldr	r0, [pc, #84]	; (8002a64 <MX_ADC4_Init+0xe0>)
 8002a10:	f003 f92a 	bl	8005c68 <HAL_ADC_Init>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <MX_ADC4_Init+0x9a>
  {
    Error_Handler();
 8002a1a:	f000 fced 	bl	80033f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC4_CHANNEL_TEMPSENSOR;
 8002a1e:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <MX_ADC4_Init+0xe8>)
 8002a20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8002a22:	2300      	movs	r3, #0
 8002a24:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8002a32:	463b      	mov	r3, r7
 8002a34:	4619      	mov	r1, r3
 8002a36:	480b      	ldr	r0, [pc, #44]	; (8002a64 <MX_ADC4_Init+0xe0>)
 8002a38:	f003 fec8 	bl	80067cc <HAL_ADC_ConfigChannel>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_ADC4_Init+0xc2>
  {
    Error_Handler();
 8002a42:	f000 fcd9 	bl	80033f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

	//Calibration a must for accurate values
	if(HAL_OK != HAL_ADCEx_Calibration_Start(&hadc4, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED))
 8002a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	4805      	ldr	r0, [pc, #20]	; (8002a64 <MX_ADC4_Init+0xe0>)
 8002a4e:	f004 fd35 	bl	80074bc <HAL_ADCEx_Calibration_Start>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <MX_ADC4_Init+0xd8>
		Error_Handler();
 8002a58:	f000 fcce 	bl	80033f8 <Error_Handler>
  /* USER CODE END ADC4_Init 2 */

}
 8002a5c:	bf00      	nop
 8002a5e:	3720      	adds	r7, #32
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	2000021c 	.word	0x2000021c
 8002a68:	46021000 	.word	0x46021000
 8002a6c:	b6002000 	.word	0xb6002000

08002a70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a74:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <MX_I2C1_Init+0x74>)
 8002a76:	4a1c      	ldr	r2, [pc, #112]	; (8002ae8 <MX_I2C1_Init+0x78>)
 8002a78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30B09DEB;
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <MX_I2C1_Init+0x74>)
 8002a7c:	4a1b      	ldr	r2, [pc, #108]	; (8002aec <MX_I2C1_Init+0x7c>)
 8002a7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002a80:	4b18      	ldr	r3, [pc, #96]	; (8002ae4 <MX_I2C1_Init+0x74>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a86:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <MX_I2C1_Init+0x74>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a8c:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <MX_I2C1_Init+0x74>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a92:	4b14      	ldr	r3, [pc, #80]	; (8002ae4 <MX_I2C1_Init+0x74>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a98:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <MX_I2C1_Init+0x74>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a9e:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <MX_I2C1_Init+0x74>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8002aa4:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <MX_I2C1_Init+0x74>)
 8002aa6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002aaa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002aac:	480d      	ldr	r0, [pc, #52]	; (8002ae4 <MX_I2C1_Init+0x74>)
 8002aae:	f005 f8b7 	bl	8007c20 <HAL_I2C_Init>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002ab8:	f000 fc9e 	bl	80033f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002abc:	2100      	movs	r1, #0
 8002abe:	4809      	ldr	r0, [pc, #36]	; (8002ae4 <MX_I2C1_Init+0x74>)
 8002ac0:	f006 f876 	bl	8008bb0 <HAL_I2CEx_ConfigAnalogFilter>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002aca:	f000 fc95 	bl	80033f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4804      	ldr	r0, [pc, #16]	; (8002ae4 <MX_I2C1_Init+0x74>)
 8002ad2:	f006 f8b8 	bl	8008c46 <HAL_I2CEx_ConfigDigitalFilter>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002adc:	f000 fc8c 	bl	80033f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ae0:	bf00      	nop
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	200002a8 	.word	0x200002a8
 8002ae8:	40005400 	.word	0x40005400
 8002aec:	30b09deb 	.word	0x30b09deb

08002af0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002af4:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <MX_I2C2_Init+0x74>)
 8002af6:	4a1c      	ldr	r2, [pc, #112]	; (8002b68 <MX_I2C2_Init+0x78>)
 8002af8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 8002afa:	4b1a      	ldr	r3, [pc, #104]	; (8002b64 <MX_I2C2_Init+0x74>)
 8002afc:	4a1b      	ldr	r2, [pc, #108]	; (8002b6c <MX_I2C2_Init+0x7c>)
 8002afe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002b00:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <MX_I2C2_Init+0x74>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b06:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <MX_I2C2_Init+0x74>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b0c:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <MX_I2C2_Init+0x74>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002b12:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <MX_I2C2_Init+0x74>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b18:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <MX_I2C2_Init+0x74>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b1e:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <MX_I2C2_Init+0x74>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8002b24:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <MX_I2C2_Init+0x74>)
 8002b26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002b2c:	480d      	ldr	r0, [pc, #52]	; (8002b64 <MX_I2C2_Init+0x74>)
 8002b2e:	f005 f877 	bl	8007c20 <HAL_I2C_Init>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002b38:	f000 fc5e 	bl	80033f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	4809      	ldr	r0, [pc, #36]	; (8002b64 <MX_I2C2_Init+0x74>)
 8002b40:	f006 f836 	bl	8008bb0 <HAL_I2CEx_ConfigAnalogFilter>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8002b4a:	f000 fc55 	bl	80033f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002b4e:	2100      	movs	r1, #0
 8002b50:	4804      	ldr	r0, [pc, #16]	; (8002b64 <MX_I2C2_Init+0x74>)
 8002b52:	f006 f878 	bl	8008c46 <HAL_I2CEx_ConfigDigitalFilter>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8002b5c:	f000 fc4c 	bl	80033f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002b60:	bf00      	nop
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	200002f4 	.word	0x200002f4
 8002b68:	40005800 	.word	0x40005800
 8002b6c:	30909dec 	.word	0x30909dec

08002b70 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002b74:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <MX_I2C3_Init+0x74>)
 8002b76:	4a1c      	ldr	r2, [pc, #112]	; (8002be8 <MX_I2C3_Init+0x78>)
 8002b78:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30909DEC;
 8002b7a:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <MX_I2C3_Init+0x74>)
 8002b7c:	4a1b      	ldr	r2, [pc, #108]	; (8002bec <MX_I2C3_Init+0x7c>)
 8002b7e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002b80:	4b18      	ldr	r3, [pc, #96]	; (8002be4 <MX_I2C3_Init+0x74>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b86:	4b17      	ldr	r3, [pc, #92]	; (8002be4 <MX_I2C3_Init+0x74>)
 8002b88:	2201      	movs	r2, #1
 8002b8a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b8c:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <MX_I2C3_Init+0x74>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002b92:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <MX_I2C3_Init+0x74>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b98:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <MX_I2C3_Init+0x74>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b9e:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <MX_I2C3_Init+0x74>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8002ba4:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <MX_I2C3_Init+0x74>)
 8002ba6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002baa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002bac:	480d      	ldr	r0, [pc, #52]	; (8002be4 <MX_I2C3_Init+0x74>)
 8002bae:	f005 f837 	bl	8007c20 <HAL_I2C_Init>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002bb8:	f000 fc1e 	bl	80033f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4809      	ldr	r0, [pc, #36]	; (8002be4 <MX_I2C3_Init+0x74>)
 8002bc0:	f005 fff6 	bl	8008bb0 <HAL_I2CEx_ConfigAnalogFilter>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002bca:	f000 fc15 	bl	80033f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4804      	ldr	r0, [pc, #16]	; (8002be4 <MX_I2C3_Init+0x74>)
 8002bd2:	f006 f838 	bl	8008c46 <HAL_I2CEx_ConfigDigitalFilter>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002bdc:	f000 fc0c 	bl	80033f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002be0:	bf00      	nop
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20000340 	.word	0x20000340
 8002be8:	46002800 	.word	0x46002800
 8002bec:	30909dec 	.word	0x30909dec

08002bf0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <MX_I2C4_Init+0x74>)
 8002bf6:	4a1c      	ldr	r2, [pc, #112]	; (8002c68 <MX_I2C4_Init+0x78>)
 8002bf8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30909DEC;
 8002bfa:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <MX_I2C4_Init+0x74>)
 8002bfc:	4a1b      	ldr	r2, [pc, #108]	; (8002c6c <MX_I2C4_Init+0x7c>)
 8002bfe:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002c00:	4b18      	ldr	r3, [pc, #96]	; (8002c64 <MX_I2C4_Init+0x74>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c06:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <MX_I2C4_Init+0x74>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c0c:	4b15      	ldr	r3, [pc, #84]	; (8002c64 <MX_I2C4_Init+0x74>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002c12:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <MX_I2C4_Init+0x74>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c18:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <MX_I2C4_Init+0x74>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c1e:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <MX_I2C4_Init+0x74>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8002c24:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <MX_I2C4_Init+0x74>)
 8002c26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002c2c:	480d      	ldr	r0, [pc, #52]	; (8002c64 <MX_I2C4_Init+0x74>)
 8002c2e:	f004 fff7 	bl	8007c20 <HAL_I2C_Init>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_I2C4_Init+0x4c>
  {
    Error_Handler();
 8002c38:	f000 fbde 	bl	80033f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	4809      	ldr	r0, [pc, #36]	; (8002c64 <MX_I2C4_Init+0x74>)
 8002c40:	f005 ffb6 	bl	8008bb0 <HAL_I2CEx_ConfigAnalogFilter>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8002c4a:	f000 fbd5 	bl	80033f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4804      	ldr	r0, [pc, #16]	; (8002c64 <MX_I2C4_Init+0x74>)
 8002c52:	f005 fff8 	bl	8008c46 <HAL_I2CEx_ConfigDigitalFilter>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8002c5c:	f000 fbcc 	bl	80033f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	2000038c 	.word	0x2000038c
 8002c68:	40008400 	.word	0x40008400
 8002c6c:	30909dec 	.word	0x30909dec

08002c70 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8002c74:	2000      	movs	r0, #0
 8002c76:	f006 f833 	bl	8008ce0 <HAL_ICACHE_ConfigAssociativityMode>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8002c80:	f000 fbba 	bl	80033f8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8002c84:	f006 f84c 	bl	8008d20 <HAL_ICACHE_Enable>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8002c8e:	f000 fbb3 	bl	80033f8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08e      	sub	sp, #56	; 0x38
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8002c9e:	f107 031c 	add.w	r3, r7, #28
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	609a      	str	r2, [r3, #8]
 8002caa:	60da      	str	r2, [r3, #12]
 8002cac:	611a      	str	r2, [r3, #16]
 8002cae:	615a      	str	r2, [r3, #20]
 8002cb0:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8002cb2:	f107 0308 	add.w	r3, r7, #8
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]
 8002cbc:	609a      	str	r2, [r3, #8]
 8002cbe:	60da      	str	r2, [r3, #12]
 8002cc0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002cc6:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <MX_RTC_Init+0x12c>)
 8002cc8:	4a3f      	ldr	r2, [pc, #252]	; (8002dc8 <MX_RTC_Init+0x130>)
 8002cca:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002ccc:	4b3d      	ldr	r3, [pc, #244]	; (8002dc4 <MX_RTC_Init+0x12c>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002cd2:	4b3c      	ldr	r3, [pc, #240]	; (8002dc4 <MX_RTC_Init+0x12c>)
 8002cd4:	227f      	movs	r2, #127	; 0x7f
 8002cd6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002cd8:	4b3a      	ldr	r3, [pc, #232]	; (8002dc4 <MX_RTC_Init+0x12c>)
 8002cda:	22ff      	movs	r2, #255	; 0xff
 8002cdc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002cde:	4b39      	ldr	r3, [pc, #228]	; (8002dc4 <MX_RTC_Init+0x12c>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002ce4:	4b37      	ldr	r3, [pc, #220]	; (8002dc4 <MX_RTC_Init+0x12c>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002cea:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <MX_RTC_Init+0x12c>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002cf0:	4b34      	ldr	r3, [pc, #208]	; (8002dc4 <MX_RTC_Init+0x12c>)
 8002cf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cf6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002cf8:	4b32      	ldr	r3, [pc, #200]	; (8002dc4 <MX_RTC_Init+0x12c>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8002cfe:	4b31      	ldr	r3, [pc, #196]	; (8002dc4 <MX_RTC_Init+0x12c>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002d04:	482f      	ldr	r0, [pc, #188]	; (8002dc4 <MX_RTC_Init+0x12c>)
 8002d06:	f00a f813 	bl	800cd30 <HAL_RTC_Init>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002d10:	f000 fb72 	bl	80033f8 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8002d24:	f107 031c 	add.w	r3, r7, #28
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4826      	ldr	r0, [pc, #152]	; (8002dc4 <MX_RTC_Init+0x12c>)
 8002d2c:	f00a fc14 	bl	800d558 <HAL_RTCEx_PrivilegeModeSet>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002d36:	f000 fb5f 	bl	80033f8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8002d42:	2300      	movs	r3, #0
 8002d44:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002d4e:	f107 0308 	add.w	r3, r7, #8
 8002d52:	2201      	movs	r2, #1
 8002d54:	4619      	mov	r1, r3
 8002d56:	481b      	ldr	r0, [pc, #108]	; (8002dc4 <MX_RTC_Init+0x12c>)
 8002d58:	f00a f864 	bl	800ce24 <HAL_RTC_SetTime>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8002d62:	f000 fb49 	bl	80033f8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8002d66:	2304      	movs	r3, #4
 8002d68:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JUNE;
 8002d6a:	2306      	movs	r3, #6
 8002d6c:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x9;
 8002d6e:	2309      	movs	r3, #9
 8002d70:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x22;
 8002d72:	2322      	movs	r3, #34	; 0x22
 8002d74:	71fb      	strb	r3, [r7, #7]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002d76:	1d3b      	adds	r3, r7, #4
 8002d78:	2201      	movs	r2, #1
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4811      	ldr	r0, [pc, #68]	; (8002dc4 <MX_RTC_Init+0x12c>)
 8002d7e:	f00a f94f 	bl	800d020 <HAL_RTC_SetDate>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8002d88:	f000 fb36 	bl	80033f8 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp_IT(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_DEFAULT) != HAL_OK)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2100      	movs	r1, #0
 8002d90:	480c      	ldr	r0, [pc, #48]	; (8002dc4 <MX_RTC_Init+0x12c>)
 8002d92:	f00a faed 	bl	800d370 <HAL_RTCEx_SetTimeStamp_IT>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002d9c:	f000 fb2c 	bl	80033f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

	//Subtracts a fraction of a second
	//Reference: RM0456 Rev 3
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002da0:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <MX_RTC_Init+0x130>)
 8002da2:	22ca      	movs	r2, #202	; 0xca
 8002da4:	625a      	str	r2, [r3, #36]	; 0x24
 8002da6:	4b08      	ldr	r3, [pc, #32]	; (8002dc8 <MX_RTC_Init+0x130>)
 8002da8:	2253      	movs	r2, #83	; 0x53
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24

	hrtc.Instance->SHIFTR = 0x00000001;   //1 msec
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <MX_RTC_Init+0x12c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2201      	movs	r2, #1
 8002db2:	62da      	str	r2, [r3, #44]	; 0x2c

	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002db4:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <MX_RTC_Init+0x130>)
 8002db6:	22ff      	movs	r2, #255	; 0xff
 8002db8:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END RTC_Init 2 */

}
 8002dba:	bf00      	nop
 8002dbc:	3738      	adds	r7, #56	; 0x38
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	200003d8 	.word	0x200003d8
 8002dc8:	46007800 	.word	0x46007800

08002dcc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8002dd2:	1d3b      	adds	r3, r7, #4
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ddc:	4b32      	ldr	r3, [pc, #200]	; (8002ea8 <MX_SPI1_Init+0xdc>)
 8002dde:	4a33      	ldr	r2, [pc, #204]	; (8002eac <MX_SPI1_Init+0xe0>)
 8002de0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002de2:	4b31      	ldr	r3, [pc, #196]	; (8002ea8 <MX_SPI1_Init+0xdc>)
 8002de4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002de8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002dea:	4b2f      	ldr	r3, [pc, #188]	; (8002ea8 <MX_SPI1_Init+0xdc>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002df0:	4b2d      	ldr	r3, [pc, #180]	; (8002ea8 <MX_SPI1_Init+0xdc>)
 8002df2:	2207      	movs	r2, #7
 8002df4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002df6:	4b2c      	ldr	r3, [pc, #176]	; (8002ea8 <MX_SPI1_Init+0xdc>)
 8002df8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dfc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002dfe:	4b2a      	ldr	r3, [pc, #168]	; (8002ea8 <MX_SPI1_Init+0xdc>)
 8002e00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002e06:	4b28      	ldr	r3, [pc, #160]	; (8002ea8 <MX_SPI1_Init+0xdc>)
 8002e08:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002e0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002e0e:	4b26      	ldr	r3, [pc, #152]	; (8002ea8 <MX_SPI1_Init+0xdc>)
 8002e10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e14:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e16:	4b24      	ldr	r3, [pc, #144]	; (8002ea8 <MX_SPI1_Init+0xdc>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e1c:	4b22      	ldr	r3, [pc, #136]	; (8002ea8 <MX_SPI1_Init+0xdc>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e22:	4b21      	ldr	r3, [pc, #132]	; (8002ea8 <MX_SPI1_Init+0xdc>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8002e28:	4b1f      	ldr	r3, [pc, #124]	; (8002ea8 <MX_SPI1_Init+0xdc>)
 8002e2a:	2207      	movs	r2, #7
 8002e2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002e2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <MX_SPI1_Init+0xdc>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002e34:	4b1c      	ldr	r3, [pc, #112]	; (8002ea8 <MX_SPI1_Init+0xdc>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002e3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <MX_SPI1_Init+0xdc>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002e40:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <MX_SPI1_Init+0xdc>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002e46:	4b18      	ldr	r3, [pc, #96]	; (8002ea8 <MX_SPI1_Init+0xdc>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002e4c:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <MX_SPI1_Init+0xdc>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002e52:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <MX_SPI1_Init+0xdc>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002e58:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <MX_SPI1_Init+0xdc>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8002e5e:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <MX_SPI1_Init+0xdc>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_LOW;
 8002e64:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <MX_SPI1_Init+0xdc>)
 8002e66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e6a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e6c:	480e      	ldr	r0, [pc, #56]	; (8002ea8 <MX_SPI1_Init+0xdc>)
 8002e6e:	f00a fba1 	bl	800d5b4 <HAL_SPI_Init>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_SPI1_Init+0xb0>
  {
    Error_Handler();
 8002e78:	f000 fabe 	bl	80033f8 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8002e80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e84:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8002e8a:	1d3b      	adds	r3, r7, #4
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4806      	ldr	r0, [pc, #24]	; (8002ea8 <MX_SPI1_Init+0xdc>)
 8002e90:	f00b f9cd 	bl	800e22e <HAL_SPIEx_SetConfigAutonomousMode>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_SPI1_Init+0xd2>
  {
    Error_Handler();
 8002e9a:	f000 faad 	bl	80033f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000408 	.word	0x20000408
 8002eac:	40013000 	.word	0x40013000

08002eb0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8002eb6:	1d3b      	adds	r3, r7, #4
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002ec0:	4b32      	ldr	r3, [pc, #200]	; (8002f8c <MX_SPI2_Init+0xdc>)
 8002ec2:	4a33      	ldr	r2, [pc, #204]	; (8002f90 <MX_SPI2_Init+0xe0>)
 8002ec4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ec6:	4b31      	ldr	r3, [pc, #196]	; (8002f8c <MX_SPI2_Init+0xdc>)
 8002ec8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002ecc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ece:	4b2f      	ldr	r3, [pc, #188]	; (8002f8c <MX_SPI2_Init+0xdc>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ed4:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <MX_SPI2_Init+0xdc>)
 8002ed6:	2207      	movs	r2, #7
 8002ed8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002eda:	4b2c      	ldr	r3, [pc, #176]	; (8002f8c <MX_SPI2_Init+0xdc>)
 8002edc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ee0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002ee2:	4b2a      	ldr	r3, [pc, #168]	; (8002f8c <MX_SPI2_Init+0xdc>)
 8002ee4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ee8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002eea:	4b28      	ldr	r3, [pc, #160]	; (8002f8c <MX_SPI2_Init+0xdc>)
 8002eec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002ef0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002ef2:	4b26      	ldr	r3, [pc, #152]	; (8002f8c <MX_SPI2_Init+0xdc>)
 8002ef4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ef8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002efa:	4b24      	ldr	r3, [pc, #144]	; (8002f8c <MX_SPI2_Init+0xdc>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f00:	4b22      	ldr	r3, [pc, #136]	; (8002f8c <MX_SPI2_Init+0xdc>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f06:	4b21      	ldr	r3, [pc, #132]	; (8002f8c <MX_SPI2_Init+0xdc>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8002f0c:	4b1f      	ldr	r3, [pc, #124]	; (8002f8c <MX_SPI2_Init+0xdc>)
 8002f0e:	2207      	movs	r2, #7
 8002f10:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002f12:	4b1e      	ldr	r3, [pc, #120]	; (8002f8c <MX_SPI2_Init+0xdc>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002f18:	4b1c      	ldr	r3, [pc, #112]	; (8002f8c <MX_SPI2_Init+0xdc>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002f1e:	4b1b      	ldr	r3, [pc, #108]	; (8002f8c <MX_SPI2_Init+0xdc>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002f24:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <MX_SPI2_Init+0xdc>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002f2a:	4b18      	ldr	r3, [pc, #96]	; (8002f8c <MX_SPI2_Init+0xdc>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002f30:	4b16      	ldr	r3, [pc, #88]	; (8002f8c <MX_SPI2_Init+0xdc>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002f36:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <MX_SPI2_Init+0xdc>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002f3c:	4b13      	ldr	r3, [pc, #76]	; (8002f8c <MX_SPI2_Init+0xdc>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	659a      	str	r2, [r3, #88]	; 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8002f42:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <MX_SPI2_Init+0xdc>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_LOW;
 8002f48:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <MX_SPI2_Init+0xdc>)
 8002f4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f4e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f50:	480e      	ldr	r0, [pc, #56]	; (8002f8c <MX_SPI2_Init+0xdc>)
 8002f52:	f00a fb2f 	bl	800d5b4 <HAL_SPI_Init>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_SPI2_Init+0xb0>
  {
    Error_Handler();
 8002f5c:	f000 fa4c 	bl	80033f8 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8002f60:	2300      	movs	r3, #0
 8002f62:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8002f64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002f68:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8002f6e:	1d3b      	adds	r3, r7, #4
 8002f70:	4619      	mov	r1, r3
 8002f72:	4806      	ldr	r0, [pc, #24]	; (8002f8c <MX_SPI2_Init+0xdc>)
 8002f74:	f00b f95b 	bl	800e22e <HAL_SPIEx_SetConfigAutonomousMode>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_SPI2_Init+0xd2>
  {
    Error_Handler();
 8002f7e:	f000 fa3b 	bl	80033f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002f82:	bf00      	nop
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000498 	.word	0x20000498
 8002f90:	40003800 	.word	0x40003800

08002f94 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8002f9a:	1d3b      	adds	r3, r7, #4
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002fa4:	4b32      	ldr	r3, [pc, #200]	; (8003070 <MX_SPI3_Init+0xdc>)
 8002fa6:	4a33      	ldr	r2, [pc, #204]	; (8003074 <MX_SPI3_Init+0xe0>)
 8002fa8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002faa:	4b31      	ldr	r3, [pc, #196]	; (8003070 <MX_SPI3_Init+0xdc>)
 8002fac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002fb0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002fb2:	4b2f      	ldr	r3, [pc, #188]	; (8003070 <MX_SPI3_Init+0xdc>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fb8:	4b2d      	ldr	r3, [pc, #180]	; (8003070 <MX_SPI3_Init+0xdc>)
 8002fba:	2207      	movs	r2, #7
 8002fbc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002fbe:	4b2c      	ldr	r3, [pc, #176]	; (8003070 <MX_SPI3_Init+0xdc>)
 8002fc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fc4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002fc6:	4b2a      	ldr	r3, [pc, #168]	; (8003070 <MX_SPI3_Init+0xdc>)
 8002fc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fcc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002fce:	4b28      	ldr	r3, [pc, #160]	; (8003070 <MX_SPI3_Init+0xdc>)
 8002fd0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002fd4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002fd6:	4b26      	ldr	r3, [pc, #152]	; (8003070 <MX_SPI3_Init+0xdc>)
 8002fd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fdc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fde:	4b24      	ldr	r3, [pc, #144]	; (8003070 <MX_SPI3_Init+0xdc>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fe4:	4b22      	ldr	r3, [pc, #136]	; (8003070 <MX_SPI3_Init+0xdc>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fea:	4b21      	ldr	r3, [pc, #132]	; (8003070 <MX_SPI3_Init+0xdc>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 8002ff0:	4b1f      	ldr	r3, [pc, #124]	; (8003070 <MX_SPI3_Init+0xdc>)
 8002ff2:	2207      	movs	r2, #7
 8002ff4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002ff6:	4b1e      	ldr	r3, [pc, #120]	; (8003070 <MX_SPI3_Init+0xdc>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002ffc:	4b1c      	ldr	r3, [pc, #112]	; (8003070 <MX_SPI3_Init+0xdc>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003002:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <MX_SPI3_Init+0xdc>)
 8003004:	2200      	movs	r2, #0
 8003006:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003008:	4b19      	ldr	r3, [pc, #100]	; (8003070 <MX_SPI3_Init+0xdc>)
 800300a:	2200      	movs	r2, #0
 800300c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800300e:	4b18      	ldr	r3, [pc, #96]	; (8003070 <MX_SPI3_Init+0xdc>)
 8003010:	2200      	movs	r2, #0
 8003012:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003014:	4b16      	ldr	r3, [pc, #88]	; (8003070 <MX_SPI3_Init+0xdc>)
 8003016:	2200      	movs	r2, #0
 8003018:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800301a:	4b15      	ldr	r3, [pc, #84]	; (8003070 <MX_SPI3_Init+0xdc>)
 800301c:	2200      	movs	r2, #0
 800301e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003020:	4b13      	ldr	r3, [pc, #76]	; (8003070 <MX_SPI3_Init+0xdc>)
 8003022:	2200      	movs	r2, #0
 8003024:	659a      	str	r2, [r3, #88]	; 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8003026:	4b12      	ldr	r3, [pc, #72]	; (8003070 <MX_SPI3_Init+0xdc>)
 8003028:	2200      	movs	r2, #0
 800302a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_LOW;
 800302c:	4b10      	ldr	r3, [pc, #64]	; (8003070 <MX_SPI3_Init+0xdc>)
 800302e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003032:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003034:	480e      	ldr	r0, [pc, #56]	; (8003070 <MX_SPI3_Init+0xdc>)
 8003036:	f00a fabd 	bl	800d5b4 <HAL_SPI_Init>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_SPI3_Init+0xb0>
  {
    Error_Handler();
 8003040:	f000 f9da 	bl	80033f8 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8003044:	2300      	movs	r3, #0
 8003046:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8003048:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800304c:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi3, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8003052:	1d3b      	adds	r3, r7, #4
 8003054:	4619      	mov	r1, r3
 8003056:	4806      	ldr	r0, [pc, #24]	; (8003070 <MX_SPI3_Init+0xdc>)
 8003058:	f00b f8e9 	bl	800e22e <HAL_SPIEx_SetConfigAutonomousMode>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <MX_SPI3_Init+0xd2>
  {
    Error_Handler();
 8003062:	f000 f9c9 	bl	80033f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003066:	bf00      	nop
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20000528 	.word	0x20000528
 8003074:	46002000 	.word	0x46002000

08003078 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800307c:	4b22      	ldr	r3, [pc, #136]	; (8003108 <MX_USART1_UART_Init+0x90>)
 800307e:	4a23      	ldr	r2, [pc, #140]	; (800310c <MX_USART1_UART_Init+0x94>)
 8003080:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003082:	4b21      	ldr	r3, [pc, #132]	; (8003108 <MX_USART1_UART_Init+0x90>)
 8003084:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003088:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800308a:	4b1f      	ldr	r3, [pc, #124]	; (8003108 <MX_USART1_UART_Init+0x90>)
 800308c:	2200      	movs	r2, #0
 800308e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003090:	4b1d      	ldr	r3, [pc, #116]	; (8003108 <MX_USART1_UART_Init+0x90>)
 8003092:	2200      	movs	r2, #0
 8003094:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003096:	4b1c      	ldr	r3, [pc, #112]	; (8003108 <MX_USART1_UART_Init+0x90>)
 8003098:	2200      	movs	r2, #0
 800309a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800309c:	4b1a      	ldr	r3, [pc, #104]	; (8003108 <MX_USART1_UART_Init+0x90>)
 800309e:	220c      	movs	r2, #12
 80030a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030a2:	4b19      	ldr	r3, [pc, #100]	; (8003108 <MX_USART1_UART_Init+0x90>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030a8:	4b17      	ldr	r3, [pc, #92]	; (8003108 <MX_USART1_UART_Init+0x90>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030ae:	4b16      	ldr	r3, [pc, #88]	; (8003108 <MX_USART1_UART_Init+0x90>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030b4:	4b14      	ldr	r3, [pc, #80]	; (8003108 <MX_USART1_UART_Init+0x90>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030ba:	4b13      	ldr	r3, [pc, #76]	; (8003108 <MX_USART1_UART_Init+0x90>)
 80030bc:	2200      	movs	r2, #0
 80030be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030c0:	4811      	ldr	r0, [pc, #68]	; (8003108 <MX_USART1_UART_Init+0x90>)
 80030c2:	f00b f8f5 	bl	800e2b0 <HAL_UART_Init>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80030cc:	f000 f994 	bl	80033f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030d0:	2100      	movs	r1, #0
 80030d2:	480d      	ldr	r0, [pc, #52]	; (8003108 <MX_USART1_UART_Init+0x90>)
 80030d4:	f00b fd72 	bl	800ebbc <HAL_UARTEx_SetTxFifoThreshold>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80030de:	f000 f98b 	bl	80033f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030e2:	2100      	movs	r1, #0
 80030e4:	4808      	ldr	r0, [pc, #32]	; (8003108 <MX_USART1_UART_Init+0x90>)
 80030e6:	f00b fda7 	bl	800ec38 <HAL_UARTEx_SetRxFifoThreshold>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80030f0:	f000 f982 	bl	80033f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80030f4:	4804      	ldr	r0, [pc, #16]	; (8003108 <MX_USART1_UART_Init+0x90>)
 80030f6:	f00b fd28 	bl	800eb4a <HAL_UARTEx_DisableFifoMode>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003100:	f000 f97a 	bl	80033f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003104:	bf00      	nop
 8003106:	bd80      	pop	{r7, pc}
 8003108:	200005b8 	.word	0x200005b8
 800310c:	40013800 	.word	0x40013800

08003110 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08c      	sub	sp, #48	; 0x30
 8003114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003116:	f107 031c 	add.w	r3, r7, #28
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	605a      	str	r2, [r3, #4]
 8003120:	609a      	str	r2, [r3, #8]
 8003122:	60da      	str	r2, [r3, #12]
 8003124:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003126:	4b8a      	ldr	r3, [pc, #552]	; (8003350 <MX_GPIO_Init+0x240>)
 8003128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800312c:	4a88      	ldr	r2, [pc, #544]	; (8003350 <MX_GPIO_Init+0x240>)
 800312e:	f043 0304 	orr.w	r3, r3, #4
 8003132:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003136:	4b86      	ldr	r3, [pc, #536]	; (8003350 <MX_GPIO_Init+0x240>)
 8003138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003144:	4b82      	ldr	r3, [pc, #520]	; (8003350 <MX_GPIO_Init+0x240>)
 8003146:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800314a:	4a81      	ldr	r2, [pc, #516]	; (8003350 <MX_GPIO_Init+0x240>)
 800314c:	f043 0320 	orr.w	r3, r3, #32
 8003150:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003154:	4b7e      	ldr	r3, [pc, #504]	; (8003350 <MX_GPIO_Init+0x240>)
 8003156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003162:	4b7b      	ldr	r3, [pc, #492]	; (8003350 <MX_GPIO_Init+0x240>)
 8003164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003168:	4a79      	ldr	r2, [pc, #484]	; (8003350 <MX_GPIO_Init+0x240>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003172:	4b77      	ldr	r3, [pc, #476]	; (8003350 <MX_GPIO_Init+0x240>)
 8003174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003180:	4b73      	ldr	r3, [pc, #460]	; (8003350 <MX_GPIO_Init+0x240>)
 8003182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003186:	4a72      	ldr	r2, [pc, #456]	; (8003350 <MX_GPIO_Init+0x240>)
 8003188:	f043 0302 	orr.w	r3, r3, #2
 800318c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003190:	4b6f      	ldr	r3, [pc, #444]	; (8003350 <MX_GPIO_Init+0x240>)
 8003192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800319e:	4b6c      	ldr	r3, [pc, #432]	; (8003350 <MX_GPIO_Init+0x240>)
 80031a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031a4:	4a6a      	ldr	r2, [pc, #424]	; (8003350 <MX_GPIO_Init+0x240>)
 80031a6:	f043 0310 	orr.w	r3, r3, #16
 80031aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80031ae:	4b68      	ldr	r3, [pc, #416]	; (8003350 <MX_GPIO_Init+0x240>)
 80031b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031b4:	f003 0310 	and.w	r3, r3, #16
 80031b8:	60bb      	str	r3, [r7, #8]
 80031ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80031bc:	4b64      	ldr	r3, [pc, #400]	; (8003350 <MX_GPIO_Init+0x240>)
 80031be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031c2:	4a63      	ldr	r2, [pc, #396]	; (8003350 <MX_GPIO_Init+0x240>)
 80031c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031c8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80031cc:	4b60      	ldr	r3, [pc, #384]	; (8003350 <MX_GPIO_Init+0x240>)
 80031ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d6:	607b      	str	r3, [r7, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031da:	4b5d      	ldr	r3, [pc, #372]	; (8003350 <MX_GPIO_Init+0x240>)
 80031dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031e0:	4a5b      	ldr	r2, [pc, #364]	; (8003350 <MX_GPIO_Init+0x240>)
 80031e2:	f043 0308 	orr.w	r3, r3, #8
 80031e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80031ea:	4b59      	ldr	r3, [pc, #356]	; (8003350 <MX_GPIO_Init+0x240>)
 80031ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	603b      	str	r3, [r7, #0]
 80031f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 80031f8:	2200      	movs	r2, #0
 80031fa:	2104      	movs	r1, #4
 80031fc:	4855      	ldr	r0, [pc, #340]	; (8003354 <MX_GPIO_Init+0x244>)
 80031fe:	f004 fcd1 	bl	8007ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8003202:	2304      	movs	r3, #4
 8003204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003206:	2303      	movs	r3, #3
 8003208:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800320e:	f107 031c 	add.w	r3, r7, #28
 8003212:	4619      	mov	r1, r3
 8003214:	4850      	ldr	r0, [pc, #320]	; (8003358 <MX_GPIO_Init+0x248>)
 8003216:	f004 faed 	bl	80077f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRDY_LSM6DSOX_INT2_Pin DRDY_LSM6DSOX_INT1_Pin DRDY_LIS3MDL_Pin DRDY_LSM6DSO32_INT1_Pin
                           DRDY_LSM6DSO32_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_LSM6DSOX_INT2_Pin|DRDY_LSM6DSOX_INT1_Pin|DRDY_LIS3MDL_Pin|DRDY_LSM6DSO32_INT1_Pin
 800321a:	f44f 53bc 	mov.w	r3, #6016	; 0x1780
 800321e:	61fb      	str	r3, [r7, #28]
                          |DRDY_LSM6DSO32_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003220:	4b4e      	ldr	r3, [pc, #312]	; (800335c <MX_GPIO_Init+0x24c>)
 8003222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003224:	2300      	movs	r3, #0
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003228:	f107 031c 	add.w	r3, r7, #28
 800322c:	4619      	mov	r1, r3
 800322e:	484c      	ldr	r0, [pc, #304]	; (8003360 <MX_GPIO_Init+0x250>)
 8003230:	f004 fae0 	bl	80077f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRDY_ADXL375_Pin */
  GPIO_InitStruct.Pin = DRDY_ADXL375_Pin;
 8003234:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800323a:	4b4a      	ldr	r3, [pc, #296]	; (8003364 <MX_GPIO_Init+0x254>)
 800323c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323e:	2300      	movs	r3, #0
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DRDY_ADXL375_GPIO_Port, &GPIO_InitStruct);
 8003242:	f107 031c 	add.w	r3, r7, #28
 8003246:	4619      	mov	r1, r3
 8003248:	4845      	ldr	r0, [pc, #276]	; (8003360 <MX_GPIO_Init+0x250>)
 800324a:	f004 fad3 	bl	80077f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800324e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003254:	2303      	movs	r3, #3
 8003256:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003258:	2300      	movs	r3, #0
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800325c:	f107 031c 	add.w	r3, r7, #28
 8003260:	4619      	mov	r1, r3
 8003262:	4841      	ldr	r0, [pc, #260]	; (8003368 <MX_GPIO_Init+0x258>)
 8003264:	f004 fac6 	bl	80077f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003268:	2304      	movs	r3, #4
 800326a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800326c:	2301      	movs	r3, #1
 800326e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003270:	2300      	movs	r3, #0
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003274:	2300      	movs	r3, #0
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003278:	f107 031c 	add.w	r3, r7, #28
 800327c:	4619      	mov	r1, r3
 800327e:	4835      	ldr	r0, [pc, #212]	; (8003354 <MX_GPIO_Init+0x244>)
 8003280:	f004 fab8 	bl	80077f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRDY_LPS27HHW_Pin */
  GPIO_InitStruct.Pin = DRDY_LPS27HHW_Pin;
 8003284:	2340      	movs	r3, #64	; 0x40
 8003286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003288:	4b34      	ldr	r3, [pc, #208]	; (800335c <MX_GPIO_Init+0x24c>)
 800328a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328c:	2300      	movs	r3, #0
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DRDY_LPS27HHW_GPIO_Port, &GPIO_InitStruct);
 8003290:	f107 031c 	add.w	r3, r7, #28
 8003294:	4619      	mov	r1, r3
 8003296:	4830      	ldr	r0, [pc, #192]	; (8003358 <MX_GPIO_Init+0x248>)
 8003298:	f004 faac 	bl	80077f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800329c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80032a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a2:	2302      	movs	r3, #2
 80032a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032aa:	2300      	movs	r3, #0
 80032ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80032ae:	230a      	movs	r3, #10
 80032b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b2:	f107 031c 	add.w	r3, r7, #28
 80032b6:	4619      	mov	r1, r3
 80032b8:	482c      	ldr	r0, [pc, #176]	; (800336c <MX_GPIO_Init+0x25c>)
 80032ba:	f004 fa9b 	bl	80077f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80032be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032c4:	2303      	movs	r3, #3
 80032c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032cc:	f107 031c 	add.w	r3, r7, #28
 80032d0:	4619      	mov	r1, r3
 80032d2:	4826      	ldr	r0, [pc, #152]	; (800336c <MX_GPIO_Init+0x25c>)
 80032d4:	f004 fa8e 	bl	80077f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI6_IRQn, 0, 0);
 80032d8:	2200      	movs	r2, #0
 80032da:	2100      	movs	r1, #0
 80032dc:	2011      	movs	r0, #17
 80032de:	f004 fa54 	bl	800778a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI6_IRQn);
 80032e2:	2011      	movs	r0, #17
 80032e4:	f004 fa6b 	bl	80077be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI7_IRQn, 0, 0);
 80032e8:	2200      	movs	r2, #0
 80032ea:	2100      	movs	r1, #0
 80032ec:	2012      	movs	r0, #18
 80032ee:	f004 fa4c 	bl	800778a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 80032f2:	2012      	movs	r0, #18
 80032f4:	f004 fa63 	bl	80077be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI8_IRQn, 0, 0);
 80032f8:	2200      	movs	r2, #0
 80032fa:	2100      	movs	r1, #0
 80032fc:	2013      	movs	r0, #19
 80032fe:	f004 fa44 	bl	800778a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 8003302:	2013      	movs	r0, #19
 8003304:	f004 fa5b 	bl	80077be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_IRQn, 0, 0);
 8003308:	2200      	movs	r2, #0
 800330a:	2100      	movs	r1, #0
 800330c:	2014      	movs	r0, #20
 800330e:	f004 fa3c 	bl	800778a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_IRQn);
 8003312:	2014      	movs	r0, #20
 8003314:	f004 fa53 	bl	80077be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI10_IRQn, 0, 0);
 8003318:	2200      	movs	r2, #0
 800331a:	2100      	movs	r1, #0
 800331c:	2015      	movs	r0, #21
 800331e:	f004 fa34 	bl	800778a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8003322:	2015      	movs	r0, #21
 8003324:	f004 fa4b 	bl	80077be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0);
 8003328:	2200      	movs	r2, #0
 800332a:	2100      	movs	r1, #0
 800332c:	2016      	movs	r0, #22
 800332e:	f004 fa2c 	bl	800778a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8003332:	2016      	movs	r0, #22
 8003334:	f004 fa43 	bl	80077be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI12_IRQn, 0, 0);
 8003338:	2200      	movs	r2, #0
 800333a:	2100      	movs	r1, #0
 800333c:	2017      	movs	r0, #23
 800333e:	f004 fa24 	bl	800778a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI12_IRQn);
 8003342:	2017      	movs	r0, #23
 8003344:	f004 fa3b 	bl	80077be <HAL_NVIC_EnableIRQ>

}
 8003348:	bf00      	nop
 800334a:	3730      	adds	r7, #48	; 0x30
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	46020c00 	.word	0x46020c00
 8003354:	42021800 	.word	0x42021800
 8003358:	42020800 	.word	0x42020800
 800335c:	10110000 	.word	0x10110000
 8003360:	42021000 	.word	0x42021000
 8003364:	10210000 	.word	0x10210000
 8003368:	42020400 	.word	0x42020400
 800336c:	42020000 	.word	0x42020000

08003370 <HAL_RTCEx_TimeStampEventCallback>:
 * @brief  Timestamp callback
 * @param  hrtc : hrtc handle
 * @retval None
 */
void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *RTC_Handle)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08c      	sub	sp, #48	; 0x30
 8003374:	af02      	add	r7, sp, #8
 8003376:	6078      	str	r0, [r7, #4]
	//	RTCStatus = 1;
	RTC_DateTypeDef sTimeStampDateget;
	RTC_TimeTypeDef sTimeStampget;

	HAL_RTCEx_GetTimeStamp(&hrtc, &sTimeStampget, &sTimeStampDateget, RTC_FORMAT_BIN);
 8003378:	f107 0220 	add.w	r2, r7, #32
 800337c:	f107 010c 	add.w	r1, r7, #12
 8003380:	2300      	movs	r3, #0
 8003382:	4818      	ldr	r0, [pc, #96]	; (80033e4 <HAL_RTCEx_TimeStampEventCallback+0x74>)
 8003384:	f00a f838 	bl	800d3f8 <HAL_RTCEx_GetTimeStamp>

	//Convert sub-seconds into milliseconds
	uint16_t millisec = (1000 * (sTimeStampget.SecondFraction - sTimeStampget.SubSeconds)) / (sTimeStampget.SecondFraction + 1);
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003392:	fb03 f202 	mul.w	r2, r3, r2
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	3301      	adds	r3, #1
 800339a:	fbb2 f3f3 	udiv	r3, r2, r3
 800339e:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Display time Format : hh:mm:ss */
	sprintf((char *)aShowTimeStamp, "%.2d:%.2d:%.2d:%.3hu", sTimeStampget.Hours, sTimeStampget.Minutes, sTimeStampget.Seconds, millisec);
 80033a0:	7b3b      	ldrb	r3, [r7, #12]
 80033a2:	4619      	mov	r1, r3
 80033a4:	7b7b      	ldrb	r3, [r7, #13]
 80033a6:	4618      	mov	r0, r3
 80033a8:	7bbb      	ldrb	r3, [r7, #14]
 80033aa:	461a      	mov	r2, r3
 80033ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80033ae:	9301      	str	r3, [sp, #4]
 80033b0:	9200      	str	r2, [sp, #0]
 80033b2:	4603      	mov	r3, r0
 80033b4:	460a      	mov	r2, r1
 80033b6:	490c      	ldr	r1, [pc, #48]	; (80033e8 <HAL_RTCEx_TimeStampEventCallback+0x78>)
 80033b8:	480c      	ldr	r0, [pc, #48]	; (80033ec <HAL_RTCEx_TimeStampEventCallback+0x7c>)
 80033ba:	f00c f975 	bl	800f6a8 <siprintf>
	/* Display date Format : mm-dd */
	sprintf((char *)aShowDateStamp, "%.2d-%.2d-%.2d", sTimeStampDateget.Month, sTimeStampDateget.Date, 2020);
 80033be:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80033c2:	461a      	mov	r2, r3
 80033c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80033c8:	4619      	mov	r1, r3
 80033ca:	f240 73e4 	movw	r3, #2020	; 0x7e4
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	460b      	mov	r3, r1
 80033d2:	4907      	ldr	r1, [pc, #28]	; (80033f0 <HAL_RTCEx_TimeStampEventCallback+0x80>)
 80033d4:	4807      	ldr	r0, [pc, #28]	; (80033f4 <HAL_RTCEx_TimeStampEventCallback+0x84>)
 80033d6:	f00c f967 	bl	800f6a8 <siprintf>
}
 80033da:	bf00      	nop
 80033dc:	3728      	adds	r7, #40	; 0x28
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	200003d8 	.word	0x200003d8
 80033e8:	08011bc8 	.word	0x08011bc8
 80033ec:	20000000 	.word	0x20000000
 80033f0:	08011be0 	.word	0x08011be0
 80033f4:	20000010 	.word	0x20000010

080033f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033fc:	b672      	cpsid	i
}
 80033fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003400:	e7fe      	b.n	8003400 <Error_Handler+0x8>
	...

08003404 <RTCTimestamp>:
 * 	  	   RTC_HandleTypeDef: RTC instance to be used
 *
 * @retval None
 */
void RTCTimestamp(uint8_t* time , uint8_t* date, RTC_HandleTypeDef RTC_Handle)
{
 8003404:	b082      	sub	sp, #8
 8003406:	b580      	push	{r7, lr}
 8003408:	b08c      	sub	sp, #48	; 0x30
 800340a:	af02      	add	r7, sp, #8
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	6039      	str	r1, [r7, #0]
 8003410:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003414:	e881 000c 	stmia.w	r1, {r2, r3}
	RTC_DateTypeDef sdatestructureget;
	RTC_TimeTypeDef stimestructureget;

	//Get the RTC current Time
	HAL_RTC_GetTime(&RTC_Handle, &stimestructureget, RTC_FORMAT_BIN);
 8003418:	f107 030c 	add.w	r3, r7, #12
 800341c:	2200      	movs	r2, #0
 800341e:	4619      	mov	r1, r3
 8003420:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003424:	f009 fd9a 	bl	800cf5c <HAL_RTC_GetTime>

	//Convert sub-seconds into milliseconds
	uint32_t millisec = (1000 * (stimestructureget.SecondFraction - stimestructureget.SubSeconds)) / (stimestructureget.SecondFraction + 1);
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003432:	fb03 f202 	mul.w	r2, r3, r2
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	3301      	adds	r3, #1
 800343a:	fbb2 f3f3 	udiv	r3, r2, r3
 800343e:	627b      	str	r3, [r7, #36]	; 0x24

	//Get the RTC current Date
	HAL_RTC_GetDate(&RTC_Handle, &sdatestructureget, RTC_FORMAT_BIN);
 8003440:	f107 0320 	add.w	r3, r7, #32
 8003444:	2200      	movs	r2, #0
 8003446:	4619      	mov	r1, r3
 8003448:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800344c:	f009 fe6e 	bl	800d12c <HAL_RTC_GetDate>
//	time[3] = (uint8_t)millisec;
//	time[4] = (uint8_t)millisec >> 8;


	//Display time Format : hh:mm:ss:mss
	sprintf((char *)time, "%.2hu:%.2hu:%.2hu:%.3lu", stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds, millisec);
 8003450:	7b3b      	ldrb	r3, [r7, #12]
 8003452:	4619      	mov	r1, r3
 8003454:	7b7b      	ldrb	r3, [r7, #13]
 8003456:	4618      	mov	r0, r3
 8003458:	7bbb      	ldrb	r3, [r7, #14]
 800345a:	461a      	mov	r2, r3
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	9301      	str	r3, [sp, #4]
 8003460:	9200      	str	r2, [sp, #0]
 8003462:	4603      	mov	r3, r0
 8003464:	460a      	mov	r2, r1
 8003466:	490d      	ldr	r1, [pc, #52]	; (800349c <RTCTimestamp+0x98>)
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f00c f91d 	bl	800f6a8 <siprintf>
	//Display date Format : mm-dd-yy
	sprintf((char *)date, "%.2d-%.2d-%.2d ", sdatestructureget.Month, sdatestructureget.Date, 2000 + sdatestructureget.Year);
 800346e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003472:	461a      	mov	r2, r3
 8003474:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003478:	4619      	mov	r1, r3
 800347a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800347e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	460b      	mov	r3, r1
 8003486:	4906      	ldr	r1, [pc, #24]	; (80034a0 <RTCTimestamp+0x9c>)
 8003488:	6838      	ldr	r0, [r7, #0]
 800348a:	f00c f90d 	bl	800f6a8 <siprintf>
}
 800348e:	bf00      	nop
 8003490:	3728      	adds	r7, #40	; 0x28
 8003492:	46bd      	mov	sp, r7
 8003494:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003498:	b002      	add	sp, #8
 800349a:	4770      	bx	lr
 800349c:	08011bf0 	.word	0x08011bf0
 80034a0:	08011c08 	.word	0x08011c08

080034a4 <getSensorPtr>:
 * @brief  Returns global instance of the pointer
 * @param  None
 * @retval User_reg_bank_n* : Instance of the user_reg structure
 */
User_reg_bank_n* getSensorPtr()
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
	return (&a);
 80034a8:	4b02      	ldr	r3, [pc, #8]	; (80034b4 <getSensorPtr+0x10>)
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	20000648 	.word	0x20000648

080034b8 <nextSensor>:
 * 		   Sensor_no_t last_state: The last state aka the count for number of sensors for that peripheral
 * 		   uint32_t user_reg: The user defined register that indicates the new incoming data for a particular peripheral
 * @retval Sensor_no_t: next state to go to
 */
static Sensor_no_t nextSensor(Sensor_no_t new_state , Sensor_no_t curr_state , Sensor_no_t last_state , uint32_t user_reg)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
	if(new_state == 0)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d113      	bne.n	80034f4 <nextSensor+0x3c>
	{
		for(int i = curr_state; i <= last_state; i*=2)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	e00b      	b.n	80034ea <nextSensor+0x32>
		{
			new_state = (user_reg & i);
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	4013      	ands	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
			if(new_state != 0)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d110      	bne.n	8003502 <nextSensor+0x4a>
				break;
			else
				new_state = SEQ_DONE;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
		for(int i = curr_state; i <= last_state; i*=2)
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d2ef      	bcs.n	80034d2 <nextSensor+0x1a>
 80034f2:	e007      	b.n	8003504 <nextSensor+0x4c>
		}
	}
	else if(curr_state == last_state)
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d103      	bne.n	8003504 <nextSensor+0x4c>
		new_state = last_state;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	e000      	b.n	8003504 <nextSensor+0x4c>
				break;
 8003502:	bf00      	nop
	return new_state;
 8003504:	68fb      	ldr	r3, [r7, #12]
}
 8003506:	4618      	mov	r0, r3
 8003508:	371c      	adds	r7, #28
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <sensor_framework>:
uint8_t sensor_framework(I2C_HandleTypeDef I2C_Periph1 , I2C_HandleTypeDef I2C_Periph2 ,
		I2C_HandleTypeDef I2C_Periph3 , I2C_HandleTypeDef I2C_Periph4 ,
		SPI_HandleTypeDef SPI_Periph1 , SPI_HandleTypeDef SPI_Periph2 ,
		SPI_HandleTypeDef SPI_Periph3 , ADC_HandleTypeDef ADC_Perpiph1,
		UART_HandleTypeDef UART_Periph1, RTC_HandleTypeDef RTC_Periph1)
{
 8003514:	b084      	sub	sp, #16
 8003516:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800351a:	f5ad 5d87 	sub.w	sp, sp, #4320	; 0x10e0
 800351e:	b087      	sub	sp, #28
 8003520:	af22      	add	r7, sp, #136	; 0x88
 8003522:	f507 5484 	add.w	r4, r7, #4224	; 0x1080
 8003526:	f104 0410 	add.w	r4, r4, #16
 800352a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//TODO: Memory block - Need more clarification
	//Or Use one of the SRAM blocks?
	uint32_t data_buffer[MAX_BUFFER_SIZE];
	static uint32_t dataIndex = 0;
	Comm_protocol_t periph = SPI_protocol;
 800352e:	2301      	movs	r3, #1
 8003530:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003534:	f102 020a 	add.w	r2, r2, #10
 8003538:	7013      	strb	r3, [r2, #0]
	Sensor_no_t sensor_no;
	uint8_t time_stamp[9], date_stamp[12];
	uint8_t ret_status = HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003540:	f102 020b 	add.w	r2, r2, #11
 8003544:	7013      	strb	r3, [r2, #0]

	switch(periph)
 8003546:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800354a:	f103 030a 	add.w	r3, r3, #10
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	3b01      	subs	r3, #1
 8003552:	2b08      	cmp	r3, #8
 8003554:	f200 87b1 	bhi.w	80044ba <sensor_framework+0xfa6>
 8003558:	a201      	add	r2, pc, #4	; (adr r2, 8003560 <sensor_framework+0x4c>)
 800355a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355e:	bf00      	nop
 8003560:	08003585 	.word	0x08003585
 8003564:	08003a0b 	.word	0x08003a0b
 8003568:	08004233 	.word	0x08004233
 800356c:	0800428d 	.word	0x0800428d
 8003570:	080042e7 	.word	0x080042e7
 8003574:	080042f3 	.word	0x080042f3
 8003578:	08004485 	.word	0x08004485
 800357c:	08004491 	.word	0x08004491
 8003580:	080044af 	.word	0x080044af
	{
	case SPI_protocol:
		periph = I2C_protocol;
 8003584:	2302      	movs	r3, #2
 8003586:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800358a:	f102 020a 	add.w	r2, r2, #10
 800358e:	7013      	strb	r3, [r2, #0]

		sensor_no = (a.data_rdy_reg & SPI_sensor_1);
 8003590:	4bca      	ldr	r3, [pc, #808]	; (80038bc <sensor_framework+0x3a8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800359c:	f102 020c 	add.w	r2, r2, #12
 80035a0:	6013      	str	r3, [r2, #0]

		if(sensor_no == 0)
 80035a2:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80035a6:	f103 030c 	add.w	r3, r3, #12
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f040 8224 	bne.w	80039fa <sensor_framework+0x4e6>
			sensor_no = nextSensor(sensor_no, SPI_sensor_1 , SPI_sensor_4 ,
 80035b2:	4bc2      	ldr	r3, [pc, #776]	; (80038bc <sensor_framework+0x3a8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2208      	movs	r2, #8
 80035b8:	2101      	movs	r1, #1
 80035ba:	f507 5083 	add.w	r0, r7, #4192	; 0x1060
 80035be:	f100 000c 	add.w	r0, r0, #12
 80035c2:	6800      	ldr	r0, [r0, #0]
 80035c4:	f7ff ff78 	bl	80034b8 <nextSensor>
 80035c8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80035cc:	f103 030c 	add.w	r3, r3, #12
 80035d0:	6018      	str	r0, [r3, #0]
					a.data_rdy_reg);

		/*Continue looping till all the data ready are covered*/
		while(sensor_no != SEQ_DONE)
 80035d2:	e212      	b.n	80039fa <sensor_framework+0x4e6>
 80035d4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80035d8:	f103 030c 	add.w	r3, r3, #12
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3b01      	subs	r3, #1
 80035e0:	2b07      	cmp	r3, #7
 80035e2:	f200 8203 	bhi.w	80039ec <sensor_framework+0x4d8>
 80035e6:	a201      	add	r2, pc, #4	; (adr r2, 80035ec <sensor_framework+0xd8>)
 80035e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ec:	0800360d 	.word	0x0800360d
 80035f0:	0800372b 	.word	0x0800372b
 80035f4:	080039ed 	.word	0x080039ed
 80035f8:	080038cd 	.word	0x080038cd
 80035fc:	080039ed 	.word	0x080039ed
 8003600:	080039ed 	.word	0x080039ed
 8003604:	080039ed 	.word	0x080039ed
 8003608:	080039df 	.word	0x080039df
		{
			switch(sensor_no)
			{
			case SPI_sensor_1:
				/*Fetch next data-ready and clear the data ready flag*/
				sensor_no = (a.data_rdy_reg & SPI_sensor_2);
 800360c:	4bab      	ldr	r3, [pc, #684]	; (80038bc <sensor_framework+0x3a8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003618:	f102 020c 	add.w	r2, r2, #12
 800361c:	6013      	str	r3, [r2, #0]
				a.data_rdy_reg &= ~SPI_sensor_1;
 800361e:	4ba7      	ldr	r3, [pc, #668]	; (80038bc <sensor_framework+0x3a8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 0301 	bic.w	r3, r3, #1
 8003626:	4aa5      	ldr	r2, [pc, #660]	; (80038bc <sensor_framework+0x3a8>)
 8003628:	6013      	str	r3, [r2, #0]
				sensor_no = nextSensor(sensor_no , SPI_sensor_2 , SPI_sensor_4 ,
 800362a:	4ba4      	ldr	r3, [pc, #656]	; (80038bc <sensor_framework+0x3a8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2208      	movs	r2, #8
 8003630:	2102      	movs	r1, #2
 8003632:	f507 5083 	add.w	r0, r7, #4192	; 0x1060
 8003636:	f100 000c 	add.w	r0, r0, #12
 800363a:	6800      	ldr	r0, [r0, #0]
 800363c:	f7ff ff3c 	bl	80034b8 <nextSensor>
 8003640:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003644:	f103 030c 	add.w	r3, r3, #12
 8003648:	6018      	str	r0, [r3, #0]
						a.data_rdy_reg);

				/*Get data from the sensor and the current timestamp*/
				uint32_t temp_pres;
				if (HAL_OK != lps277SPIPressureData(&temp_pres, SPI_Periph1))
 800364a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800364e:	3c04      	subs	r4, #4
 8003650:	4668      	mov	r0, sp
 8003652:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8003656:	f103 030c 	add.w	r3, r3, #12
 800365a:	2284      	movs	r2, #132	; 0x84
 800365c:	4619      	mov	r1, r3
 800365e:	f00b fba1 	bl	800eda4 <memcpy>
 8003662:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8003666:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003668:	4620      	mov	r0, r4
 800366a:	f7fe fbf9 	bl	8001e60 <lps277SPIPressureData>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <sensor_framework+0x16c>
					ret_status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800367a:	f102 020b 	add.w	r2, r2, #11
 800367e:	7013      	strb	r3, [r2, #0]
				RTCTimestamp(time_stamp, date_stamp, RTC_Periph1);
 8003680:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 8003684:	f107 0670 	add.w	r6, r7, #112	; 0x70
 8003688:	3e14      	subs	r6, #20
 800368a:	466d      	mov	r5, sp
 800368c:	f507 54a4 	add.w	r4, r7, #5248	; 0x1480
 8003690:	f104 0414 	add.w	r4, r4, #20
 8003694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003696:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800369a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800369c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80036a4:	f507 53a4 	add.w	r3, r7, #5248	; 0x1480
 80036a8:	f103 030c 	add.w	r3, r3, #12
 80036ac:	cb0c      	ldmia	r3, {r2, r3}
 80036ae:	4661      	mov	r1, ip
 80036b0:	4630      	mov	r0, r6
 80036b2:	f7ff fea7 	bl	8003404 <RTCTimestamp>

				/*Store data into the local buffer and print it to UART*/
				if (dataIndex == MAX_BUFFER_SIZE)
 80036b6:	4b82      	ldr	r3, [pc, #520]	; (80038c0 <sensor_framework+0x3ac>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036be:	d102      	bne.n	80036c6 <sensor_framework+0x1b2>
					dataIndex = 0;
 80036c0:	4b7f      	ldr	r3, [pc, #508]	; (80038c0 <sensor_framework+0x3ac>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
				memset(&data_buffer[dataIndex] , 0,
 80036c6:	4b7e      	ldr	r3, [pc, #504]	; (80038c0 <sensor_framework+0x3ac>)
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80036ce:	3b08      	subs	r3, #8
 80036d0:	0092      	lsls	r2, r2, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	2240      	movs	r2, #64	; 0x40
 80036d6:	2100      	movs	r1, #0
 80036d8:	4618      	mov	r0, r3
 80036da:	f00b fb70 	bl	800edbe <memset>
						DATA_LEN * sizeof(data_buffer[dataIndex]));
				sprintf((char *)&data_buffer[dataIndex],"%s LPS27 P:%lu\r\n",
 80036de:	4b78      	ldr	r3, [pc, #480]	; (80038c0 <sensor_framework+0x3ac>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80036e6:	3b08      	subs	r3, #8
 80036e8:	0092      	lsls	r2, r2, #2
 80036ea:	1898      	adds	r0, r3, r2
 80036ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80036f0:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80036f4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80036f8:	3a14      	subs	r2, #20
 80036fa:	4972      	ldr	r1, [pc, #456]	; (80038c4 <sensor_framework+0x3b0>)
 80036fc:	f00b ffd4 	bl	800f6a8 <siprintf>
						time_stamp , temp_pres);
				HAL_UART_Transmit(&UART_Periph1,(uint8_t *)&data_buffer[dataIndex],
 8003700:	4b6f      	ldr	r3, [pc, #444]	; (80038c0 <sensor_framework+0x3ac>)
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003708:	3b08      	subs	r3, #8
 800370a:	0092      	lsls	r2, r2, #2
 800370c:	1899      	adds	r1, r3, r2
 800370e:	f507 509f 	add.w	r0, r7, #5088	; 0x13e0
 8003712:	f100 001c 	add.w	r0, r0, #28
 8003716:	2364      	movs	r3, #100	; 0x64
 8003718:	2240      	movs	r2, #64	; 0x40
 800371a:	f00a fe19 	bl	800e350 <HAL_UART_Transmit>
						DATA_LEN * sizeof(data_buffer[dataIndex]), 100);

				/*Increment the local buffer by 8 [Each data packet is 64 bytes]*/
				dataIndex += DATA_LEN;
 800371e:	4b68      	ldr	r3, [pc, #416]	; (80038c0 <sensor_framework+0x3ac>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3310      	adds	r3, #16
 8003724:	4a66      	ldr	r2, [pc, #408]	; (80038c0 <sensor_framework+0x3ac>)
 8003726:	6013      	str	r3, [r2, #0]
				//				if (dataIndex == MAX_BUFFER_SIZE)
				//					dataIndex = 0;
				break;
 8003728:	e167      	b.n	80039fa <sensor_framework+0x4e6>

			case SPI_sensor_2:
				/*Fetch next data-ready and clear the data ready flag*/
				sensor_no = (a.data_rdy_reg & SPI_sensor_3);
 800372a:	4b64      	ldr	r3, [pc, #400]	; (80038bc <sensor_framework+0x3a8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0304 	and.w	r3, r3, #4
 8003732:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003736:	f102 020c 	add.w	r2, r2, #12
 800373a:	6013      	str	r3, [r2, #0]
				a.data_rdy_reg &= ~SPI_sensor_2;
 800373c:	4b5f      	ldr	r3, [pc, #380]	; (80038bc <sensor_framework+0x3a8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f023 0302 	bic.w	r3, r3, #2
 8003744:	4a5d      	ldr	r2, [pc, #372]	; (80038bc <sensor_framework+0x3a8>)
 8003746:	6013      	str	r3, [r2, #0]
				sensor_no = nextSensor(sensor_no , SPI_sensor_3 , SPI_sensor_3 ,
 8003748:	4b5c      	ldr	r3, [pc, #368]	; (80038bc <sensor_framework+0x3a8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2204      	movs	r2, #4
 800374e:	2104      	movs	r1, #4
 8003750:	f507 5083 	add.w	r0, r7, #4192	; 0x1060
 8003754:	f100 000c 	add.w	r0, r0, #12
 8003758:	6800      	ldr	r0, [r0, #0]
 800375a:	f7ff fead 	bl	80034b8 <nextSensor>
 800375e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003762:	f103 030c 	add.w	r3, r3, #12
 8003766:	6018      	str	r0, [r3, #0]
						a.data_rdy_reg);

				//Get data from the sensor and the current timestamp
				int16_t temp_acc1[3], temp_gyro1[3];
				if (HAL_OK != lsm6dso32SPIAccData(SPI_Periph2, temp_acc1))
 8003768:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800376c:	3b0c      	subs	r3, #12
 800376e:	9320      	str	r3, [sp, #128]	; 0x80
 8003770:	4668      	mov	r0, sp
 8003772:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8003776:	2280      	movs	r2, #128	; 0x80
 8003778:	4619      	mov	r1, r3
 800377a:	f00b fb13 	bl	800eda4 <memcpy>
 800377e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003782:	f103 0310 	add.w	r3, r3, #16
 8003786:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003788:	f7fe fcb8 	bl	80020fc <lsm6dso32SPIAccData>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <sensor_framework+0x28a>
					ret_status = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003798:	f102 020b 	add.w	r2, r2, #11
 800379c:	7013      	strb	r3, [r2, #0]
				if (HAL_OK != lsm6dso32SPIGyroData(SPI_Periph2, temp_gyro1))
 800379e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037a2:	3b14      	subs	r3, #20
 80037a4:	9320      	str	r3, [sp, #128]	; 0x80
 80037a6:	4668      	mov	r0, sp
 80037a8:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 80037ac:	2280      	movs	r2, #128	; 0x80
 80037ae:	4619      	mov	r1, r3
 80037b0:	f00b faf8 	bl	800eda4 <memcpy>
 80037b4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80037b8:	f103 0310 	add.w	r3, r3, #16
 80037bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037be:	f7fe fd6b 	bl	8002298 <lsm6dso32SPIGyroData>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <sensor_framework+0x2c0>
					ret_status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80037ce:	f102 020b 	add.w	r2, r2, #11
 80037d2:	7013      	strb	r3, [r2, #0]
				RTCTimestamp(time_stamp, date_stamp, RTC_Periph1);
 80037d4:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 80037d8:	f107 0670 	add.w	r6, r7, #112	; 0x70
 80037dc:	3e14      	subs	r6, #20
 80037de:	466d      	mov	r5, sp
 80037e0:	f507 54a4 	add.w	r4, r7, #5248	; 0x1480
 80037e4:	f104 0414 	add.w	r4, r4, #20
 80037e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80037f8:	f507 53a4 	add.w	r3, r7, #5248	; 0x1480
 80037fc:	f103 030c 	add.w	r3, r3, #12
 8003800:	cb0c      	ldmia	r3, {r2, r3}
 8003802:	4661      	mov	r1, ip
 8003804:	4630      	mov	r0, r6
 8003806:	f7ff fdfd 	bl	8003404 <RTCTimestamp>

				/*Increment the local buffer by 8 [Each data packet is 64 bytes]*/
				if (dataIndex == MAX_BUFFER_SIZE)
 800380a:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <sensor_framework+0x3ac>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003812:	d102      	bne.n	800381a <sensor_framework+0x306>
					dataIndex = 0;
 8003814:	4b2a      	ldr	r3, [pc, #168]	; (80038c0 <sensor_framework+0x3ac>)
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
				memset(&data_buffer[dataIndex] , 0,
 800381a:	4b29      	ldr	r3, [pc, #164]	; (80038c0 <sensor_framework+0x3ac>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003822:	3b08      	subs	r3, #8
 8003824:	0092      	lsls	r2, r2, #2
 8003826:	4413      	add	r3, r2
 8003828:	2240      	movs	r2, #64	; 0x40
 800382a:	2100      	movs	r1, #0
 800382c:	4618      	mov	r0, r3
 800382e:	f00b fac6 	bl	800edbe <memset>
						DATA_LEN * sizeof(data_buffer[dataIndex]));
				sprintf((char *)&data_buffer[dataIndex],"%s LSM632 A:%.3d,%.3d,%.3d "
 8003832:	4b23      	ldr	r3, [pc, #140]	; (80038c0 <sensor_framework+0x3ac>)
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800383a:	3b08      	subs	r3, #8
 800383c:	0092      	lsls	r2, r2, #2
 800383e:	1898      	adds	r0, r3, r2
						"G:%.3d,%.3d,%.3d\r\n",
						time_stamp , temp_acc1[0], temp_acc1[1] , temp_acc1[2],
 8003840:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003844:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
				sprintf((char *)&data_buffer[dataIndex],"%s LSM632 A:%.3d,%.3d,%.3d "
 8003848:	469c      	mov	ip, r3
						time_stamp , temp_acc1[0], temp_acc1[1] , temp_acc1[2],
 800384a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800384e:	f933 3c2a 	ldrsh.w	r3, [r3, #-42]
 8003852:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003856:	f932 2c28 	ldrsh.w	r2, [r2, #-40]
				sprintf((char *)&data_buffer[dataIndex],"%s LSM632 A:%.3d,%.3d,%.3d "
 800385a:	4611      	mov	r1, r2
						temp_gyro1[0], temp_gyro1[1], temp_gyro1[2]);
 800385c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003860:	f932 2c34 	ldrsh.w	r2, [r2, #-52]
				sprintf((char *)&data_buffer[dataIndex],"%s LSM632 A:%.3d,%.3d,%.3d "
 8003864:	4614      	mov	r4, r2
						temp_gyro1[0], temp_gyro1[1], temp_gyro1[2]);
 8003866:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800386a:	f932 2c32 	ldrsh.w	r2, [r2, #-50]
				sprintf((char *)&data_buffer[dataIndex],"%s LSM632 A:%.3d,%.3d,%.3d "
 800386e:	4615      	mov	r5, r2
						temp_gyro1[0], temp_gyro1[1], temp_gyro1[2]);
 8003870:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003874:	f932 2c30 	ldrsh.w	r2, [r2, #-48]
				sprintf((char *)&data_buffer[dataIndex],"%s LSM632 A:%.3d,%.3d,%.3d "
 8003878:	4616      	mov	r6, r2
 800387a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800387e:	3a14      	subs	r2, #20
 8003880:	9604      	str	r6, [sp, #16]
 8003882:	9503      	str	r5, [sp, #12]
 8003884:	9402      	str	r4, [sp, #8]
 8003886:	9101      	str	r1, [sp, #4]
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	4663      	mov	r3, ip
 800388c:	490e      	ldr	r1, [pc, #56]	; (80038c8 <sensor_framework+0x3b4>)
 800388e:	f00b ff0b 	bl	800f6a8 <siprintf>
				HAL_UART_Transmit(&UART_Periph1,(uint8_t *)&data_buffer[dataIndex],
 8003892:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <sensor_framework+0x3ac>)
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800389a:	3b08      	subs	r3, #8
 800389c:	0092      	lsls	r2, r2, #2
 800389e:	1899      	adds	r1, r3, r2
 80038a0:	f507 509f 	add.w	r0, r7, #5088	; 0x13e0
 80038a4:	f100 001c 	add.w	r0, r0, #28
 80038a8:	2364      	movs	r3, #100	; 0x64
 80038aa:	2240      	movs	r2, #64	; 0x40
 80038ac:	f00a fd50 	bl	800e350 <HAL_UART_Transmit>
						DATA_LEN * sizeof(data_buffer[dataIndex]), 100);

				/*Increment the local buffer by 8 [Each data packet is 64 bytes]*/
				dataIndex += DATA_LEN;
 80038b0:	4b03      	ldr	r3, [pc, #12]	; (80038c0 <sensor_framework+0x3ac>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3310      	adds	r3, #16
 80038b6:	4a02      	ldr	r2, [pc, #8]	; (80038c0 <sensor_framework+0x3ac>)
 80038b8:	6013      	str	r3, [r2, #0]
				//				if (dataIndex == MAX_BUFFER_SIZE)
				//					dataIndex = 0;

				break;
 80038ba:	e09e      	b.n	80039fa <sensor_framework+0x4e6>
 80038bc:	20000648 	.word	0x20000648
 80038c0:	20000658 	.word	0x20000658
 80038c4:	08011c18 	.word	0x08011c18
 80038c8:	08011c2c 	.word	0x08011c2c
			case SPI_sensor_3:
				//				temp = (a.data_rdy_reg & SPI_sensor_4);
				//				sensor_no = nextSensor(temp , SPI_sensor_4 , SPI_sensor_4 , a.data_rdy_reg);

				/*Fetch next data-ready and clear the data ready flag*/
				sensor_no = SEQ_DONE;
 80038cc:	2300      	movs	r3, #0
 80038ce:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80038d2:	f102 020c 	add.w	r2, r2, #12
 80038d6:	6013      	str	r3, [r2, #0]
				a.data_rdy_reg &= ~SPI_sensor_3;
 80038d8:	4b81      	ldr	r3, [pc, #516]	; (8003ae0 <sensor_framework+0x5cc>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f023 0304 	bic.w	r3, r3, #4
 80038e0:	4a7f      	ldr	r2, [pc, #508]	; (8003ae0 <sensor_framework+0x5cc>)
 80038e2:	6013      	str	r3, [r2, #0]

				/*Get data from the sensor and the current timestamp*/
				int16_t temp_acc2[3];
				if (HAL_OK != adxl375SPIAccData(SPI_Periph3, temp_acc2))
 80038e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80038e8:	3b1c      	subs	r3, #28
 80038ea:	9320      	str	r3, [sp, #128]	; 0x80
 80038ec:	4668      	mov	r0, sp
 80038ee:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 80038f2:	f103 0310 	add.w	r3, r3, #16
 80038f6:	2280      	movs	r2, #128	; 0x80
 80038f8:	4619      	mov	r1, r3
 80038fa:	f00b fa53 	bl	800eda4 <memcpy>
 80038fe:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8003902:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003904:	f7fd fc2b 	bl	800115e <adxl375SPIAccData>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <sensor_framework+0x406>
					ret_status = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003914:	f102 020b 	add.w	r2, r2, #11
 8003918:	7013      	strb	r3, [r2, #0]
				RTCTimestamp(time_stamp, date_stamp, RTC_Periph1);
 800391a:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 800391e:	f107 0670 	add.w	r6, r7, #112	; 0x70
 8003922:	3e14      	subs	r6, #20
 8003924:	466d      	mov	r5, sp
 8003926:	f507 54a4 	add.w	r4, r7, #5248	; 0x1480
 800392a:	f104 0414 	add.w	r4, r4, #20
 800392e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003936:	e894 0003 	ldmia.w	r4, {r0, r1}
 800393a:	e885 0003 	stmia.w	r5, {r0, r1}
 800393e:	f507 53a4 	add.w	r3, r7, #5248	; 0x1480
 8003942:	f103 030c 	add.w	r3, r3, #12
 8003946:	cb0c      	ldmia	r3, {r2, r3}
 8003948:	4661      	mov	r1, ip
 800394a:	4630      	mov	r0, r6
 800394c:	f7ff fd5a 	bl	8003404 <RTCTimestamp>

				/*Store data into the local buffer and print it to UART*/
				if (dataIndex == MAX_BUFFER_SIZE)
 8003950:	4b64      	ldr	r3, [pc, #400]	; (8003ae4 <sensor_framework+0x5d0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003958:	d102      	bne.n	8003960 <sensor_framework+0x44c>
					dataIndex = 0;
 800395a:	4b62      	ldr	r3, [pc, #392]	; (8003ae4 <sensor_framework+0x5d0>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
				memset(&data_buffer[dataIndex] , 0,
 8003960:	4b60      	ldr	r3, [pc, #384]	; (8003ae4 <sensor_framework+0x5d0>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003968:	3b08      	subs	r3, #8
 800396a:	0092      	lsls	r2, r2, #2
 800396c:	4413      	add	r3, r2
 800396e:	2240      	movs	r2, #64	; 0x40
 8003970:	2100      	movs	r1, #0
 8003972:	4618      	mov	r0, r3
 8003974:	f00b fa23 	bl	800edbe <memset>
						DATA_LEN * sizeof(data_buffer[dataIndex]));
				sprintf((char *)&data_buffer[dataIndex],"%s AD375 A:%.3d,%.3d,%.3d\r\n",
 8003978:	4b5a      	ldr	r3, [pc, #360]	; (8003ae4 <sensor_framework+0x5d0>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003980:	3b08      	subs	r3, #8
 8003982:	0092      	lsls	r2, r2, #2
 8003984:	1898      	adds	r0, r3, r2
						time_stamp , temp_acc2[0], temp_acc2[1] , temp_acc2[2]);
 8003986:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800398a:	f933 3c3c 	ldrsh.w	r3, [r3, #-60]
				sprintf((char *)&data_buffer[dataIndex],"%s AD375 A:%.3d,%.3d,%.3d\r\n",
 800398e:	461c      	mov	r4, r3
						time_stamp , temp_acc2[0], temp_acc2[1] , temp_acc2[2]);
 8003990:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003994:	f933 3c3a 	ldrsh.w	r3, [r3, #-58]
 8003998:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800399c:	f932 2c38 	ldrsh.w	r2, [r2, #-56]
				sprintf((char *)&data_buffer[dataIndex],"%s AD375 A:%.3d,%.3d,%.3d\r\n",
 80039a0:	4611      	mov	r1, r2
 80039a2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80039a6:	3a14      	subs	r2, #20
 80039a8:	9101      	str	r1, [sp, #4]
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	4623      	mov	r3, r4
 80039ae:	494e      	ldr	r1, [pc, #312]	; (8003ae8 <sensor_framework+0x5d4>)
 80039b0:	f00b fe7a 	bl	800f6a8 <siprintf>
				HAL_UART_Transmit(&UART_Periph1,(uint8_t *)&data_buffer[dataIndex],
 80039b4:	4b4b      	ldr	r3, [pc, #300]	; (8003ae4 <sensor_framework+0x5d0>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80039bc:	3b08      	subs	r3, #8
 80039be:	0092      	lsls	r2, r2, #2
 80039c0:	1899      	adds	r1, r3, r2
 80039c2:	f507 509f 	add.w	r0, r7, #5088	; 0x13e0
 80039c6:	f100 001c 	add.w	r0, r0, #28
 80039ca:	2364      	movs	r3, #100	; 0x64
 80039cc:	2240      	movs	r2, #64	; 0x40
 80039ce:	f00a fcbf 	bl	800e350 <HAL_UART_Transmit>
						DATA_LEN * sizeof(data_buffer[dataIndex]), 100);

				/*Increment the local buffer by 8 [Each data packet is 64 bytes]*/
				dataIndex += DATA_LEN;
 80039d2:	4b44      	ldr	r3, [pc, #272]	; (8003ae4 <sensor_framework+0x5d0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3310      	adds	r3, #16
 80039d8:	4a42      	ldr	r2, [pc, #264]	; (8003ae4 <sensor_framework+0x5d0>)
 80039da:	6013      	str	r3, [r2, #0]

				break;
 80039dc:	e00d      	b.n	80039fa <sensor_framework+0x4e6>

			case SPI_sensor_4:
				sensor_no = SEQ_DONE;
 80039de:	2300      	movs	r3, #0
 80039e0:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80039e4:	f102 020c 	add.w	r2, r2, #12
 80039e8:	6013      	str	r3, [r2, #0]
				//Attach time-stamp
				//Write data to local memory block[SRAM] using DMA
				break;
 80039ea:	e006      	b.n	80039fa <sensor_framework+0x4e6>

			default:
				//Not valid
				sensor_no = SEQ_DONE;
 80039ec:	2300      	movs	r3, #0
 80039ee:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80039f2:	f102 020c 	add.w	r2, r2, #12
 80039f6:	6013      	str	r3, [r2, #0]
				break;
 80039f8:	bf00      	nop
		while(sensor_no != SEQ_DONE)
 80039fa:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80039fe:	f103 030c 	add.w	r3, r3, #12
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f47f ade5 	bne.w	80035d4 <sensor_framework+0xc0>

		}


	case I2C_protocol:
		periph = I2S_protocol;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003a10:	f102 020a 	add.w	r2, r2, #10
 8003a14:	7013      	strb	r3, [r2, #0]

		sensor_no = (a.data_rdy_reg & I2C_sensor_1);
 8003a16:	4b32      	ldr	r3, [pc, #200]	; (8003ae0 <sensor_framework+0x5cc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0310 	and.w	r3, r3, #16
 8003a1e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003a22:	f102 020c 	add.w	r2, r2, #12
 8003a26:	6013      	str	r3, [r2, #0]

		if(sensor_no == 0)
 8003a28:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003a2c:	f103 030c 	add.w	r3, r3, #12
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f040 83f5 	bne.w	8004222 <sensor_framework+0xd0e>
			sensor_no = nextSensor(sensor_no, I2C_sensor_1 , I2C_sensor_5 ,
 8003a38:	4b29      	ldr	r3, [pc, #164]	; (8003ae0 <sensor_framework+0x5cc>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a40:	2110      	movs	r1, #16
 8003a42:	f507 5083 	add.w	r0, r7, #4192	; 0x1060
 8003a46:	f100 000c 	add.w	r0, r0, #12
 8003a4a:	6800      	ldr	r0, [r0, #0]
 8003a4c:	f7ff fd34 	bl	80034b8 <nextSensor>
 8003a50:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003a54:	f103 030c 	add.w	r3, r3, #12
 8003a58:	6018      	str	r0, [r3, #0]
					a.data_rdy_reg);

		/*Continue looping till all the data ready are covered*/
		while(sensor_no != SEQ_DONE)
 8003a5a:	e3e2      	b.n	8004222 <sensor_framework+0xd0e>
 8003a5c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003a60:	f103 030c 	add.w	r3, r3, #12
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a6a:	f000 834f 	beq.w	800410c <sensor_framework+0xbf8>
 8003a6e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003a72:	f103 030c 	add.w	r3, r3, #12
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a7c:	f200 83ca 	bhi.w	8004214 <sensor_framework+0xd00>
 8003a80:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003a84:	f103 030c 	add.w	r3, r3, #12
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b80      	cmp	r3, #128	; 0x80
 8003a8c:	f000 827f 	beq.w	8003f8e <sensor_framework+0xa7a>
 8003a90:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003a94:	f103 030c 	add.w	r3, r3, #12
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b80      	cmp	r3, #128	; 0x80
 8003a9c:	f200 83ba 	bhi.w	8004214 <sensor_framework+0xd00>
 8003aa0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003aa4:	f103 030c 	add.w	r3, r3, #12
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b40      	cmp	r3, #64	; 0x40
 8003aac:	f000 81a2 	beq.w	8003df4 <sensor_framework+0x8e0>
 8003ab0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003ab4:	f103 030c 	add.w	r3, r3, #12
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b40      	cmp	r3, #64	; 0x40
 8003abc:	f200 83aa 	bhi.w	8004214 <sensor_framework+0xd00>
 8003ac0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003ac4:	f103 030c 	add.w	r3, r3, #12
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b10      	cmp	r3, #16
 8003acc:	d00e      	beq.n	8003aec <sensor_framework+0x5d8>
 8003ace:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003ad2:	f103 030c 	add.w	r3, r3, #12
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	f000 80dd 	beq.w	8003c98 <sensor_framework+0x784>
 8003ade:	e399      	b.n	8004214 <sensor_framework+0xd00>
 8003ae0:	20000648 	.word	0x20000648
 8003ae4:	20000658 	.word	0x20000658
 8003ae8:	08011c5c 	.word	0x08011c5c
		{
			switch(sensor_no)
			{
			case I2C_sensor_1:
				/*Fetch next data-ready and clear the data ready flag*/
				sensor_no = (a.data_rdy_reg & I2C_sensor_2);
 8003aec:	4bbd      	ldr	r3, [pc, #756]	; (8003de4 <sensor_framework+0x8d0>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0320 	and.w	r3, r3, #32
 8003af4:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003af8:	f102 020c 	add.w	r2, r2, #12
 8003afc:	6013      	str	r3, [r2, #0]
				a.data_rdy_reg &= ~I2C_sensor_1;
 8003afe:	4bb9      	ldr	r3, [pc, #740]	; (8003de4 <sensor_framework+0x8d0>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f023 0310 	bic.w	r3, r3, #16
 8003b06:	4ab7      	ldr	r2, [pc, #732]	; (8003de4 <sensor_framework+0x8d0>)
 8003b08:	6013      	str	r3, [r2, #0]
				sensor_no = nextSensor(sensor_no, I2C_sensor_2, I2C_sensor_5 ,
 8003b0a:	4bb6      	ldr	r3, [pc, #728]	; (8003de4 <sensor_framework+0x8d0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b12:	2120      	movs	r1, #32
 8003b14:	f507 5083 	add.w	r0, r7, #4192	; 0x1060
 8003b18:	f100 000c 	add.w	r0, r0, #12
 8003b1c:	6800      	ldr	r0, [r0, #0]
 8003b1e:	f7ff fccb 	bl	80034b8 <nextSensor>
 8003b22:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003b26:	f103 030c 	add.w	r3, r3, #12
 8003b2a:	6018      	str	r0, [r3, #0]
						a.data_rdy_reg);

				/*Get data from the sensor and the current timestamp*/
				int16_t temp_acc[3], temp_gyro[3];
				if (HAL_OK != lsm6dsoxI2CAccData(I2C_Periph1, temp_acc))
 8003b2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b30:	3b04      	subs	r3, #4
 8003b32:	930f      	str	r3, [sp, #60]	; 0x3c
 8003b34:	466d      	mov	r5, sp
 8003b36:	f507 5485 	add.w	r4, r7, #4256	; 0x10a0
 8003b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b46:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003b4a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003b4e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003b52:	f103 0310 	add.w	r3, r3, #16
 8003b56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b58:	f7fe fd3f 	bl	80025da <lsm6dsoxI2CAccData>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <sensor_framework+0x65a>
					ret_status = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003b68:	f102 020b 	add.w	r2, r2, #11
 8003b6c:	7013      	strb	r3, [r2, #0]
				if (HAL_OK != lsm6dsoxI2CGyroData(I2C_Periph1, temp_gyro))
 8003b6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b72:	3b0c      	subs	r3, #12
 8003b74:	930f      	str	r3, [sp, #60]	; 0x3c
 8003b76:	466d      	mov	r5, sp
 8003b78:	f507 5485 	add.w	r4, r7, #4256	; 0x10a0
 8003b7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b88:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003b8c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003b90:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003b94:	f103 0310 	add.w	r3, r3, #16
 8003b98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b9a:	f7fe fd60 	bl	800265e <lsm6dsoxI2CGyroData>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <sensor_framework+0x69c>
					ret_status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003baa:	f102 020b 	add.w	r2, r2, #11
 8003bae:	7013      	strb	r3, [r2, #0]
				RTCTimestamp(time_stamp, date_stamp, RTC_Periph1);
 8003bb0:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 8003bb4:	f107 0670 	add.w	r6, r7, #112	; 0x70
 8003bb8:	3e14      	subs	r6, #20
 8003bba:	466d      	mov	r5, sp
 8003bbc:	f507 54a4 	add.w	r4, r7, #5248	; 0x1480
 8003bc0:	f104 0414 	add.w	r4, r4, #20
 8003bc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bcc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bd0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bd4:	f507 53a4 	add.w	r3, r7, #5248	; 0x1480
 8003bd8:	f103 030c 	add.w	r3, r3, #12
 8003bdc:	cb0c      	ldmia	r3, {r2, r3}
 8003bde:	4661      	mov	r1, ip
 8003be0:	4630      	mov	r0, r6
 8003be2:	f7ff fc0f 	bl	8003404 <RTCTimestamp>

				/*Store data into the local buffer and print it to UART*/
				if (dataIndex == MAX_BUFFER_SIZE)
 8003be6:	4b80      	ldr	r3, [pc, #512]	; (8003de8 <sensor_framework+0x8d4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bee:	d102      	bne.n	8003bf6 <sensor_framework+0x6e2>
					dataIndex = 0;
 8003bf0:	4b7d      	ldr	r3, [pc, #500]	; (8003de8 <sensor_framework+0x8d4>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
				memset(&data_buffer[dataIndex] , 0,
 8003bf6:	4b7c      	ldr	r3, [pc, #496]	; (8003de8 <sensor_framework+0x8d4>)
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003bfe:	3b08      	subs	r3, #8
 8003c00:	0092      	lsls	r2, r2, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	2240      	movs	r2, #64	; 0x40
 8003c06:	2100      	movs	r1, #0
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f00b f8d8 	bl	800edbe <memset>
						DATA_LEN * sizeof(data_buffer[dataIndex]));
				sprintf((char *)&data_buffer[dataIndex],"%s LSM6X A:%.3d,%.3d,%.3d "
 8003c0e:	4b76      	ldr	r3, [pc, #472]	; (8003de8 <sensor_framework+0x8d4>)
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003c16:	3b08      	subs	r3, #8
 8003c18:	0092      	lsls	r2, r2, #2
 8003c1a:	1898      	adds	r0, r3, r2
						"G:%.3d,%.3d,%.3d\r\n",
						time_stamp , temp_acc[0], temp_acc[1] , temp_acc[2],
 8003c1c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003c20:	f933 3c44 	ldrsh.w	r3, [r3, #-68]
				sprintf((char *)&data_buffer[dataIndex],"%s LSM6X A:%.3d,%.3d,%.3d "
 8003c24:	469c      	mov	ip, r3
						time_stamp , temp_acc[0], temp_acc[1] , temp_acc[2],
 8003c26:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003c2a:	f933 3c42 	ldrsh.w	r3, [r3, #-66]
 8003c2e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003c32:	f932 2c40 	ldrsh.w	r2, [r2, #-64]
				sprintf((char *)&data_buffer[dataIndex],"%s LSM6X A:%.3d,%.3d,%.3d "
 8003c36:	4611      	mov	r1, r2
						temp_gyro[0], temp_gyro[1], temp_gyro[2]);
 8003c38:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003c3c:	f932 2c4c 	ldrsh.w	r2, [r2, #-76]
				sprintf((char *)&data_buffer[dataIndex],"%s LSM6X A:%.3d,%.3d,%.3d "
 8003c40:	4614      	mov	r4, r2
						temp_gyro[0], temp_gyro[1], temp_gyro[2]);
 8003c42:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003c46:	f932 2c4a 	ldrsh.w	r2, [r2, #-74]
				sprintf((char *)&data_buffer[dataIndex],"%s LSM6X A:%.3d,%.3d,%.3d "
 8003c4a:	4615      	mov	r5, r2
						temp_gyro[0], temp_gyro[1], temp_gyro[2]);
 8003c4c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003c50:	f932 2c48 	ldrsh.w	r2, [r2, #-72]
				sprintf((char *)&data_buffer[dataIndex],"%s LSM6X A:%.3d,%.3d,%.3d "
 8003c54:	4616      	mov	r6, r2
 8003c56:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003c5a:	3a14      	subs	r2, #20
 8003c5c:	9604      	str	r6, [sp, #16]
 8003c5e:	9503      	str	r5, [sp, #12]
 8003c60:	9402      	str	r4, [sp, #8]
 8003c62:	9101      	str	r1, [sp, #4]
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	4663      	mov	r3, ip
 8003c68:	4960      	ldr	r1, [pc, #384]	; (8003dec <sensor_framework+0x8d8>)
 8003c6a:	f00b fd1d 	bl	800f6a8 <siprintf>
				HAL_UART_Transmit(&UART_Periph1,(uint8_t *)&data_buffer[dataIndex],
 8003c6e:	4b5e      	ldr	r3, [pc, #376]	; (8003de8 <sensor_framework+0x8d4>)
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003c76:	3b08      	subs	r3, #8
 8003c78:	0092      	lsls	r2, r2, #2
 8003c7a:	1899      	adds	r1, r3, r2
 8003c7c:	f507 509f 	add.w	r0, r7, #5088	; 0x13e0
 8003c80:	f100 001c 	add.w	r0, r0, #28
 8003c84:	2364      	movs	r3, #100	; 0x64
 8003c86:	2240      	movs	r2, #64	; 0x40
 8003c88:	f00a fb62 	bl	800e350 <HAL_UART_Transmit>
						DATA_LEN * sizeof(data_buffer[dataIndex]), 100);

				//Increment the local buffer by 8 [Each data packet is 64 bytes]
				dataIndex += DATA_LEN;
 8003c8c:	4b56      	ldr	r3, [pc, #344]	; (8003de8 <sensor_framework+0x8d4>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3310      	adds	r3, #16
 8003c92:	4a55      	ldr	r2, [pc, #340]	; (8003de8 <sensor_framework+0x8d4>)
 8003c94:	6013      	str	r3, [r2, #0]
				//				if (dataIndex == MAX_BUFFER_SIZE)
				//					dataIndex = 0;
				//Attach time-stamp [RTC function]
				//Write to the local memory block[SRAM] using DMA
				break;
 8003c96:	e2c4      	b.n	8004222 <sensor_framework+0xd0e>

			case I2C_sensor_2:
				/*Fetch next data-ready and clear the data ready flag*/
				sensor_no = (a.data_rdy_reg & I2C_sensor_3);
 8003c98:	4b52      	ldr	r3, [pc, #328]	; (8003de4 <sensor_framework+0x8d0>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca0:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003ca4:	f102 020c 	add.w	r2, r2, #12
 8003ca8:	6013      	str	r3, [r2, #0]
				a.data_rdy_reg &= ~I2C_sensor_1;
 8003caa:	4b4e      	ldr	r3, [pc, #312]	; (8003de4 <sensor_framework+0x8d0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f023 0310 	bic.w	r3, r3, #16
 8003cb2:	4a4c      	ldr	r2, [pc, #304]	; (8003de4 <sensor_framework+0x8d0>)
 8003cb4:	6013      	str	r3, [r2, #0]
				sensor_no = nextSensor(sensor_no, I2C_sensor_3, I2C_sensor_5 ,
 8003cb6:	4b4b      	ldr	r3, [pc, #300]	; (8003de4 <sensor_framework+0x8d0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cbe:	2140      	movs	r1, #64	; 0x40
 8003cc0:	f507 5083 	add.w	r0, r7, #4192	; 0x1060
 8003cc4:	f100 000c 	add.w	r0, r0, #12
 8003cc8:	6800      	ldr	r0, [r0, #0]
 8003cca:	f7ff fbf5 	bl	80034b8 <nextSensor>
 8003cce:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003cd2:	f103 030c 	add.w	r3, r3, #12
 8003cd6:	6018      	str	r0, [r3, #0]
						a.data_rdy_reg);

				/*Get data from the sensor and the current timestamp*/
				int16_t temp_mag[3];
				if (HAL_OK != lis3mdlMagneticData(temp_mag, I2C_Periph1))
 8003cd8:	f107 0630 	add.w	r6, r7, #48	; 0x30
 8003cdc:	3e14      	subs	r6, #20
 8003cde:	466d      	mov	r5, sp
 8003ce0:	f507 5484 	add.w	r4, r7, #4224	; 0x1080
 8003ce4:	f104 041c 	add.w	r4, r4, #28
 8003ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cf4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003cf8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003cfc:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003d00:	f103 0310 	add.w	r3, r3, #16
 8003d04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d06:	4630      	mov	r0, r6
 8003d08:	f7fd ff60 	bl	8001bcc <lis3mdlMagneticData>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d005      	beq.n	8003d1e <sensor_framework+0x80a>
					ret_status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003d18:	f102 020b 	add.w	r2, r2, #11
 8003d1c:	7013      	strb	r3, [r2, #0]
				RTCTimestamp(time_stamp, date_stamp, RTC_Periph1);
 8003d1e:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 8003d22:	f107 0670 	add.w	r6, r7, #112	; 0x70
 8003d26:	3e14      	subs	r6, #20
 8003d28:	466d      	mov	r5, sp
 8003d2a:	f507 54a4 	add.w	r4, r7, #5248	; 0x1480
 8003d2e:	f104 0414 	add.w	r4, r4, #20
 8003d32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d42:	f507 53a4 	add.w	r3, r7, #5248	; 0x1480
 8003d46:	f103 030c 	add.w	r3, r3, #12
 8003d4a:	cb0c      	ldmia	r3, {r2, r3}
 8003d4c:	4661      	mov	r1, ip
 8003d4e:	4630      	mov	r0, r6
 8003d50:	f7ff fb58 	bl	8003404 <RTCTimestamp>

				/*Store data into the local buffer and print it to UART*/
				if (dataIndex == MAX_BUFFER_SIZE)
 8003d54:	4b24      	ldr	r3, [pc, #144]	; (8003de8 <sensor_framework+0x8d4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d5c:	d102      	bne.n	8003d64 <sensor_framework+0x850>
					dataIndex = 0;
 8003d5e:	4b22      	ldr	r3, [pc, #136]	; (8003de8 <sensor_framework+0x8d4>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
				memset(&data_buffer[dataIndex] , 0,
 8003d64:	4b20      	ldr	r3, [pc, #128]	; (8003de8 <sensor_framework+0x8d4>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003d6c:	3b08      	subs	r3, #8
 8003d6e:	0092      	lsls	r2, r2, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	2240      	movs	r2, #64	; 0x40
 8003d74:	2100      	movs	r1, #0
 8003d76:	4618      	mov	r0, r3
 8003d78:	f00b f821 	bl	800edbe <memset>
						DATA_LEN * sizeof(data_buffer[dataIndex]));
				sprintf((char *)&data_buffer[dataIndex],"%s LIS3M M:%.3d,%.3d,%.3d\r\n",
 8003d7c:	4b1a      	ldr	r3, [pc, #104]	; (8003de8 <sensor_framework+0x8d4>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003d84:	3b08      	subs	r3, #8
 8003d86:	0092      	lsls	r2, r2, #2
 8003d88:	1898      	adds	r0, r3, r2
						time_stamp , temp_mag[0] ,
 8003d8a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003d8e:	f933 3c54 	ldrsh.w	r3, [r3, #-84]
				sprintf((char *)&data_buffer[dataIndex],"%s LIS3M M:%.3d,%.3d,%.3d\r\n",
 8003d92:	461c      	mov	r4, r3
						temp_mag[1] , temp_mag[2]);
 8003d94:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003d98:	f933 3c52 	ldrsh.w	r3, [r3, #-82]
 8003d9c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003da0:	f932 2c50 	ldrsh.w	r2, [r2, #-80]
				sprintf((char *)&data_buffer[dataIndex],"%s LIS3M M:%.3d,%.3d,%.3d\r\n",
 8003da4:	4611      	mov	r1, r2
 8003da6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003daa:	3a14      	subs	r2, #20
 8003dac:	9101      	str	r1, [sp, #4]
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	4623      	mov	r3, r4
 8003db2:	490f      	ldr	r1, [pc, #60]	; (8003df0 <sensor_framework+0x8dc>)
 8003db4:	f00b fc78 	bl	800f6a8 <siprintf>
				HAL_UART_Transmit(&UART_Periph1,(uint8_t *)&data_buffer[dataIndex],
 8003db8:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <sensor_framework+0x8d4>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003dc0:	3b08      	subs	r3, #8
 8003dc2:	0092      	lsls	r2, r2, #2
 8003dc4:	1899      	adds	r1, r3, r2
 8003dc6:	f507 509f 	add.w	r0, r7, #5088	; 0x13e0
 8003dca:	f100 001c 	add.w	r0, r0, #28
 8003dce:	2364      	movs	r3, #100	; 0x64
 8003dd0:	2240      	movs	r2, #64	; 0x40
 8003dd2:	f00a fabd 	bl	800e350 <HAL_UART_Transmit>
						DATA_LEN * sizeof(data_buffer[dataIndex]), 100);

				/*Increment the local buffer by 8 [Each data packet is 64 bytes]*/
				dataIndex += DATA_LEN;
 8003dd6:	4b04      	ldr	r3, [pc, #16]	; (8003de8 <sensor_framework+0x8d4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3310      	adds	r3, #16
 8003ddc:	4a02      	ldr	r2, [pc, #8]	; (8003de8 <sensor_framework+0x8d4>)
 8003dde:	6013      	str	r3, [r2, #0]
				//				if (dataIndex == MAX_BUFFER_SIZE)
				//					dataIndex = 0;

				//Attach time-stamp [RTC function]
				//Write to the local memory block[SRAM] using DMA
				break;
 8003de0:	e21f      	b.n	8004222 <sensor_framework+0xd0e>
 8003de2:	bf00      	nop
 8003de4:	20000648 	.word	0x20000648
 8003de8:	20000658 	.word	0x20000658
 8003dec:	08011c78 	.word	0x08011c78
 8003df0:	08011ca8 	.word	0x08011ca8

			case I2C_sensor_3:
				/*Fetch next data-ready and clear the data ready flag*/
				sensor_no = (a.data_rdy_reg & I2C_sensor_4);
 8003df4:	4bc1      	ldr	r3, [pc, #772]	; (80040fc <sensor_framework+0xbe8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfc:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003e00:	f102 020c 	add.w	r2, r2, #12
 8003e04:	6013      	str	r3, [r2, #0]
				a.data_rdy_reg &= ~I2C_sensor_3;
 8003e06:	4bbd      	ldr	r3, [pc, #756]	; (80040fc <sensor_framework+0xbe8>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e0e:	4abb      	ldr	r2, [pc, #748]	; (80040fc <sensor_framework+0xbe8>)
 8003e10:	6013      	str	r3, [r2, #0]
				sensor_no = nextSensor(sensor_no, I2C_sensor_4, I2C_sensor_5 ,
 8003e12:	4bba      	ldr	r3, [pc, #744]	; (80040fc <sensor_framework+0xbe8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e1a:	2180      	movs	r1, #128	; 0x80
 8003e1c:	f507 5083 	add.w	r0, r7, #4192	; 0x1060
 8003e20:	f100 000c 	add.w	r0, r0, #12
 8003e24:	6800      	ldr	r0, [r0, #0]
 8003e26:	f7ff fb47 	bl	80034b8 <nextSensor>
 8003e2a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003e2e:	f103 030c 	add.w	r3, r3, #12
 8003e32:	6018      	str	r0, [r3, #0]
						a.data_rdy_reg);

				/*Get data from the sensor and the current timestamp*/
				float tempC, hum_RH;
				if (HAL_OK != aht20TempData(&tempC ,I2C_Periph2))
 8003e34:	f107 0630 	add.w	r6, r7, #48	; 0x30
 8003e38:	3e18      	subs	r6, #24
 8003e3a:	466d      	mov	r5, sp
 8003e3c:	f507 5487 	add.w	r4, r7, #4320	; 0x10e0
 8003e40:	f104 0408 	add.w	r4, r4, #8
 8003e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e50:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003e54:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003e58:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8003e5c:	f103 031c 	add.w	r3, r3, #28
 8003e60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e62:	4630      	mov	r0, r6
 8003e64:	f7fd faee 	bl	8001444 <aht20TempData>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d005      	beq.n	8003e7a <sensor_framework+0x966>
					ret_status = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003e74:	f102 020b 	add.w	r2, r2, #11
 8003e78:	7013      	strb	r3, [r2, #0]
				if (HAL_OK != aht20HumidityData(&hum_RH, I2C_Periph2))
 8003e7a:	f107 0630 	add.w	r6, r7, #48	; 0x30
 8003e7e:	3e1c      	subs	r6, #28
 8003e80:	466d      	mov	r5, sp
 8003e82:	f507 5487 	add.w	r4, r7, #4320	; 0x10e0
 8003e86:	f104 0408 	add.w	r4, r4, #8
 8003e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003e9a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003e9e:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8003ea2:	f103 031c 	add.w	r3, r3, #28
 8003ea6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ea8:	4630      	mov	r0, r6
 8003eaa:	f7fd fb1d 	bl	80014e8 <aht20HumidityData>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <sensor_framework+0x9ac>
					ret_status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003eba:	f102 020b 	add.w	r2, r2, #11
 8003ebe:	7013      	strb	r3, [r2, #0]
				RTCTimestamp(time_stamp, date_stamp, RTC_Periph1);
 8003ec0:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 8003ec4:	f107 0670 	add.w	r6, r7, #112	; 0x70
 8003ec8:	3e14      	subs	r6, #20
 8003eca:	466d      	mov	r5, sp
 8003ecc:	f507 54a4 	add.w	r4, r7, #5248	; 0x1480
 8003ed0:	f104 0414 	add.w	r4, r4, #20
 8003ed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ed6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003edc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ee0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ee4:	f507 53a4 	add.w	r3, r7, #5248	; 0x1480
 8003ee8:	f103 030c 	add.w	r3, r3, #12
 8003eec:	cb0c      	ldmia	r3, {r2, r3}
 8003eee:	4661      	mov	r1, ip
 8003ef0:	4630      	mov	r0, r6
 8003ef2:	f7ff fa87 	bl	8003404 <RTCTimestamp>

				/*Store data into the local buffer and print it to UART*/
				if (dataIndex == MAX_BUFFER_SIZE)
 8003ef6:	4b82      	ldr	r3, [pc, #520]	; (8004100 <sensor_framework+0xbec>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efe:	d102      	bne.n	8003f06 <sensor_framework+0x9f2>
					dataIndex = 0;
 8003f00:	4b7f      	ldr	r3, [pc, #508]	; (8004100 <sensor_framework+0xbec>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]
				memset(&data_buffer[dataIndex] , 0,
 8003f06:	4b7e      	ldr	r3, [pc, #504]	; (8004100 <sensor_framework+0xbec>)
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f0e:	3b08      	subs	r3, #8
 8003f10:	0092      	lsls	r2, r2, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	2240      	movs	r2, #64	; 0x40
 8003f16:	2100      	movs	r1, #0
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f00a ff50 	bl	800edbe <memset>
						DATA_LEN * sizeof(data_buffer[dataIndex]));
				sprintf((char *)&data_buffer[dataIndex],"%s AHT20 T:%.2f H:%.2f\r\n",
 8003f1e:	4b78      	ldr	r3, [pc, #480]	; (8004100 <sensor_framework+0xbec>)
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f26:	3b08      	subs	r3, #8
 8003f28:	0092      	lsls	r2, r2, #2
 8003f2a:	189e      	adds	r6, r3, r2
 8003f2c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f30:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fc fb0b 	bl	8000550 <__aeabi_f2d>
 8003f3a:	4604      	mov	r4, r0
 8003f3c:	460d      	mov	r5, r1
 8003f3e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f42:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fc fb02 	bl	8000550 <__aeabi_f2d>
 8003f4c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f50:	3b14      	subs	r3, #20
 8003f52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f56:	e9cd 4500 	strd	r4, r5, [sp]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	4969      	ldr	r1, [pc, #420]	; (8004104 <sensor_framework+0xbf0>)
 8003f5e:	4630      	mov	r0, r6
 8003f60:	f00b fba2 	bl	800f6a8 <siprintf>
						time_stamp , tempC , hum_RH);
				HAL_UART_Transmit(&UART_Periph1,(uint8_t *)&data_buffer[dataIndex],
 8003f64:	4b66      	ldr	r3, [pc, #408]	; (8004100 <sensor_framework+0xbec>)
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f6c:	3b08      	subs	r3, #8
 8003f6e:	0092      	lsls	r2, r2, #2
 8003f70:	1899      	adds	r1, r3, r2
 8003f72:	f507 509f 	add.w	r0, r7, #5088	; 0x13e0
 8003f76:	f100 001c 	add.w	r0, r0, #28
 8003f7a:	2364      	movs	r3, #100	; 0x64
 8003f7c:	2240      	movs	r2, #64	; 0x40
 8003f7e:	f00a f9e7 	bl	800e350 <HAL_UART_Transmit>
						DATA_LEN * sizeof(data_buffer[dataIndex]), 100);

				/*Increment the local buffer by 8 [Each data packet is 64 bytes]*/
				dataIndex += DATA_LEN;
 8003f82:	4b5f      	ldr	r3, [pc, #380]	; (8004100 <sensor_framework+0xbec>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3310      	adds	r3, #16
 8003f88:	4a5d      	ldr	r2, [pc, #372]	; (8004100 <sensor_framework+0xbec>)
 8003f8a:	6013      	str	r3, [r2, #0]
				//				if (dataIndex == MAX_BUFFER_SIZE)
				//					dataIndex = 0;

				//Attach time-stamp [RTC function]
				//Write to the local memory block[SRAM] using DMA
				break;
 8003f8c:	e149      	b.n	8004222 <sensor_framework+0xd0e>

			case I2C_sensor_4:
				/*Fetch next data-ready and clear the data ready flag*/
				sensor_no = (a.data_rdy_reg & I2C_sensor_5);
 8003f8e:	4b5b      	ldr	r3, [pc, #364]	; (80040fc <sensor_framework+0xbe8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f96:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003f9a:	f102 020c 	add.w	r2, r2, #12
 8003f9e:	6013      	str	r3, [r2, #0]
				a.data_rdy_reg &= ~I2C_sensor_4;
 8003fa0:	4b56      	ldr	r3, [pc, #344]	; (80040fc <sensor_framework+0xbe8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fa8:	4a54      	ldr	r2, [pc, #336]	; (80040fc <sensor_framework+0xbe8>)
 8003faa:	6013      	str	r3, [r2, #0]
				sensor_no = nextSensor(sensor_no, I2C_sensor_5, I2C_sensor_5 ,
 8003fac:	4b53      	ldr	r3, [pc, #332]	; (80040fc <sensor_framework+0xbe8>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fb8:	f507 5083 	add.w	r0, r7, #4192	; 0x1060
 8003fbc:	f100 000c 	add.w	r0, r0, #12
 8003fc0:	6800      	ldr	r0, [r0, #0]
 8003fc2:	f7ff fa79 	bl	80034b8 <nextSensor>
 8003fc6:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003fca:	f103 030c 	add.w	r3, r3, #12
 8003fce:	6018      	str	r0, [r3, #0]
						a.data_rdy_reg);

				/*Get data from the sensor and the current timestamp*/
				float temp_mag2[3];
				if (HAL_OK != lis2mdlMagneticData(temp_mag2, I2C_Periph3))
 8003fd0:	f107 0610 	add.w	r6, r7, #16
 8003fd4:	3e08      	subs	r6, #8
 8003fd6:	466d      	mov	r5, sp
 8003fd8:	f507 5489 	add.w	r4, r7, #4384	; 0x1120
 8003fdc:	f104 0414 	add.w	r4, r4, #20
 8003fe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fe4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fe6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fe8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003ff0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003ff4:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8003ff8:	f103 0308 	add.w	r3, r3, #8
 8003ffc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ffe:	4630      	mov	r0, r6
 8004000:	f7fd fc8d 	bl	800191e <lis2mdlMagneticData>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d005      	beq.n	8004016 <sensor_framework+0xb02>
					ret_status = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8004010:	f102 020b 	add.w	r2, r2, #11
 8004014:	7013      	strb	r3, [r2, #0]
				RTCTimestamp(time_stamp, date_stamp, RTC_Periph1);
 8004016:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 800401a:	f107 0670 	add.w	r6, r7, #112	; 0x70
 800401e:	3e14      	subs	r6, #20
 8004020:	466d      	mov	r5, sp
 8004022:	f507 54a4 	add.w	r4, r7, #5248	; 0x1480
 8004026:	f104 0414 	add.w	r4, r4, #20
 800402a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800402c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800402e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004032:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004036:	e885 0003 	stmia.w	r5, {r0, r1}
 800403a:	f507 53a4 	add.w	r3, r7, #5248	; 0x1480
 800403e:	f103 030c 	add.w	r3, r3, #12
 8004042:	cb0c      	ldmia	r3, {r2, r3}
 8004044:	4661      	mov	r1, ip
 8004046:	4630      	mov	r0, r6
 8004048:	f7ff f9dc 	bl	8003404 <RTCTimestamp>

				/*Store data into the local buffer and print it to UART*/
				if (dataIndex == MAX_BUFFER_SIZE)
 800404c:	4b2c      	ldr	r3, [pc, #176]	; (8004100 <sensor_framework+0xbec>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004054:	d102      	bne.n	800405c <sensor_framework+0xb48>
					dataIndex = 0;
 8004056:	4b2a      	ldr	r3, [pc, #168]	; (8004100 <sensor_framework+0xbec>)
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]
				memset(&data_buffer[dataIndex] , 0,
 800405c:	4b28      	ldr	r3, [pc, #160]	; (8004100 <sensor_framework+0xbec>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004064:	3b08      	subs	r3, #8
 8004066:	0092      	lsls	r2, r2, #2
 8004068:	4413      	add	r3, r2
 800406a:	2240      	movs	r2, #64	; 0x40
 800406c:	2100      	movs	r1, #0
 800406e:	4618      	mov	r0, r3
 8004070:	f00a fea5 	bl	800edbe <memset>
						DATA_LEN * sizeof(data_buffer[dataIndex]));
				sprintf((char *)&data_buffer[dataIndex],"%s LIS2M M:%.3f,%.3f,%.3f\r\n",
 8004074:	4b22      	ldr	r3, [pc, #136]	; (8004100 <sensor_framework+0xbec>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800407c:	3b08      	subs	r3, #8
 800407e:	0092      	lsls	r2, r2, #2
 8004080:	189e      	adds	r6, r3, r2
						time_stamp , temp_mag2[0] ,
 8004082:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004086:	f853 3c68 	ldr.w	r3, [r3, #-104]
				sprintf((char *)&data_buffer[dataIndex],"%s LIS2M M:%.3f,%.3f,%.3f\r\n",
 800408a:	4618      	mov	r0, r3
 800408c:	f7fc fa60 	bl	8000550 <__aeabi_f2d>
 8004090:	4604      	mov	r4, r0
 8004092:	460d      	mov	r5, r1
						temp_mag2[1] , temp_mag2[2]);
 8004094:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004098:	f853 3c64 	ldr.w	r3, [r3, #-100]
				sprintf((char *)&data_buffer[dataIndex],"%s LIS2M M:%.3f,%.3f,%.3f\r\n",
 800409c:	4618      	mov	r0, r3
 800409e:	f7fc fa57 	bl	8000550 <__aeabi_f2d>
 80040a2:	4680      	mov	r8, r0
 80040a4:	4689      	mov	r9, r1
						temp_mag2[1] , temp_mag2[2]);
 80040a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80040aa:	f853 3c60 	ldr.w	r3, [r3, #-96]
				sprintf((char *)&data_buffer[dataIndex],"%s LIS2M M:%.3f,%.3f,%.3f\r\n",
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fc fa4e 	bl	8000550 <__aeabi_f2d>
 80040b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80040b8:	3b14      	subs	r3, #20
 80040ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040be:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80040c2:	e9cd 4500 	strd	r4, r5, [sp]
 80040c6:	461a      	mov	r2, r3
 80040c8:	490f      	ldr	r1, [pc, #60]	; (8004108 <sensor_framework+0xbf4>)
 80040ca:	4630      	mov	r0, r6
 80040cc:	f00b faec 	bl	800f6a8 <siprintf>
				HAL_UART_Transmit(&UART_Periph1,(uint8_t *)&data_buffer[dataIndex],
 80040d0:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <sensor_framework+0xbec>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80040d8:	3b08      	subs	r3, #8
 80040da:	0092      	lsls	r2, r2, #2
 80040dc:	1899      	adds	r1, r3, r2
 80040de:	f507 509f 	add.w	r0, r7, #5088	; 0x13e0
 80040e2:	f100 001c 	add.w	r0, r0, #28
 80040e6:	2364      	movs	r3, #100	; 0x64
 80040e8:	2240      	movs	r2, #64	; 0x40
 80040ea:	f00a f931 	bl	800e350 <HAL_UART_Transmit>
						DATA_LEN * sizeof(data_buffer[dataIndex]), 100);

				/*Increment the local buffer by 8 [Each data packet is 64 bytes]*/
				dataIndex += DATA_LEN;
 80040ee:	4b04      	ldr	r3, [pc, #16]	; (8004100 <sensor_framework+0xbec>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3310      	adds	r3, #16
 80040f4:	4a02      	ldr	r2, [pc, #8]	; (8004100 <sensor_framework+0xbec>)
 80040f6:	6013      	str	r3, [r2, #0]
				//				if (dataIndex == MAX_BUFFER_SIZE)
				//					dataIndex = 0;
				//Attach time-stamp [RTC function]
				//Write to the local memory block[SRAM] using DMA
				break;
 80040f8:	e093      	b.n	8004222 <sensor_framework+0xd0e>
 80040fa:	bf00      	nop
 80040fc:	20000648 	.word	0x20000648
 8004100:	20000658 	.word	0x20000658
 8004104:	08011cc4 	.word	0x08011cc4
 8004108:	08011ce0 	.word	0x08011ce0

			case I2C_sensor_5:
				/*Fetch next data-ready and clear the data ready flag*/
				sensor_no = SEQ_DONE;
 800410c:	2300      	movs	r3, #0
 800410e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8004112:	f102 020c 	add.w	r2, r2, #12
 8004116:	6013      	str	r3, [r2, #0]
				a.data_rdy_reg &= ~I2C_sensor_5;
 8004118:	4b91      	ldr	r3, [pc, #580]	; (8004360 <sensor_framework+0xe4c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004120:	4a8f      	ldr	r2, [pc, #572]	; (8004360 <sensor_framework+0xe4c>)
 8004122:	6013      	str	r3, [r2, #0]

				/*Get data from the sensor and the current timestamp*/
				uint16_t temp_light;
				if (HAL_OK != bh1750LightData(I2C_Periph4, &temp_light))
 8004124:	f107 0310 	add.w	r3, r7, #16
 8004128:	3b0a      	subs	r3, #10
 800412a:	930f      	str	r3, [sp, #60]	; 0x3c
 800412c:	466d      	mov	r5, sp
 800412e:	f507 548c 	add.w	r4, r7, #4480	; 0x1180
 8004132:	f104 0404 	add.w	r4, r4, #4
 8004136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004138:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800413a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800413c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800413e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004140:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004142:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004146:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800414a:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 800414e:	f103 0314 	add.w	r3, r3, #20
 8004152:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004154:	f7fd fa3c 	bl	80015d0 <bh1750LightData>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d005      	beq.n	800416a <sensor_framework+0xc56>
					ret_status = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8004164:	f102 020b 	add.w	r2, r2, #11
 8004168:	7013      	strb	r3, [r2, #0]
				RTCTimestamp(time_stamp, date_stamp, RTC_Periph1);
 800416a:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 800416e:	f107 0670 	add.w	r6, r7, #112	; 0x70
 8004172:	3e14      	subs	r6, #20
 8004174:	466d      	mov	r5, sp
 8004176:	f507 54a4 	add.w	r4, r7, #5248	; 0x1480
 800417a:	f104 0414 	add.w	r4, r4, #20
 800417e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004180:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004184:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004186:	e894 0003 	ldmia.w	r4, {r0, r1}
 800418a:	e885 0003 	stmia.w	r5, {r0, r1}
 800418e:	f507 53a4 	add.w	r3, r7, #5248	; 0x1480
 8004192:	f103 030c 	add.w	r3, r3, #12
 8004196:	cb0c      	ldmia	r3, {r2, r3}
 8004198:	4661      	mov	r1, ip
 800419a:	4630      	mov	r0, r6
 800419c:	f7ff f932 	bl	8003404 <RTCTimestamp>

				/*Store data into the local buffer and print it to UART*/
				if (dataIndex == MAX_BUFFER_SIZE)
 80041a0:	4b70      	ldr	r3, [pc, #448]	; (8004364 <sensor_framework+0xe50>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a8:	d102      	bne.n	80041b0 <sensor_framework+0xc9c>
					dataIndex = 0;
 80041aa:	4b6e      	ldr	r3, [pc, #440]	; (8004364 <sensor_framework+0xe50>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
				memset(&data_buffer[dataIndex] , 0,
 80041b0:	4b6c      	ldr	r3, [pc, #432]	; (8004364 <sensor_framework+0xe50>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80041b8:	3b08      	subs	r3, #8
 80041ba:	0092      	lsls	r2, r2, #2
 80041bc:	4413      	add	r3, r2
 80041be:	2240      	movs	r2, #64	; 0x40
 80041c0:	2100      	movs	r1, #0
 80041c2:	4618      	mov	r0, r3
 80041c4:	f00a fdfb 	bl	800edbe <memset>
						DATA_LEN * sizeof(data_buffer[dataIndex]));
				sprintf((char *)&data_buffer[dataIndex],"%s BH175 L:%d\r\n",
 80041c8:	4b66      	ldr	r3, [pc, #408]	; (8004364 <sensor_framework+0xe50>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80041d0:	3b08      	subs	r3, #8
 80041d2:	0092      	lsls	r2, r2, #2
 80041d4:	1898      	adds	r0, r3, r2
 80041d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80041da:	f833 3c6a 	ldrh.w	r3, [r3, #-106]
 80041de:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80041e2:	3a14      	subs	r2, #20
 80041e4:	4960      	ldr	r1, [pc, #384]	; (8004368 <sensor_framework+0xe54>)
 80041e6:	f00b fa5f 	bl	800f6a8 <siprintf>
						time_stamp , temp_light);
				HAL_UART_Transmit(&UART_Periph1,(uint8_t *)&data_buffer[dataIndex],
 80041ea:	4b5e      	ldr	r3, [pc, #376]	; (8004364 <sensor_framework+0xe50>)
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80041f2:	3b08      	subs	r3, #8
 80041f4:	0092      	lsls	r2, r2, #2
 80041f6:	1899      	adds	r1, r3, r2
 80041f8:	f507 509f 	add.w	r0, r7, #5088	; 0x13e0
 80041fc:	f100 001c 	add.w	r0, r0, #28
 8004200:	2364      	movs	r3, #100	; 0x64
 8004202:	2240      	movs	r2, #64	; 0x40
 8004204:	f00a f8a4 	bl	800e350 <HAL_UART_Transmit>
						DATA_LEN * sizeof(data_buffer[dataIndex]), 100);

				/*Increment the local buffer by 8 [Each data packet is 64 bytes]*/
				dataIndex += DATA_LEN;
 8004208:	4b56      	ldr	r3, [pc, #344]	; (8004364 <sensor_framework+0xe50>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3310      	adds	r3, #16
 800420e:	4a55      	ldr	r2, [pc, #340]	; (8004364 <sensor_framework+0xe50>)
 8004210:	6013      	str	r3, [r2, #0]
				//				if (dataIndex == MAX_BUFFER_SIZE)
				//					dataIndex = 0;
				//Attach time-stamp [RTC function]
				//Write to the local memory block[SRAM] using DMA
				break;
 8004212:	e006      	b.n	8004222 <sensor_framework+0xd0e>


			default:
				//Not valid
				sensor_no = SEQ_DONE;
 8004214:	2300      	movs	r3, #0
 8004216:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800421a:	f102 020c 	add.w	r2, r2, #12
 800421e:	6013      	str	r3, [r2, #0]
				break;
 8004220:	bf00      	nop
		while(sensor_no != SEQ_DONE)
 8004222:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8004226:	f103 030c 	add.w	r3, r3, #12
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	f47f ac15 	bne.w	8003a5c <sensor_framework+0x548>
			}
		}


	case I2S_protocol:
		periph = I3C_protocol;
 8004232:	2304      	movs	r3, #4
 8004234:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8004238:	f102 020a 	add.w	r2, r2, #10
 800423c:	7013      	strb	r3, [r2, #0]

		//Depending on whether DMA available for I3C or not
		sensor_no = a.data_rdy_reg & I2S_sensor_1;   // Or (a.dig_irq_reg & I2S_sensor_1)
 800423e:	4b48      	ldr	r3, [pc, #288]	; (8004360 <sensor_framework+0xe4c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004246:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800424a:	f102 020c 	add.w	r2, r2, #12
 800424e:	6013      	str	r3, [r2, #0]

		/*Continue looping till all the data ready are covered*/
		while(sensor_no != SEQ_DONE)
 8004250:	e015      	b.n	800427e <sensor_framework+0xd6a>
 8004252:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8004256:	f103 030c 	add.w	r3, r3, #12
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004260:	d106      	bne.n	8004270 <sensor_framework+0xd5c>
		{
			switch(sensor_no)
			{
			case I2S_sensor_1:
				sensor_no = SEQ_DONE;
 8004262:	2300      	movs	r3, #0
 8004264:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8004268:	f102 020c 	add.w	r2, r2, #12
 800426c:	6013      	str	r3, [r2, #0]
				//Attach time-stamp [RTC function]
				//Write to the local memory block [SRAM] using DMA
				break;
 800426e:	e006      	b.n	800427e <sensor_framework+0xd6a>

			default:
				//Not valid
				sensor_no = SEQ_DONE;
 8004270:	2300      	movs	r3, #0
 8004272:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8004276:	f102 020c 	add.w	r2, r2, #12
 800427a:	6013      	str	r3, [r2, #0]
				break;
 800427c:	bf00      	nop
		while(sensor_no != SEQ_DONE)
 800427e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8004282:	f103 030c 	add.w	r3, r3, #12
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1e2      	bne.n	8004252 <sensor_framework+0xd3e>
			}
		}


	case I3C_protocol:
		periph = UART_protocol;
 800428c:	2305      	movs	r3, #5
 800428e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8004292:	f102 020a 	add.w	r2, r2, #10
 8004296:	7013      	strb	r3, [r2, #0]

		//Depending on whether DMA available for I3C or not
		sensor_no = a.data_rdy_reg & I3C_sensor_1;     // Or (a.dig_irq_reg & I3C_sensor_1))
 8004298:	4b31      	ldr	r3, [pc, #196]	; (8004360 <sensor_framework+0xe4c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a0:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80042a4:	f102 020c 	add.w	r2, r2, #12
 80042a8:	6013      	str	r3, [r2, #0]

		/*Continue looping till all the data ready are covered*/
		while(sensor_no != SEQ_DONE)
 80042aa:	e015      	b.n	80042d8 <sensor_framework+0xdc4>
 80042ac:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80042b0:	f103 030c 	add.w	r3, r3, #12
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ba:	d106      	bne.n	80042ca <sensor_framework+0xdb6>
		{
			switch(sensor_no)
			{
			case I3C_sensor_1:
				sensor_no = SEQ_DONE;
 80042bc:	2300      	movs	r3, #0
 80042be:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80042c2:	f102 020c 	add.w	r2, r2, #12
 80042c6:	6013      	str	r3, [r2, #0]
				//Attach time-stamp [RTC function]
				//Write to the local memory block[SRAM] using DMA
				break;
 80042c8:	e006      	b.n	80042d8 <sensor_framework+0xdc4>

			default:
				//Not valid
				sensor_no = SEQ_DONE;
 80042ca:	2300      	movs	r3, #0
 80042cc:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80042d0:	f102 020c 	add.w	r2, r2, #12
 80042d4:	6013      	str	r3, [r2, #0]
				break;
 80042d6:	bf00      	nop
		while(sensor_no != SEQ_DONE)
 80042d8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80042dc:	f103 030c 	add.w	r3, r3, #12
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1e2      	bne.n	80042ac <sensor_framework+0xd98>

		}

		//TODO: More clarity
	case UART_protocol:
		periph = ADC_sensor;
 80042e6:	2306      	movs	r3, #6
 80042e8:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80042ec:	f102 020a 	add.w	r2, r2, #10
 80042f0:	7013      	strb	r3, [r2, #0]
		//Do something


	case ADC_sensor:
		periph = Digital_sensor;
 80042f2:	2307      	movs	r3, #7
 80042f4:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80042f8:	f102 020a 	add.w	r2, r2, #10
 80042fc:	7013      	strb	r3, [r2, #0]

		sensor_no = (a.adc_irq_reg & ADC_sensor_1);
 80042fe:	4b18      	ldr	r3, [pc, #96]	; (8004360 <sensor_framework+0xe4c>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800430a:	f102 020c 	add.w	r2, r2, #12
 800430e:	6013      	str	r3, [r2, #0]

		if(sensor_no == 0)
 8004310:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8004314:	f103 030c 	add.w	r3, r3, #12
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	f040 80aa 	bne.w	8004474 <sensor_framework+0xf60>
			sensor_no = nextSensor(sensor_no, ADC_sensor_1, ADC_sensor_2 ,
 8004320:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <sensor_framework+0xe4c>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2202      	movs	r2, #2
 8004326:	2101      	movs	r1, #1
 8004328:	f507 5083 	add.w	r0, r7, #4192	; 0x1060
 800432c:	f100 000c 	add.w	r0, r0, #12
 8004330:	6800      	ldr	r0, [r0, #0]
 8004332:	f7ff f8c1 	bl	80034b8 <nextSensor>
 8004336:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800433a:	f103 030c 	add.w	r3, r3, #12
 800433e:	6018      	str	r0, [r3, #0]
					a.adc_irq_reg);

		/*Continue looping till all the data ready are covered*/
		while(sensor_no != SEQ_DONE)
 8004340:	e098      	b.n	8004474 <sensor_framework+0xf60>
 8004342:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8004346:	f103 030c 	add.w	r3, r3, #12
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d00d      	beq.n	800436c <sensor_framework+0xe58>
 8004350:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8004354:	f103 030c 	add.w	r3, r3, #12
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b02      	cmp	r3, #2
 800435c:	d07c      	beq.n	8004458 <sensor_framework+0xf44>
 800435e:	e082      	b.n	8004466 <sensor_framework+0xf52>
 8004360:	20000648 	.word	0x20000648
 8004364:	20000658 	.word	0x20000658
 8004368:	08011cfc 	.word	0x08011cfc
			case ADC_sensor_1:
				//				temp = (a.adc_irq_reg & ADC_sensor_2);
				//				sensor_no = nextSensor(temp, ADC_sensor_2, ADC_sensor_2 , a.adc_irq_reg);

				/*Fetch next data-ready and clear the data ready flag*/
				sensor_no = SEQ_DONE;
 800436c:	2300      	movs	r3, #0
 800436e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8004372:	f102 020c 	add.w	r2, r2, #12
 8004376:	6013      	str	r3, [r2, #0]
				a.adc_irq_reg &= ~ ADC_sensor_1;
 8004378:	4b57      	ldr	r3, [pc, #348]	; (80044d8 <sensor_framework+0xfc4>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f023 0301 	bic.w	r3, r3, #1
 8004380:	4a55      	ldr	r2, [pc, #340]	; (80044d8 <sensor_framework+0xfc4>)
 8004382:	6053      	str	r3, [r2, #4]

				/*Get data from the sensor and the current timestamp*/
				int16_t tempADC;
				adcTempSensor(&tempADC, ADC_4, ADC_Perpiph1);
 8004384:	f107 0410 	add.w	r4, r7, #16
 8004388:	3c0c      	subs	r4, #12
 800438a:	4668      	mov	r0, sp
 800438c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8004390:	f103 0318 	add.w	r3, r3, #24
 8004394:	2284      	movs	r2, #132	; 0x84
 8004396:	4619      	mov	r1, r3
 8004398:	f00a fd04 	bl	800eda4 <memcpy>
 800439c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80043a0:	f103 0310 	add.w	r3, r3, #16
 80043a4:	cb0c      	ldmia	r3, {r2, r3}
 80043a6:	2104      	movs	r1, #4
 80043a8:	4620      	mov	r0, r4
 80043aa:	f7fc fd91 	bl	8000ed0 <adcTempSensor>
				RTCTimestamp(time_stamp, date_stamp, RTC_Periph1);
 80043ae:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 80043b2:	f107 0670 	add.w	r6, r7, #112	; 0x70
 80043b6:	3e14      	subs	r6, #20
 80043b8:	466d      	mov	r5, sp
 80043ba:	f507 54a4 	add.w	r4, r7, #5248	; 0x1480
 80043be:	f104 0414 	add.w	r4, r4, #20
 80043c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80043d2:	f507 53a4 	add.w	r3, r7, #5248	; 0x1480
 80043d6:	f103 030c 	add.w	r3, r3, #12
 80043da:	cb0c      	ldmia	r3, {r2, r3}
 80043dc:	4661      	mov	r1, ip
 80043de:	4630      	mov	r0, r6
 80043e0:	f7ff f810 	bl	8003404 <RTCTimestamp>

				/*Store data into the local buffer and print it to UART*/
				memset(&data_buffer[dataIndex] , 0,
 80043e4:	4b3d      	ldr	r3, [pc, #244]	; (80044dc <sensor_framework+0xfc8>)
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80043ec:	3b08      	subs	r3, #8
 80043ee:	0092      	lsls	r2, r2, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	2240      	movs	r2, #64	; 0x40
 80043f4:	2100      	movs	r1, #0
 80043f6:	4618      	mov	r0, r3
 80043f8:	f00a fce1 	bl	800edbe <memset>
						DATA_LEN * sizeof(data_buffer[dataIndex]));
				if (dataIndex == MAX_BUFFER_SIZE)
 80043fc:	4b37      	ldr	r3, [pc, #220]	; (80044dc <sensor_framework+0xfc8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004404:	d102      	bne.n	800440c <sensor_framework+0xef8>
					dataIndex = 0;
 8004406:	4b35      	ldr	r3, [pc, #212]	; (80044dc <sensor_framework+0xfc8>)
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]
				sprintf((char *)&data_buffer[dataIndex],"%s ADC_4 T:%d\r\n",
 800440c:	4b33      	ldr	r3, [pc, #204]	; (80044dc <sensor_framework+0xfc8>)
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004414:	3b08      	subs	r3, #8
 8004416:	0092      	lsls	r2, r2, #2
 8004418:	1898      	adds	r0, r3, r2
 800441a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800441e:	f933 3c6c 	ldrsh.w	r3, [r3, #-108]
 8004422:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8004426:	3a14      	subs	r2, #20
 8004428:	492d      	ldr	r1, [pc, #180]	; (80044e0 <sensor_framework+0xfcc>)
 800442a:	f00b f93d 	bl	800f6a8 <siprintf>
						time_stamp , tempADC);
				HAL_UART_Transmit(&UART_Periph1,(uint8_t *)&data_buffer[dataIndex],
 800442e:	4b2b      	ldr	r3, [pc, #172]	; (80044dc <sensor_framework+0xfc8>)
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004436:	3b08      	subs	r3, #8
 8004438:	0092      	lsls	r2, r2, #2
 800443a:	1899      	adds	r1, r3, r2
 800443c:	f507 509f 	add.w	r0, r7, #5088	; 0x13e0
 8004440:	f100 001c 	add.w	r0, r0, #28
 8004444:	2364      	movs	r3, #100	; 0x64
 8004446:	2240      	movs	r2, #64	; 0x40
 8004448:	f009 ff82 	bl	800e350 <HAL_UART_Transmit>
						DATA_LEN * sizeof(data_buffer[dataIndex]), 100);

				/*Increment the local buffer by 8 [Each data packet is 64 bytes]*/
				dataIndex += DATA_LEN;
 800444c:	4b23      	ldr	r3, [pc, #140]	; (80044dc <sensor_framework+0xfc8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3310      	adds	r3, #16
 8004452:	4a22      	ldr	r2, [pc, #136]	; (80044dc <sensor_framework+0xfc8>)
 8004454:	6013      	str	r3, [r2, #0]
				//				if (dataIndex == MAX_BUFFER_SIZE)
				//					dataIndex = 0;
				break;
 8004456:	e00d      	b.n	8004474 <sensor_framework+0xf60>

			case ADC_sensor_2:
				sensor_no = SEQ_DONE;
 8004458:	2300      	movs	r3, #0
 800445a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800445e:	f102 020c 	add.w	r2, r2, #12
 8004462:	6013      	str	r3, [r2, #0]
				//Attach time-stamp [RTC function]
				//Write to the local memory block[SRAM] using DMA
				break;
 8004464:	e006      	b.n	8004474 <sensor_framework+0xf60>

			default:
				//Not valid
				sensor_no = SEQ_DONE;
 8004466:	2300      	movs	r3, #0
 8004468:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800446c:	f102 020c 	add.w	r2, r2, #12
 8004470:	6013      	str	r3, [r2, #0]
				break;
 8004472:	bf00      	nop
		while(sensor_no != SEQ_DONE)
 8004474:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8004478:	f103 030c 	add.w	r3, r3, #12
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	f47f af5f 	bne.w	8004342 <sensor_framework+0xe2e>
			}
		}

	case Digital_sensor:
		periph = Reconfig_sensors;
 8004484:	2308      	movs	r3, #8
 8004486:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800448a:	f102 020a 	add.w	r2, r2, #10
 800448e:	7013      	strb	r3, [r2, #0]
		//Attach time-stamp [RTC function]
		//Write to the local memory block[SRAM] using DMA

	case Reconfig_sensors:
		//If data buffer[SRAM] is full, then next state is SPI or SD card
		periph = SD_Card;
 8004490:	2309      	movs	r3, #9
 8004492:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8004496:	f102 020a 	add.w	r2, r2, #10
 800449a:	7013      	strb	r3, [r2, #0]
		//FIXME: Clarity?
		sensor_no = (a.reconfig_reg & SPI_sensor_1);
 800449c:	4b0e      	ldr	r3, [pc, #56]	; (80044d8 <sensor_framework+0xfc4>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80044a8:	f102 020c 	add.w	r2, r2, #12
 80044ac:	6013      	str	r3, [r2, #0]

		//Will the entire flow be repeated?

	case SD_Card:
		periph = SPI_protocol;
 80044ae:	2301      	movs	r3, #1
 80044b0:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80044b4:	f102 020a 	add.w	r2, r2, #10
 80044b8:	7013      	strb	r3, [r2, #0]
		//Push data to SD card if the buffer[SRAM] is full

	default:
		break;
 80044ba:	bf00      	nop

	}

	return ret_status;
 80044bc:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80044c0:	f103 030b 	add.w	r3, r3, #11
 80044c4:	781b      	ldrb	r3, [r3, #0]

}
 80044c6:	4618      	mov	r0, r3
 80044c8:	f507 5783 	add.w	r7, r7, #4192	; 0x1060
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044d4:	b004      	add	sp, #16
 80044d6:	4770      	bx	lr
 80044d8:	20000648 	.word	0x20000648
 80044dc:	20000658 	.word	0x20000658
 80044e0:	08011d0c 	.word	0x08011d0c

080044e4 <getFlagPtr>:
 * @brief  Generates a pointer to structure having sensor flags
 * @param  None
 * @retval None
 */
void getFlagPtr()
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
	b = getSensorPtr();
 80044e8:	f7fe ffdc 	bl	80034a4 <getSensorPtr>
 80044ec:	4603      	mov	r3, r0
 80044ee:	4a02      	ldr	r2, [pc, #8]	; (80044f8 <getFlagPtr+0x14>)
 80044f0:	6013      	str	r3, [r2, #0]
}
 80044f2:	bf00      	nop
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20000660 	.word	0x20000660

080044fc <HAL_GPIO_EXTI_Rising_Callback>:
 * @brief Interrupt callback for INT_DRDY pin from sensor (PC-6)
 * @param uint16_t GPIO_Pin: GPIO Pin number where interrupt is triggered
 * @retval None
 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	80fb      	strh	r3, [r7, #6]
	/*LPS27HHW data ready pin*/
	if(GPIO_Pin == DRDY_LPS27HHW_Pin)
 8004506:	88fb      	ldrh	r3, [r7, #6]
 8004508:	2b40      	cmp	r3, #64	; 0x40
 800450a:	d107      	bne.n	800451c <HAL_GPIO_EXTI_Rising_Callback+0x20>
		b->data_rdy_reg |= SPI_sensor_1;
 800450c:	4b24      	ldr	r3, [pc, #144]	; (80045a0 <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4b23      	ldr	r3, [pc, #140]	; (80045a0 <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]

	/*LSM6DSOX data ready pin accelerometer*/
	if(GPIO_Pin == DRDY_LSM6DSOX_INT1_Pin)
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004522:	d107      	bne.n	8004534 <HAL_GPIO_EXTI_Rising_Callback+0x38>
		b->data_rdy_reg |= I2C_sensor_1;
 8004524:	4b1e      	ldr	r3, [pc, #120]	; (80045a0 <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	4b1d      	ldr	r3, [pc, #116]	; (80045a0 <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0210 	orr.w	r2, r2, #16
 8004532:	601a      	str	r2, [r3, #0]

	/*LSM6DSOX data ready pin gyroscope*/
	if(GPIO_Pin == DRDY_LSM6DSOX_INT2_Pin)
 8004534:	88fb      	ldrh	r3, [r7, #6]
 8004536:	2b80      	cmp	r3, #128	; 0x80
 8004538:	d107      	bne.n	800454a <HAL_GPIO_EXTI_Rising_Callback+0x4e>
		b->data_rdy_reg |= I2C_sensor_1;
 800453a:	4b19      	ldr	r3, [pc, #100]	; (80045a0 <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	4b17      	ldr	r3, [pc, #92]	; (80045a0 <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0210 	orr.w	r2, r2, #16
 8004548:	601a      	str	r2, [r3, #0]

	/*LSM6DSO32 data ready pin accelerometer*/
	if(GPIO_Pin == DRDY_LSM6DSO32_INT1_Pin)
 800454a:	88fb      	ldrh	r3, [r7, #6]
 800454c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004550:	d107      	bne.n	8004562 <HAL_GPIO_EXTI_Rising_Callback+0x66>
		b->data_rdy_reg |= SPI_sensor_2;
 8004552:	4b13      	ldr	r3, [pc, #76]	; (80045a0 <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	4b11      	ldr	r3, [pc, #68]	; (80045a0 <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f042 0202 	orr.w	r2, r2, #2
 8004560:	601a      	str	r2, [r3, #0]

	/*LSM6DSO32 data ready pin gyroscope*/
	if(GPIO_Pin == DRDY_LSM6DSO32_INT2_Pin)
 8004562:	88fb      	ldrh	r3, [r7, #6]
 8004564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004568:	d107      	bne.n	800457a <HAL_GPIO_EXTI_Rising_Callback+0x7e>
		b->data_rdy_reg |= SPI_sensor_2;
 800456a:	4b0d      	ldr	r3, [pc, #52]	; (80045a0 <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0202 	orr.w	r2, r2, #2
 8004578:	601a      	str	r2, [r3, #0]

	/*LISM3DL data ready pin magnetometer*/
	if(GPIO_Pin == DRDY_LIS3MDL_Pin)
 800457a:	88fb      	ldrh	r3, [r7, #6]
 800457c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004580:	d107      	bne.n	8004592 <HAL_GPIO_EXTI_Rising_Callback+0x96>
		b->data_rdy_reg |= I2C_sensor_2;
 8004582:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 0220 	orr.w	r2, r2, #32
 8004590:	601a      	str	r2, [r3, #0]

}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	20000660 	.word	0x20000660

080045a4 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	4603      	mov	r3, r0
 80045ac:	80fb      	strh	r3, [r7, #6]

	/*ADXL375 Data ready pin accelerometer*/
	if(GPIO_Pin == DRDY_ADXL375_Pin)
 80045ae:	88fb      	ldrh	r3, [r7, #6]
 80045b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045b4:	d107      	bne.n	80045c6 <HAL_GPIO_EXTI_Falling_Callback+0x22>
		b->data_rdy_reg |= SPI_sensor_3;
 80045b6:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <HAL_GPIO_EXTI_Falling_Callback+0x30>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <HAL_GPIO_EXTI_Falling_Callback+0x30>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f042 0204 	orr.w	r2, r2, #4
 80045c4:	601a      	str	r2, [r3, #0]

}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	20000660 	.word	0x20000660

080045d8 <HAL_ADC_ConvCpltCallback>:
 * @brief ADC IRQ Handler
 * @param ADC_HandleTypeDef: The ADC peripheral structure instance on the micro-controller (ADC1 or ADC4)
 * @retval ret_status: None
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
	/*ADC4 ADC IRQ pin for internal temperature sensor channel*/
	b->adc_irq_reg |= ADC_sensor_1;
 80045e0:	4b06      	ldr	r3, [pc, #24]	; (80045fc <HAL_ADC_ConvCpltCallback+0x24>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	4b05      	ldr	r3, [pc, #20]	; (80045fc <HAL_ADC_ConvCpltCallback+0x24>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	605a      	str	r2, [r3, #4]
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	20000660 	.word	0x20000660

08004600 <HAL_IncTick>:
 * @brief Systick ISR
 * @note Refer to stm32u5xx_hal.c for default implementation
 * @retval None
 */
void HAL_IncTick(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
	/*Ticks for 1 millisecond delay*/
	time_ticks += (uint32_t)tick_freq;
 8004604:	4b18      	ldr	r3, [pc, #96]	; (8004668 <HAL_IncTick+0x68>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	461a      	mov	r2, r3
 800460a:	4b18      	ldr	r3, [pc, #96]	; (800466c <HAL_IncTick+0x6c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4413      	add	r3, r2
 8004610:	4a16      	ldr	r2, [pc, #88]	; (800466c <HAL_IncTick+0x6c>)
 8004612:	6013      	str	r3, [r2, #0]

	/*For temperature sensor, magnetometer (LIS2MDL)
	 * and light sensor(BH1750) and temperature sensor(AHT20)
	 *  every 10 milliseconds*/
	if(TICKS_10_MS== sysTimeCnt1)
 8004614:	4b16      	ldr	r3, [pc, #88]	; (8004670 <HAL_IncTick+0x70>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b0a      	cmp	r3, #10
 800461a:	d11a      	bne.n	8004652 <HAL_IncTick+0x52>
	{
		/*Reset the counter*/
		sysTimeCnt1 = 0u;
 800461c:	4b14      	ldr	r3, [pc, #80]	; (8004670 <HAL_IncTick+0x70>)
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
		b->data_rdy_reg |= I2C_sensor_3;
 8004622:	4b14      	ldr	r3, [pc, #80]	; (8004674 <HAL_IncTick+0x74>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	4b12      	ldr	r3, [pc, #72]	; (8004674 <HAL_IncTick+0x74>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004630:	601a      	str	r2, [r3, #0]
		b->data_rdy_reg |= I2C_sensor_4;
 8004632:	4b10      	ldr	r3, [pc, #64]	; (8004674 <HAL_IncTick+0x74>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	4b0e      	ldr	r3, [pc, #56]	; (8004674 <HAL_IncTick+0x74>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004640:	601a      	str	r2, [r3, #0]
		b->data_rdy_reg |= I2C_sensor_5;
 8004642:	4b0c      	ldr	r3, [pc, #48]	; (8004674 <HAL_IncTick+0x74>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <HAL_IncTick+0x74>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004650:	601a      	str	r2, [r3, #0]
	}

	/*Increment the counter for data ready for timer-triggered sensors*/
	sysTimeCnt1++;
 8004652:	4b07      	ldr	r3, [pc, #28]	; (8004670 <HAL_IncTick+0x70>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3301      	adds	r3, #1
 8004658:	4a05      	ldr	r2, [pc, #20]	; (8004670 <HAL_IncTick+0x70>)
 800465a:	6013      	str	r3, [r2, #0]
}
 800465c:	bf00      	nop
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	20000024 	.word	0x20000024
 800466c:	20000668 	.word	0x20000668
 8004670:	2000065c 	.word	0x2000065c
 8004674:	20000660 	.word	0x20000660

08004678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800467e:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <HAL_MspInit+0x38>)
 8004680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004684:	4a0a      	ldr	r2, [pc, #40]	; (80046b0 <HAL_MspInit+0x38>)
 8004686:	f043 0304 	orr.w	r3, r3, #4
 800468a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800468e:	4b08      	ldr	r3, [pc, #32]	; (80046b0 <HAL_MspInit+0x38>)
 8004690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	607b      	str	r3, [r7, #4]
 800469a:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800469c:	2004      	movs	r0, #4
 800469e:	f003 f869 	bl	8007774 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  //For ADC
  HAL_PWREx_EnableVddA();
 80046a2:	f004 fc2f 	bl	8008f04 <HAL_PWREx_EnableVddA>
  /* USER CODE END MspInit 1 */
}
 80046a6:	bf00      	nop
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	46020c00 	.word	0x46020c00

080046b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b0b6      	sub	sp, #216	; 0xd8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80046bc:	f107 0310 	add.w	r3, r7, #16
 80046c0:	22c8      	movs	r2, #200	; 0xc8
 80046c2:	2100      	movs	r1, #0
 80046c4:	4618      	mov	r0, r3
 80046c6:	f00a fb7a 	bl	800edbe <memset>
  if(hadc->Instance==ADC4)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a19      	ldr	r2, [pc, #100]	; (8004734 <HAL_ADC_MspInit+0x80>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d12a      	bne.n	800472a <HAL_ADC_MspInit+0x76>

  /* USER CODE END ADC4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80046d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80046e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046e8:	f107 0310 	add.w	r3, r7, #16
 80046ec:	4618      	mov	r0, r3
 80046ee:	f005 fed5 	bl	800a49c <HAL_RCCEx_PeriphCLKConfig>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <HAL_ADC_MspInit+0x48>
    {
      Error_Handler();
 80046f8:	f7fe fe7e 	bl	80033f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC4_CLK_ENABLE();
 80046fc:	4b0e      	ldr	r3, [pc, #56]	; (8004738 <HAL_ADC_MspInit+0x84>)
 80046fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004702:	4a0d      	ldr	r2, [pc, #52]	; (8004738 <HAL_ADC_MspInit+0x84>)
 8004704:	f043 0320 	orr.w	r3, r3, #32
 8004708:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800470c:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <HAL_ADC_MspInit+0x84>)
 800470e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	68fb      	ldr	r3, [r7, #12]
    /* ADC4 interrupt Init */
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 800471a:	2200      	movs	r2, #0
 800471c:	2100      	movs	r1, #0
 800471e:	2071      	movs	r0, #113	; 0x71
 8004720:	f003 f833 	bl	800778a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 8004724:	2071      	movs	r0, #113	; 0x71
 8004726:	f003 f84a 	bl	80077be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 800472a:	bf00      	nop
 800472c:	37d8      	adds	r7, #216	; 0xd8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	46021000 	.word	0x46021000
 8004738:	46020c00 	.word	0x46020c00

0800473c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b0c2      	sub	sp, #264	; 0x108
 8004740:	af00      	add	r7, sp, #0
 8004742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004746:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800474a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800474c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	605a      	str	r2, [r3, #4]
 8004756:	609a      	str	r2, [r3, #8]
 8004758:	60da      	str	r2, [r3, #12]
 800475a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800475c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004760:	22c8      	movs	r2, #200	; 0xc8
 8004762:	2100      	movs	r1, #0
 8004764:	4618      	mov	r0, r3
 8004766:	f00a fb2a 	bl	800edbe <memset>
  if(hi2c->Instance==I2C1)
 800476a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800476e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4aa4      	ldr	r2, [pc, #656]	; (8004a08 <HAL_I2C_MspInit+0x2cc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d148      	bne.n	800480e <HAL_I2C_MspInit+0xd2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800477c:	f04f 0240 	mov.w	r2, #64	; 0x40
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8004788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800478c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004790:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004794:	4618      	mov	r0, r3
 8004796:	f005 fe81 	bl	800a49c <HAL_RCCEx_PeriphCLKConfig>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <HAL_I2C_MspInit+0x68>
    {
      Error_Handler();
 80047a0:	f7fe fe2a 	bl	80033f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047a4:	4b99      	ldr	r3, [pc, #612]	; (8004a0c <HAL_I2C_MspInit+0x2d0>)
 80047a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047aa:	4a98      	ldr	r2, [pc, #608]	; (8004a0c <HAL_I2C_MspInit+0x2d0>)
 80047ac:	f043 0302 	orr.w	r3, r3, #2
 80047b0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80047b4:	4b95      	ldr	r3, [pc, #596]	; (8004a0c <HAL_I2C_MspInit+0x2d0>)
 80047b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80047c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80047c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047ca:	2312      	movs	r3, #18
 80047cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047d0:	2301      	movs	r3, #1
 80047d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047d6:	2300      	movs	r3, #0
 80047d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80047dc:	2304      	movs	r3, #4
 80047de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047e2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80047e6:	4619      	mov	r1, r3
 80047e8:	4889      	ldr	r0, [pc, #548]	; (8004a10 <HAL_I2C_MspInit+0x2d4>)
 80047ea:	f003 f803 	bl	80077f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80047ee:	4b87      	ldr	r3, [pc, #540]	; (8004a0c <HAL_I2C_MspInit+0x2d0>)
 80047f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047f4:	4a85      	ldr	r2, [pc, #532]	; (8004a0c <HAL_I2C_MspInit+0x2d0>)
 80047f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80047fe:	4b83      	ldr	r3, [pc, #524]	; (8004a0c <HAL_I2C_MspInit+0x2d0>)
 8004800:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004808:	623b      	str	r3, [r7, #32]
 800480a:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800480c:	e0f7      	b.n	80049fe <HAL_I2C_MspInit+0x2c2>
  else if(hi2c->Instance==I2C2)
 800480e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004812:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a7e      	ldr	r2, [pc, #504]	; (8004a14 <HAL_I2C_MspInit+0x2d8>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d146      	bne.n	80048ae <HAL_I2C_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004820:	f04f 0280 	mov.w	r2, #128	; 0x80
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800482c:	2300      	movs	r3, #0
 800482e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004832:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004836:	4618      	mov	r0, r3
 8004838:	f005 fe30 	bl	800a49c <HAL_RCCEx_PeriphCLKConfig>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_I2C_MspInit+0x10a>
      Error_Handler();
 8004842:	f7fe fdd9 	bl	80033f8 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004846:	4b71      	ldr	r3, [pc, #452]	; (8004a0c <HAL_I2C_MspInit+0x2d0>)
 8004848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800484c:	4a6f      	ldr	r2, [pc, #444]	; (8004a0c <HAL_I2C_MspInit+0x2d0>)
 800484e:	f043 0320 	orr.w	r3, r3, #32
 8004852:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004856:	4b6d      	ldr	r3, [pc, #436]	; (8004a0c <HAL_I2C_MspInit+0x2d0>)
 8004858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	61fb      	str	r3, [r7, #28]
 8004862:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004864:	2303      	movs	r3, #3
 8004866:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800486a:	2312      	movs	r3, #18
 800486c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004870:	2301      	movs	r3, #1
 8004872:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004876:	2300      	movs	r3, #0
 8004878:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800487c:	2304      	movs	r3, #4
 800487e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004882:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004886:	4619      	mov	r1, r3
 8004888:	4863      	ldr	r0, [pc, #396]	; (8004a18 <HAL_I2C_MspInit+0x2dc>)
 800488a:	f002 ffb3 	bl	80077f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800488e:	4b5f      	ldr	r3, [pc, #380]	; (8004a0c <HAL_I2C_MspInit+0x2d0>)
 8004890:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004894:	4a5d      	ldr	r2, [pc, #372]	; (8004a0c <HAL_I2C_MspInit+0x2d0>)
 8004896:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800489a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800489e:	4b5b      	ldr	r3, [pc, #364]	; (8004a0c <HAL_I2C_MspInit+0x2d0>)
 80048a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	69bb      	ldr	r3, [r7, #24]
}
 80048ac:	e0a7      	b.n	80049fe <HAL_I2C_MspInit+0x2c2>
  else if(hi2c->Instance==I2C3)
 80048ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a58      	ldr	r2, [pc, #352]	; (8004a1c <HAL_I2C_MspInit+0x2e0>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d146      	bne.n	800494e <HAL_I2C_MspInit+0x212>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80048c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048c4:	f04f 0300 	mov.w	r3, #0
 80048c8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 80048cc:	2300      	movs	r3, #0
 80048ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048d6:	4618      	mov	r0, r3
 80048d8:	f005 fde0 	bl	800a49c <HAL_RCCEx_PeriphCLKConfig>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_I2C_MspInit+0x1aa>
      Error_Handler();
 80048e2:	f7fe fd89 	bl	80033f8 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048e6:	4b49      	ldr	r3, [pc, #292]	; (8004a0c <HAL_I2C_MspInit+0x2d0>)
 80048e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ec:	4a47      	ldr	r2, [pc, #284]	; (8004a0c <HAL_I2C_MspInit+0x2d0>)
 80048ee:	f043 0304 	orr.w	r3, r3, #4
 80048f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80048f6:	4b45      	ldr	r3, [pc, #276]	; (8004a0c <HAL_I2C_MspInit+0x2d0>)
 80048f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004904:	2303      	movs	r3, #3
 8004906:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800490a:	2312      	movs	r3, #18
 800490c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004910:	2301      	movs	r3, #1
 8004912:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004916:	2300      	movs	r3, #0
 8004918:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800491c:	2304      	movs	r3, #4
 800491e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004922:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004926:	4619      	mov	r1, r3
 8004928:	483d      	ldr	r0, [pc, #244]	; (8004a20 <HAL_I2C_MspInit+0x2e4>)
 800492a:	f002 ff63 	bl	80077f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800492e:	4b37      	ldr	r3, [pc, #220]	; (8004a0c <HAL_I2C_MspInit+0x2d0>)
 8004930:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004934:	4a35      	ldr	r2, [pc, #212]	; (8004a0c <HAL_I2C_MspInit+0x2d0>)
 8004936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800493a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800493e:	4b33      	ldr	r3, [pc, #204]	; (8004a0c <HAL_I2C_MspInit+0x2d0>)
 8004940:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004948:	613b      	str	r3, [r7, #16]
 800494a:	693b      	ldr	r3, [r7, #16]
}
 800494c:	e057      	b.n	80049fe <HAL_I2C_MspInit+0x2c2>
  else if(hi2c->Instance==I2C4)
 800494e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004952:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a32      	ldr	r2, [pc, #200]	; (8004a24 <HAL_I2C_MspInit+0x2e8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d14e      	bne.n	80049fe <HAL_I2C_MspInit+0x2c2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8004960:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800496c:	2300      	movs	r3, #0
 800496e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004972:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004976:	4618      	mov	r0, r3
 8004978:	f005 fd90 	bl	800a49c <HAL_RCCEx_PeriphCLKConfig>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <HAL_I2C_MspInit+0x24a>
      Error_Handler();
 8004982:	f7fe fd39 	bl	80033f8 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004986:	4b21      	ldr	r3, [pc, #132]	; (8004a0c <HAL_I2C_MspInit+0x2d0>)
 8004988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800498c:	4a1f      	ldr	r2, [pc, #124]	; (8004a0c <HAL_I2C_MspInit+0x2d0>)
 800498e:	f043 0320 	orr.w	r3, r3, #32
 8004992:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004996:	4b1d      	ldr	r3, [pc, #116]	; (8004a0c <HAL_I2C_MspInit+0x2d0>)
 8004998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800499c:	f003 0320 	and.w	r3, r3, #32
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80049a4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80049a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049ac:	2312      	movs	r3, #18
 80049ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049b2:	2301      	movs	r3, #1
 80049b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049b8:	2300      	movs	r3, #0
 80049ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80049be:	2304      	movs	r3, #4
 80049c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80049c4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80049c8:	4619      	mov	r1, r3
 80049ca:	4813      	ldr	r0, [pc, #76]	; (8004a18 <HAL_I2C_MspInit+0x2dc>)
 80049cc:	f002 ff12 	bl	80077f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80049d0:	4b0e      	ldr	r3, [pc, #56]	; (8004a0c <HAL_I2C_MspInit+0x2d0>)
 80049d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049d6:	4a0d      	ldr	r2, [pc, #52]	; (8004a0c <HAL_I2C_MspInit+0x2d0>)
 80049d8:	f043 0302 	orr.w	r3, r3, #2
 80049dc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 80049e0:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <HAL_I2C_MspInit+0x2d0>)
 80049e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049e6:	f003 0202 	and.w	r2, r3, #2
 80049ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049ee:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049fc:	681b      	ldr	r3, [r3, #0]
}
 80049fe:	bf00      	nop
 8004a00:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40005400 	.word	0x40005400
 8004a0c:	46020c00 	.word	0x46020c00
 8004a10:	42020400 	.word	0x42020400
 8004a14:	40005800 	.word	0x40005800
 8004a18:	42021400 	.word	0x42021400
 8004a1c:	46002800 	.word	0x46002800
 8004a20:	42020800 	.word	0x42020800
 8004a24:	40008400 	.word	0x40008400

08004a28 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b0b6      	sub	sp, #216	; 0xd8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a30:	f107 0310 	add.w	r3, r7, #16
 8004a34:	22c8      	movs	r2, #200	; 0xc8
 8004a36:	2100      	movs	r1, #0
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f00a f9c0 	bl	800edbe <memset>
  if(hrtc->Instance==RTC)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a1d      	ldr	r2, [pc, #116]	; (8004ab8 <HAL_RTC_MspInit+0x90>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d132      	bne.n	8004aae <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004a48:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004a54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a5c:	f107 0310 	add.w	r3, r7, #16
 8004a60:	4618      	mov	r0, r3
 8004a62:	f005 fd1b 	bl	800a49c <HAL_RCCEx_PeriphCLKConfig>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8004a6c:	f7fe fcc4 	bl	80033f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004a70:	4b12      	ldr	r3, [pc, #72]	; (8004abc <HAL_RTC_MspInit+0x94>)
 8004a72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a76:	4a11      	ldr	r2, [pc, #68]	; (8004abc <HAL_RTC_MspInit+0x94>)
 8004a78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a7c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004a80:	4b0e      	ldr	r3, [pc, #56]	; (8004abc <HAL_RTC_MspInit+0x94>)
 8004a82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a86:	4a0d      	ldr	r2, [pc, #52]	; (8004abc <HAL_RTC_MspInit+0x94>)
 8004a88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a8c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8004a90:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <HAL_RTC_MspInit+0x94>)
 8004a92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	2002      	movs	r0, #2
 8004aa4:	f002 fe71 	bl	800778a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8004aa8:	2002      	movs	r0, #2
 8004aaa:	f002 fe88 	bl	80077be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004aae:	bf00      	nop
 8004ab0:	37d8      	adds	r7, #216	; 0xd8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	46007800 	.word	0x46007800
 8004abc:	46020c00 	.word	0x46020c00

08004ac0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b0c4      	sub	sp, #272	; 0x110
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004aca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ace:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ad0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	605a      	str	r2, [r3, #4]
 8004ada:	609a      	str	r2, [r3, #8]
 8004adc:	60da      	str	r2, [r3, #12]
 8004ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ae0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ae4:	22c8      	movs	r2, #200	; 0xc8
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f00a f968 	bl	800edbe <memset>
  if(hspi->Instance==SPI1)
 8004aee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004af2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4acd      	ldr	r2, [pc, #820]	; (8004e30 <HAL_SPI_MspInit+0x370>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d16b      	bne.n	8004bd8 <HAL_SPI_MspInit+0x118>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004b00:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8004b0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004b10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f005 fcbf 	bl	800a49c <HAL_RCCEx_PeriphCLKConfig>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 8004b24:	f7fe fc68 	bl	80033f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004b28:	4bc2      	ldr	r3, [pc, #776]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004b2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b2e:	4ac1      	ldr	r2, [pc, #772]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004b30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b34:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8004b38:	4bbe      	ldr	r3, [pc, #760]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004b3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b46:	4bbb      	ldr	r3, [pc, #748]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b4c:	4ab9      	ldr	r2, [pc, #740]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004b4e:	f043 0301 	orr.w	r3, r3, #1
 8004b52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b56:	4bb7      	ldr	r3, [pc, #732]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b64:	4bb3      	ldr	r3, [pc, #716]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b6a:	4ab2      	ldr	r2, [pc, #712]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004b6c:	f043 0302 	orr.w	r3, r3, #2
 8004b70:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b74:	4baf      	ldr	r3, [pc, #700]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004b76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB0     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004b82:	23e0      	movs	r3, #224	; 0xe0
 8004b84:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b88:	2302      	movs	r3, #2
 8004b8a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b94:	2300      	movs	r3, #0
 8004b96:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004b9a:	2305      	movs	r3, #5
 8004b9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ba0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	48a4      	ldr	r0, [pc, #656]	; (8004e38 <HAL_SPI_MspInit+0x378>)
 8004ba8:	f002 fe24 	bl	80077f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004bac:	2301      	movs	r3, #1
 8004bae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004bc4:	2305      	movs	r3, #5
 8004bc6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bca:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004bce:	4619      	mov	r1, r3
 8004bd0:	489a      	ldr	r0, [pc, #616]	; (8004e3c <HAL_SPI_MspInit+0x37c>)
 8004bd2:	f002 fe0f 	bl	80077f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004bd6:	e126      	b.n	8004e26 <HAL_SPI_MspInit+0x366>
  else if(hspi->Instance==SPI2)
 8004bd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004bdc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a96      	ldr	r2, [pc, #600]	; (8004e40 <HAL_SPI_MspInit+0x380>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	f040 8091 	bne.w	8004d0e <HAL_SPI_MspInit+0x24e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8004bec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 8004bf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bfc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c04:	4618      	mov	r0, r3
 8004c06:	f005 fc49 	bl	800a49c <HAL_RCCEx_PeriphCLKConfig>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <HAL_SPI_MspInit+0x154>
      Error_Handler();
 8004c10:	f7fe fbf2 	bl	80033f8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004c14:	4b87      	ldr	r3, [pc, #540]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004c16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c1a:	4a86      	ldr	r2, [pc, #536]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c20:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004c24:	4b83      	ldr	r3, [pc, #524]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004c26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c2e:	623b      	str	r3, [r7, #32]
 8004c30:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c32:	4b80      	ldr	r3, [pc, #512]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c38:	4a7e      	ldr	r2, [pc, #504]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004c3a:	f043 0304 	orr.w	r3, r3, #4
 8004c3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004c42:	4b7c      	ldr	r3, [pc, #496]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	61fb      	str	r3, [r7, #28]
 8004c4e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c50:	4b78      	ldr	r3, [pc, #480]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c56:	4a77      	ldr	r2, [pc, #476]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004c58:	f043 0302 	orr.w	r3, r3, #2
 8004c5c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004c60:	4b74      	ldr	r3, [pc, #464]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	61bb      	str	r3, [r7, #24]
 8004c6c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c6e:	4b71      	ldr	r3, [pc, #452]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c74:	4a6f      	ldr	r2, [pc, #444]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004c76:	f043 0308 	orr.w	r3, r3, #8
 8004c7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004c7e:	4b6d      	ldr	r3, [pc, #436]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004c8c:	2308      	movs	r3, #8
 8004c8e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c92:	2302      	movs	r3, #2
 8004c94:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004ca4:	2305      	movs	r3, #5
 8004ca6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004caa:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4864      	ldr	r0, [pc, #400]	; (8004e44 <HAL_SPI_MspInit+0x384>)
 8004cb2:	f002 fd9f 	bl	80077f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004cd0:	2305      	movs	r3, #5
 8004cd2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cd6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004cda:	4619      	mov	r1, r3
 8004cdc:	4857      	ldr	r0, [pc, #348]	; (8004e3c <HAL_SPI_MspInit+0x37c>)
 8004cde:	f002 fd89 	bl	80077f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8004ce2:	2309      	movs	r3, #9
 8004ce4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ce8:	2302      	movs	r3, #2
 8004cea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004cfa:	2305      	movs	r3, #5
 8004cfc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d00:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004d04:	4619      	mov	r1, r3
 8004d06:	4850      	ldr	r0, [pc, #320]	; (8004e48 <HAL_SPI_MspInit+0x388>)
 8004d08:	f002 fd74 	bl	80077f4 <HAL_GPIO_Init>
}
 8004d0c:	e08b      	b.n	8004e26 <HAL_SPI_MspInit+0x366>
  else if(hspi->Instance==SPI3)
 8004d0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a4c      	ldr	r2, [pc, #304]	; (8004e4c <HAL_SPI_MspInit+0x38c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	f040 8082 	bne.w	8004e26 <HAL_SPI_MspInit+0x366>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8004d22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d26:	f04f 0300 	mov.w	r3, #0
 8004d2a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_SYSCLK;
 8004d2e:	2308      	movs	r3, #8
 8004d30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f005 fbaf 	bl	800a49c <HAL_RCCEx_PeriphCLKConfig>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <HAL_SPI_MspInit+0x288>
      Error_Handler();
 8004d44:	f7fe fb58 	bl	80033f8 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004d48:	4b3a      	ldr	r3, [pc, #232]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004d4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d4e:	4a39      	ldr	r2, [pc, #228]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004d50:	f043 0320 	orr.w	r3, r3, #32
 8004d54:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8004d58:	4b36      	ldr	r3, [pc, #216]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004d5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d5e:	f003 0220 	and.w	r2, r3, #32
 8004d62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d66:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d70:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004d74:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d76:	4b2f      	ldr	r3, [pc, #188]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d7c:	4a2d      	ldr	r2, [pc, #180]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004d7e:	f043 0301 	orr.w	r3, r3, #1
 8004d82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004d86:	4b2b      	ldr	r3, [pc, #172]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d8c:	f003 0201 	and.w	r2, r3, #1
 8004d90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004da2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004da4:	4b23      	ldr	r3, [pc, #140]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004daa:	4a22      	ldr	r2, [pc, #136]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004dac:	f043 0302 	orr.w	r3, r3, #2
 8004db0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004db4:	4b1f      	ldr	r3, [pc, #124]	; (8004e34 <HAL_SPI_MspInit+0x374>)
 8004db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dba:	f003 0202 	and.w	r2, r3, #2
 8004dbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004dc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dd0:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004dd2:	2310      	movs	r3, #16
 8004dd4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dd8:	2302      	movs	r3, #2
 8004dda:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004de4:	2300      	movs	r3, #0
 8004de6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004dea:	2306      	movs	r3, #6
 8004dec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004df0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004df4:	4619      	mov	r1, r3
 8004df6:	4810      	ldr	r0, [pc, #64]	; (8004e38 <HAL_SPI_MspInit+0x378>)
 8004df8:	f002 fcfc 	bl	80077f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004dfc:	2338      	movs	r3, #56	; 0x38
 8004dfe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e02:	2302      	movs	r3, #2
 8004e04:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004e14:	2306      	movs	r3, #6
 8004e16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e1a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4806      	ldr	r0, [pc, #24]	; (8004e3c <HAL_SPI_MspInit+0x37c>)
 8004e22:	f002 fce7 	bl	80077f4 <HAL_GPIO_Init>
}
 8004e26:	bf00      	nop
 8004e28:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40013000 	.word	0x40013000
 8004e34:	46020c00 	.word	0x46020c00
 8004e38:	42020000 	.word	0x42020000
 8004e3c:	42020400 	.word	0x42020400
 8004e40:	40003800 	.word	0x40003800
 8004e44:	42020800 	.word	0x42020800
 8004e48:	42020c00 	.word	0x42020c00
 8004e4c:	46002000 	.word	0x46002000

08004e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b0bc      	sub	sp, #240	; 0xf0
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e58:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	605a      	str	r2, [r3, #4]
 8004e62:	609a      	str	r2, [r3, #8]
 8004e64:	60da      	str	r2, [r3, #12]
 8004e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004e68:	f107 0310 	add.w	r3, r7, #16
 8004e6c:	22c8      	movs	r2, #200	; 0xc8
 8004e6e:	2100      	movs	r1, #0
 8004e70:	4618      	mov	r0, r3
 8004e72:	f009 ffa4 	bl	800edbe <memset>
  if(huart->Instance==USART1)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a26      	ldr	r2, [pc, #152]	; (8004f14 <HAL_UART_MspInit+0xc4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d145      	bne.n	8004f0c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004e80:	f04f 0201 	mov.w	r2, #1
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e90:	f107 0310 	add.w	r3, r7, #16
 8004e94:	4618      	mov	r0, r3
 8004e96:	f005 fb01 	bl	800a49c <HAL_RCCEx_PeriphCLKConfig>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8004ea0:	f7fe faaa 	bl	80033f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004ea4:	4b1c      	ldr	r3, [pc, #112]	; (8004f18 <HAL_UART_MspInit+0xc8>)
 8004ea6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004eaa:	4a1b      	ldr	r2, [pc, #108]	; (8004f18 <HAL_UART_MspInit+0xc8>)
 8004eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004eb0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8004eb4:	4b18      	ldr	r3, [pc, #96]	; (8004f18 <HAL_UART_MspInit+0xc8>)
 8004eb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ec2:	4b15      	ldr	r3, [pc, #84]	; (8004f18 <HAL_UART_MspInit+0xc8>)
 8004ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ec8:	4a13      	ldr	r2, [pc, #76]	; (8004f18 <HAL_UART_MspInit+0xc8>)
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004ed2:	4b11      	ldr	r3, [pc, #68]	; (8004f18 <HAL_UART_MspInit+0xc8>)
 8004ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	60bb      	str	r3, [r7, #8]
 8004ede:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004ee0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004ee4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee8:	2302      	movs	r3, #2
 8004eea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004efa:	2307      	movs	r3, #7
 8004efc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f00:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004f04:	4619      	mov	r1, r3
 8004f06:	4805      	ldr	r0, [pc, #20]	; (8004f1c <HAL_UART_MspInit+0xcc>)
 8004f08:	f002 fc74 	bl	80077f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004f0c:	bf00      	nop
 8004f0e:	37f0      	adds	r7, #240	; 0xf0
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40013800 	.word	0x40013800
 8004f18:	46020c00 	.word	0x46020c00
 8004f1c:	42020000 	.word	0x42020000

08004f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004f24:	e7fe      	b.n	8004f24 <NMI_Handler+0x4>

08004f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f26:	b480      	push	{r7}
 8004f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f2a:	e7fe      	b.n	8004f2a <HardFault_Handler+0x4>

08004f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f30:	e7fe      	b.n	8004f30 <MemManage_Handler+0x4>

08004f32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f32:	b480      	push	{r7}
 8004f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f36:	e7fe      	b.n	8004f36 <BusFault_Handler+0x4>

08004f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f3c:	e7fe      	b.n	8004f3c <UsageFault_Handler+0x4>

08004f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f42:	bf00      	nop
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f50:	bf00      	nop
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f5e:	bf00      	nop
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f6c:	f7ff fb48 	bl	8004600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f70:	bf00      	nop
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupt.
  */
void RTC_IRQHandler(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_TimeStampIRQHandler(&hrtc);
 8004f78:	4802      	ldr	r0, [pc, #8]	; (8004f84 <RTC_IRQHandler+0x10>)
 8004f7a:	f008 fad3 	bl	800d524 <HAL_RTCEx_TimeStampIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8004f7e:	bf00      	nop
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	200003d8 	.word	0x200003d8

08004f88 <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_LPS27HHW_Pin);
 8004f8c:	2040      	movs	r0, #64	; 0x40
 8004f8e:	f002 fe21 	bl	8007bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8004f92:	bf00      	nop
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_LSM6DSOX_INT2_Pin);
 8004f9a:	2080      	movs	r0, #128	; 0x80
 8004f9c:	f002 fe1a 	bl	8007bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8004fa0:	bf00      	nop
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_LSM6DSOX_INT1_Pin);
 8004fa8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004fac:	f002 fe12 	bl	8007bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 8004fb0:	bf00      	nop
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <EXTI9_IRQHandler>:

/**
  * @brief This function handles EXTI Line9 interrupt.
  */
void EXTI9_IRQHandler(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_IRQn 0 */

  /* USER CODE END EXTI9_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_LIS3MDL_Pin);
 8004fb8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004fbc:	f002 fe0a 	bl	8007bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_IRQn 1 */

  /* USER CODE END EXTI9_IRQn 1 */
}
 8004fc0:	bf00      	nop
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_LSM6DSO32_INT1_Pin);
 8004fc8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004fcc:	f002 fe02 	bl	8007bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 8004fd0:	bf00      	nop
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_ADXL375_Pin);
 8004fd8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004fdc:	f002 fdfa 	bl	8007bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8004fe0:	bf00      	nop
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <EXTI12_IRQHandler>:

/**
  * @brief This function handles EXTI Line12 interrupt.
  */
void EXTI12_IRQHandler(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI12_IRQn 0 */

  /* USER CODE END EXTI12_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_LSM6DSO32_INT2_Pin);
 8004fe8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004fec:	f002 fdf2 	bl	8007bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI12_IRQn 1 */

  /* USER CODE END EXTI12_IRQn 1 */
}
 8004ff0:	bf00      	nop
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 (12bits) global interrupt.
  */
void ADC4_IRQHandler(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 8004ff8:	4802      	ldr	r0, [pc, #8]	; (8005004 <ADC4_IRQHandler+0x10>)
 8004ffa:	f001 f9f1 	bl	80063e0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 8004ffe:	bf00      	nop
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	2000021c 	.word	0x2000021c

08005008 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
	return 1;
 800500c:	2301      	movs	r3, #1
}
 800500e:	4618      	mov	r0, r3
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <_kill>:

int _kill(int pid, int sig)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005022:	f009 fe95 	bl	800ed50 <__errno>
 8005026:	4603      	mov	r3, r0
 8005028:	2216      	movs	r2, #22
 800502a:	601a      	str	r2, [r3, #0]
	return -1;
 800502c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <_exit>:

void _exit (int status)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005040:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f7ff ffe7 	bl	8005018 <_kill>
	while (1) {}		/* Make sure we hang here */
 800504a:	e7fe      	b.n	800504a <_exit+0x12>

0800504c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005058:	2300      	movs	r3, #0
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	e00a      	b.n	8005074 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800505e:	e000      	b.n	8005062 <_read+0x16>
 8005060:	bf00      	nop
 8005062:	4601      	mov	r1, r0
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	60ba      	str	r2, [r7, #8]
 800506a:	b2ca      	uxtb	r2, r1
 800506c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	3301      	adds	r3, #1
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	429a      	cmp	r2, r3
 800507a:	dbf0      	blt.n	800505e <_read+0x12>
	}

return len;
 800507c:	687b      	ldr	r3, [r7, #4]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3718      	adds	r7, #24
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b086      	sub	sp, #24
 800508a:	af00      	add	r7, sp, #0
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005092:	2300      	movs	r3, #0
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	e009      	b.n	80050ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	60ba      	str	r2, [r7, #8]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	4618      	mov	r0, r3
 80050a2:	e000      	b.n	80050a6 <_write+0x20>
 80050a4:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	3301      	adds	r3, #1
 80050aa:	617b      	str	r3, [r7, #20]
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	dbf1      	blt.n	8005098 <_write+0x12>
	}
	return len;
 80050b4:	687b      	ldr	r3, [r7, #4]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <_close>:

int _close(int file)
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
	return -1;
 80050c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80050e6:	605a      	str	r2, [r3, #4]
	return 0;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <_isatty>:

int _isatty(int file)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
	return 1;
 80050fe:	2301      	movs	r3, #1
}
 8005100:	4618      	mov	r0, r3
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
	return 0;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
	...

08005128 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005130:	4a14      	ldr	r2, [pc, #80]	; (8005184 <_sbrk+0x5c>)
 8005132:	4b15      	ldr	r3, [pc, #84]	; (8005188 <_sbrk+0x60>)
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800513c:	4b13      	ldr	r3, [pc, #76]	; (800518c <_sbrk+0x64>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d102      	bne.n	800514a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005144:	4b11      	ldr	r3, [pc, #68]	; (800518c <_sbrk+0x64>)
 8005146:	4a12      	ldr	r2, [pc, #72]	; (8005190 <_sbrk+0x68>)
 8005148:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800514a:	4b10      	ldr	r3, [pc, #64]	; (800518c <_sbrk+0x64>)
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4413      	add	r3, r2
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	429a      	cmp	r2, r3
 8005156:	d207      	bcs.n	8005168 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005158:	f009 fdfa 	bl	800ed50 <__errno>
 800515c:	4603      	mov	r3, r0
 800515e:	220c      	movs	r2, #12
 8005160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005166:	e009      	b.n	800517c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005168:	4b08      	ldr	r3, [pc, #32]	; (800518c <_sbrk+0x64>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800516e:	4b07      	ldr	r3, [pc, #28]	; (800518c <_sbrk+0x64>)
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4413      	add	r3, r2
 8005176:	4a05      	ldr	r2, [pc, #20]	; (800518c <_sbrk+0x64>)
 8005178:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800517a:	68fb      	ldr	r3, [r7, #12]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	200c0000 	.word	0x200c0000
 8005188:	00000400 	.word	0x00000400
 800518c:	20000664 	.word	0x20000664
 8005190:	20000680 	.word	0x20000680

08005194 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005198:	4b18      	ldr	r3, [pc, #96]	; (80051fc <SystemInit+0x68>)
 800519a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519e:	4a17      	ldr	r2, [pc, #92]	; (80051fc <SystemInit+0x68>)
 80051a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80051a8:	4b15      	ldr	r3, [pc, #84]	; (8005200 <SystemInit+0x6c>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80051ae:	4b14      	ldr	r3, [pc, #80]	; (8005200 <SystemInit+0x6c>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80051b4:	4b12      	ldr	r3, [pc, #72]	; (8005200 <SystemInit+0x6c>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80051ba:	4b11      	ldr	r3, [pc, #68]	; (8005200 <SystemInit+0x6c>)
 80051bc:	2200      	movs	r2, #0
 80051be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80051c0:	4b0f      	ldr	r3, [pc, #60]	; (8005200 <SystemInit+0x6c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a0e      	ldr	r2, [pc, #56]	; (8005200 <SystemInit+0x6c>)
 80051c6:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80051ca:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80051ce:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80051d0:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <SystemInit+0x6c>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80051d6:	4b0a      	ldr	r3, [pc, #40]	; (8005200 <SystemInit+0x6c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a09      	ldr	r2, [pc, #36]	; (8005200 <SystemInit+0x6c>)
 80051dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80051e2:	4b07      	ldr	r3, [pc, #28]	; (8005200 <SystemInit+0x6c>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80051e8:	4b04      	ldr	r3, [pc, #16]	; (80051fc <SystemInit+0x68>)
 80051ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80051ee:	609a      	str	r2, [r3, #8]
  #endif
}
 80051f0:	bf00      	nop
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	e000ed00 	.word	0xe000ed00
 8005200:	46020c00 	.word	0x46020c00

08005204 <sensorsInit>:
 */
uint8_t sensorsInit(I2C_HandleTypeDef I2C_Periph1 , I2C_HandleTypeDef I2C_Periph2 ,
		I2C_HandleTypeDef I2C_Periph3 , I2C_HandleTypeDef I2C_Periph4 ,
		SPI_HandleTypeDef SPI_Periph1 , SPI_HandleTypeDef SPI_Periph2 ,
		SPI_HandleTypeDef SPI_Periph3 , ADC_HandleTypeDef ADC_Perpiph1 )
{
 8005204:	b084      	sub	sp, #16
 8005206:	b5b0      	push	{r4, r5, r7, lr}
 8005208:	b0a2      	sub	sp, #136	; 0x88
 800520a:	af20      	add	r7, sp, #128	; 0x80
 800520c:	f107 0418 	add.w	r4, r7, #24
 8005210:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t ret_status = HAL_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	71fb      	strb	r3, [r7, #7]

	//Get an instance of the pointer of structure holding the
	//data-ready flags
	getFlagPtr();
 8005218:	f7ff f964 	bl	80044e4 <getFlagPtr>

	//LIS3MDL initialization
	if(HAL_OK != lis3mdlI2CWhoami(I2C_Periph1))
 800521c:	466d      	mov	r5, sp
 800521e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800522a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800522c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800522e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005232:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005236:	f107 0318 	add.w	r3, r7, #24
 800523a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800523c:	f7fc fc1a 	bl	8001a74 <lis3mdlI2CWhoami>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <sensorsInit+0x46>
		ret_status = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK != lis3mdlI2CSetup(I2C_Periph1))
 800524a:	466d      	mov	r5, sp
 800524c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005250:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005252:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800525a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800525c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005260:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005264:	f107 0318 	add.w	r3, r7, #24
 8005268:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800526a:	f7fc fc33 	bl	8001ad4 <lis3mdlI2CSetup>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <sensorsInit+0x74>
		ret_status = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	71fb      	strb	r3, [r7, #7]

	//LSMDSOX initialization
	if(HAL_OK != lsm6dsoxI2CWhoami(I2C_Periph1))
 8005278:	466d      	mov	r5, sp
 800527a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800527e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005284:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005288:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800528a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800528e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005292:	f107 0318 	add.w	r3, r7, #24
 8005296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005298:	f7fd f8cc 	bl	8002434 <lsm6dsoxI2CWhoami>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <sensorsInit+0xa2>
		ret_status = HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK != lsm6dsoxI2CSetup(I2C_Periph1))
 80052a6:	466d      	mov	r5, sp
 80052a8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80052ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052b8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80052bc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80052c0:	f107 0318 	add.w	r3, r7, #24
 80052c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052c6:	f7fd f8e5 	bl	8002494 <lsm6dsoxI2CSetup>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <sensorsInit+0xd0>
		ret_status = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	71fb      	strb	r3, [r7, #7]

	//AHT20 initialization
	if(HAL_OK != aht20TempHumiditySetup(I2C_Periph2))
 80052d4:	466d      	mov	r5, sp
 80052d6:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80052da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052e6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80052ea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80052ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80052f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052f4:	f7fc f801 	bl	80012fa <aht20TempHumiditySetup>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <sensorsInit+0xfe>
		ret_status = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	71fb      	strb	r3, [r7, #7]

	//LIS2MDL initialization
	if(HAL_OK != lis2mdlI2CWhoami(I2C_Periph3))
 8005302:	466d      	mov	r5, sp
 8005304:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8005308:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800530a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800530c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800530e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005312:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005314:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005318:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800531c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005320:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005322:	f7fc fa8e 	bl	8001842 <lis2mdlI2CWhoami>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <sensorsInit+0x12c>
		ret_status = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK != lis2mdlI2CSetup(I2C_Periph3))
 8005330:	466d      	mov	r5, sp
 8005332:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8005336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800533a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800533c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800533e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005340:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005342:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005346:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800534a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800534e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005350:	f7fc faa7 	bl	80018a2 <lis2mdlI2CSetup>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <sensorsInit+0x15a>
		ret_status = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	71fb      	strb	r3, [r7, #7]

	//BH1750 initialization
	if(HAL_OK != bh1750I2CSetup(I2C_Periph4))
 800535e:	466d      	mov	r5, sp
 8005360:	f507 7486 	add.w	r4, r7, #268	; 0x10c
 8005364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005366:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005368:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800536a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800536c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800536e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005370:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005374:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005378:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800537c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800537e:	f7fc f8ff 	bl	8001580 <bh1750I2CSetup>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <sensorsInit+0x188>
		ret_status = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	71fb      	strb	r3, [r7, #7]

	//LPS27HHW initialization
	if(HAL_OK != lps227SPIWhoami(SPI_Periph1))
 800538c:	4668      	mov	r0, sp
 800538e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005392:	2280      	movs	r2, #128	; 0x80
 8005394:	4619      	mov	r1, r3
 8005396:	f009 fd05 	bl	800eda4 <memcpy>
 800539a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800539e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053a0:	f7fc fc74 	bl	8001c8c <lps227SPIWhoami>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <sensorsInit+0x1aa>
		ret_status = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK != lps277SPISetup(SPI_Periph1))
 80053ae:	4668      	mov	r0, sp
 80053b0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80053b4:	2280      	movs	r2, #128	; 0x80
 80053b6:	4619      	mov	r1, r3
 80053b8:	f009 fcf4 	bl	800eda4 <memcpy>
 80053bc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80053c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053c2:	f7fc fc92 	bl	8001cea <lps277SPISetup>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <sensorsInit+0x1cc>
		ret_status = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	71fb      	strb	r3, [r7, #7]

	//LSM6DS032 initialization
	if(HAL_OK != lsm6dso32SPIWhoami(SPI_Periph2))
 80053d0:	4668      	mov	r0, sp
 80053d2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80053d6:	2280      	movs	r2, #128	; 0x80
 80053d8:	4619      	mov	r1, r3
 80053da:	f009 fce3 	bl	800eda4 <memcpy>
 80053de:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80053e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053e4:	f7fc fdce 	bl	8001f84 <lsm6dso32SPIWhoami>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <sensorsInit+0x1ee>
		ret_status = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK != lsm6dso32SPISetup(SPI_Periph2))
 80053f2:	4668      	mov	r0, sp
 80053f4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80053f8:	2280      	movs	r2, #128	; 0x80
 80053fa:	4619      	mov	r1, r3
 80053fc:	f009 fcd2 	bl	800eda4 <memcpy>
 8005400:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8005404:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005406:	f7fc fdec 	bl	8001fe2 <lsm6dso32SPISetup>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <sensorsInit+0x210>
		ret_status = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	71fb      	strb	r3, [r7, #7]

	//ADXL375 initialization
	if(HAL_OK != adxl375SPIWhoami(SPI_Periph3))
 8005414:	4668      	mov	r0, sp
 8005416:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800541a:	2280      	movs	r2, #128	; 0x80
 800541c:	4619      	mov	r1, r3
 800541e:	f009 fcc1 	bl	800eda4 <memcpy>
 8005422:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8005426:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005428:	f7fb fdd3 	bl	8000fd2 <adxl375SPIWhoami>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <sensorsInit+0x232>
		ret_status = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK != adxl375SPISetup(SPI_Periph3))
 8005436:	4668      	mov	r0, sp
 8005438:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800543c:	2280      	movs	r2, #128	; 0x80
 800543e:	4619      	mov	r1, r3
 8005440:	f009 fcb0 	bl	800eda4 <memcpy>
 8005444:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8005448:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800544a:	f7fb fdf1 	bl	8001030 <adxl375SPISetup>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <sensorsInit+0x254>
		ret_status = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	71fb      	strb	r3, [r7, #7]

	//Trigger ADC connected to the internal temperature sensor channel
	triggerADCIRQ(ADC_Perpiph1);
 8005458:	4668      	mov	r0, sp
 800545a:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800545e:	227c      	movs	r2, #124	; 0x7c
 8005460:	4619      	mov	r1, r3
 8005462:	f009 fc9f 	bl	800eda4 <memcpy>
 8005466:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800546a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800546c:	f7fb fda0 	bl	8000fb0 <triggerADCIRQ>

	return ret_status;
 8005470:	79fb      	ldrb	r3, [r7, #7]

}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800547c:	b004      	add	sp, #16
 800547e:	4770      	bx	lr

08005480 <HAL_GetTick>:
  * @brief User implementation of the _weak HAL_GetTick()
  * @note Refer to stm32u5xx_hal.c for default implementation
  * @retval uint32_t tick value
*/
uint32_t HAL_GetTick(void)
{
 8005480:	b480      	push	{r7}
 8005482:	af00      	add	r7, sp, #0
  return time_ticks;
 8005484:	4b03      	ldr	r3, [pc, #12]	; (8005494 <HAL_GetTick+0x14>)
 8005486:	681b      	ldr	r3, [r3, #0]
}
 8005488:	4618      	mov	r0, r3
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	20000668 	.word	0x20000668

08005498 <HAL_Delay>:
  * 	   Provides a delay of 1 millisecond
  * @note Refer to stm32u5xx_hal.c for default implementation
  * @retval uint32_t tick value
*/
void HAL_Delay(uint32_t Delay)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054a0:	f7ff ffee 	bl	8005480 <HAL_GetTick>
 80054a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054b0:	d005      	beq.n	80054be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(tick_freq);
 80054b2:	4b0a      	ldr	r3, [pc, #40]	; (80054dc <HAL_Delay+0x44>)
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4413      	add	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80054be:	bf00      	nop
 80054c0:	f7ff ffde 	bl	8005480 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d8f7      	bhi.n	80054c0 <HAL_Delay+0x28>
  {
  }
}
 80054d0:	bf00      	nop
 80054d2:	bf00      	nop
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	20000024 	.word	0x20000024

080054e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80054e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005518 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80054e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80054e6:	e003      	b.n	80054f0 <LoopCopyDataInit>

080054e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80054e8:	4b0c      	ldr	r3, [pc, #48]	; (800551c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80054ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80054ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80054ee:	3104      	adds	r1, #4

080054f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80054f0:	480b      	ldr	r0, [pc, #44]	; (8005520 <LoopForever+0xa>)
	ldr	r3, =_edata
 80054f2:	4b0c      	ldr	r3, [pc, #48]	; (8005524 <LoopForever+0xe>)
	adds	r2, r0, r1
 80054f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80054f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80054f8:	d3f6      	bcc.n	80054e8 <CopyDataInit>
	ldr	r2, =_sbss
 80054fa:	4a0b      	ldr	r2, [pc, #44]	; (8005528 <LoopForever+0x12>)
	b	LoopFillZerobss
 80054fc:	e002      	b.n	8005504 <LoopFillZerobss>

080054fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80054fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005500:	f842 3b04 	str.w	r3, [r2], #4

08005504 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005504:	4b09      	ldr	r3, [pc, #36]	; (800552c <LoopForever+0x16>)
	cmp	r2, r3
 8005506:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005508:	d3f9      	bcc.n	80054fe <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800550a:	f7ff fe43 	bl	8005194 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800550e:	f009 fc25 	bl	800ed5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005512:	f7fd f8e7 	bl	80026e4 <main>

08005516 <LoopForever>:

LoopForever:
    b LoopForever
 8005516:	e7fe      	b.n	8005516 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8005518:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 800551c:	08012204 	.word	0x08012204
	ldr	r0, =_sdata
 8005520:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005524:	20000200 	.word	0x20000200
	ldr	r2, =_sbss
 8005528:	20000200 	.word	0x20000200
	ldr	r3, = _ebss
 800552c:	2000067b 	.word	0x2000067b

08005530 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005530:	e7fe      	b.n	8005530 <ADC1_IRQHandler>
	...

08005534 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005538:	4b11      	ldr	r3, [pc, #68]	; (8005580 <HAL_Init+0x4c>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a10      	ldr	r2, [pc, #64]	; (8005580 <HAL_Init+0x4c>)
 800553e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005542:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005544:	2003      	movs	r0, #3
 8005546:	f002 f915 	bl	8007774 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800554a:	f004 fdc3 	bl	800a0d4 <HAL_RCC_GetSysClockFreq>
 800554e:	4602      	mov	r2, r0
 8005550:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <HAL_Init+0x50>)
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	f003 030f 	and.w	r3, r3, #15
 8005558:	490b      	ldr	r1, [pc, #44]	; (8005588 <HAL_Init+0x54>)
 800555a:	5ccb      	ldrb	r3, [r1, r3]
 800555c:	fa22 f303 	lsr.w	r3, r2, r3
 8005560:	4a0a      	ldr	r2, [pc, #40]	; (800558c <HAL_Init+0x58>)
 8005562:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005564:	2000      	movs	r0, #0
 8005566:	f000 f813 	bl	8005590 <HAL_InitTick>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e002      	b.n	800557a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005574:	f7ff f880 	bl	8004678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	40022000 	.word	0x40022000
 8005584:	46020c00 	.word	0x46020c00
 8005588:	08011d1c 	.word	0x08011d1c
 800558c:	20000020 	.word	0x20000020

08005590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8005598:	4b15      	ldr	r3, [pc, #84]	; (80055f0 <HAL_InitTick+0x60>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e021      	b.n	80055e8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80055a4:	4b13      	ldr	r3, [pc, #76]	; (80055f4 <HAL_InitTick+0x64>)
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	4b11      	ldr	r3, [pc, #68]	; (80055f0 <HAL_InitTick+0x60>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	4619      	mov	r1, r3
 80055ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80055b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ba:	4618      	mov	r0, r3
 80055bc:	f002 f90d 	bl	80077da <HAL_SYSTICK_Config>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e00e      	b.n	80055e8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b0f      	cmp	r3, #15
 80055ce:	d80a      	bhi.n	80055e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055d0:	2200      	movs	r2, #0
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055d8:	f002 f8d7 	bl	800778a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80055dc:	4a06      	ldr	r2, [pc, #24]	; (80055f8 <HAL_InitTick+0x68>)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	e000      	b.n	80055e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	2000002c 	.word	0x2000002c
 80055f4:	20000020 	.word	0x20000020
 80055f8:	20000028 	.word	0x20000028

080055fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8005600:	4b04      	ldr	r3, [pc, #16]	; (8005614 <HAL_GetREVID+0x18>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	0c1b      	lsrs	r3, r3, #16
 8005606:	b29b      	uxth	r3, r3
}
 8005608:	4618      	mov	r0, r3
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	e0044000 	.word	0xe0044000

08005618 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	601a      	str	r2, [r3, #0]
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	431a      	orrs	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	601a      	str	r2, [r3, #0]
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005674:	4618      	mov	r0, r3
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3360      	adds	r3, #96	; 0x60
 8005692:	461a      	mov	r2, r3
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	430b      	orrs	r3, r1
 80056b0:	431a      	orrs	r2, r3
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 80056b6:	bf00      	nop
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b087      	sub	sp, #28
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3360      	adds	r3, #96	; 0x60
 80056d2:	461a      	mov	r2, r3
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	431a      	orrs	r2, r3
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	601a      	str	r2, [r3, #0]
}
 80056ec:	bf00      	nop
 80056ee:	371c      	adds	r7, #28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3360      	adds	r3, #96	; 0x60
 8005708:	461a      	mov	r2, r3
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	431a      	orrs	r2, r3
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	601a      	str	r2, [r3, #0]
}
 8005722:	bf00      	nop
 8005724:	371c      	adds	r7, #28
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005740:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	431a      	orrs	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005750:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	2a00      	cmp	r2, #0
 8005758:	d002      	beq.n	8005760 <LL_ADC_SetGainCompensation+0x32>
 800575a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800575e:	e000      	b.n	8005762 <LL_ADC_SetGainCompensation+0x34>
 8005760:	2200      	movs	r2, #0
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	695a      	ldr	r2, [r3, #20]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f003 0304 	and.w	r3, r3, #4
 800578a:	2107      	movs	r1, #7
 800578c:	fa01 f303 	lsl.w	r3, r1, r3
 8005790:	43db      	mvns	r3, r3
 8005792:	401a      	ands	r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f003 0304 	and.w	r3, r3, #4
 800579a:	6879      	ldr	r1, [r7, #4]
 800579c:	fa01 f303 	lsl.w	r3, r1, r3
 80057a0:	431a      	orrs	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80057a6:	bf00      	nop
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80057c6:	2301      	movs	r3, #1
 80057c8:	e000      	b.n	80057cc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80057d8:	b480      	push	{r7}
 80057da:	b089      	sub	sp, #36	; 0x24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4a2b      	ldr	r2, [pc, #172]	; (8005894 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d020      	beq.n	800582e <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	3330      	adds	r3, #48	; 0x30
 80057f0:	461a      	mov	r2, r3
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	0a1b      	lsrs	r3, r3, #8
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	f003 030c 	and.w	r3, r3, #12
 80057fc:	4413      	add	r3, r2
 80057fe:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f003 031f 	and.w	r3, r3, #31
 800580a:	211f      	movs	r1, #31
 800580c:	fa01 f303 	lsl.w	r3, r1, r3
 8005810:	43db      	mvns	r3, r3
 8005812:	401a      	ands	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	0e9b      	lsrs	r3, r3, #26
 8005818:	f003 011f 	and.w	r1, r3, #31
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	f003 031f 	and.w	r3, r3, #31
 8005822:	fa01 f303 	lsl.w	r3, r1, r3
 8005826:	431a      	orrs	r2, r3
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 800582c:	e02b      	b.n	8005886 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	f003 031f 	and.w	r3, r3, #31
 8005838:	210f      	movs	r1, #15
 800583a:	fa01 f303 	lsl.w	r3, r1, r3
 800583e:	43db      	mvns	r3, r3
 8005840:	401a      	ands	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d104      	bne.n	8005856 <LL_ADC_REG_SetSequencerRanks+0x7e>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	0e9b      	lsrs	r3, r3, #26
 8005850:	f003 031f 	and.w	r3, r3, #31
 8005854:	e010      	b.n	8005878 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	fa93 f3a3 	rbit	r3, r3
 8005860:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <LL_ADC_REG_SetSequencerRanks+0x98>
  {
    return 32U;
 800586c:	2320      	movs	r3, #32
 800586e:	e003      	b.n	8005878 <LL_ADC_REG_SetSequencerRanks+0xa0>
  }
  return __builtin_clz(value);
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	fab3 f383 	clz	r3, r3
 8005876:	b2db      	uxtb	r3, r3
 8005878:	68b9      	ldr	r1, [r7, #8]
 800587a:	f001 011f 	and.w	r1, r1, #31
 800587e:	408b      	lsls	r3, r1
 8005880:	431a      	orrs	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005886:	bf00      	nop
 8005888:	3724      	adds	r7, #36	; 0x24
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	46021000 	.word	0x46021000

08005898 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d107      	bne.n	80058bc <LL_ADC_REG_SetSequencerChAdd+0x24>
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	0e9b      	lsrs	r3, r3, #26
 80058b0:	f003 031f 	and.w	r3, r3, #31
 80058b4:	2201      	movs	r2, #1
 80058b6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ba:	e015      	b.n	80058e8 <LL_ADC_REG_SetSequencerChAdd+0x50>
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	fa93 f3a3 	rbit	r3, r3
 80058c6:	60fb      	str	r3, [r7, #12]
  return result;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 80058d2:	2320      	movs	r3, #32
 80058d4:	e003      	b.n	80058de <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	fab3 f383 	clz	r3, r3
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	f003 031f 	and.w	r3, r3, #31
 80058e2:	2201      	movs	r2, #1
 80058e4:	fa02 f303 	lsl.w	r3, r2, r3
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80058ec:	431a      	orrs	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80058f2:	bf00      	nop
 80058f4:	371c      	adds	r7, #28
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	0e9b      	lsrs	r3, r3, #26
 8005910:	f003 031f 	and.w	r3, r3, #31
 8005914:	2101      	movs	r1, #1
 8005916:	fa01 f303 	lsl.w	r3, r1, r3
 800591a:	43db      	mvns	r3, r3
 800591c:	401a      	ands	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f003 0303 	and.w	r3, r3, #3
}
 800593e:	4618      	mov	r0, r3
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800594a:	b480      	push	{r7}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005956:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800595e:	2301      	movs	r3, #1
 8005960:	e000      	b.n	8005964 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005970:	b480      	push	{r7}
 8005972:	b08d      	sub	sp, #52	; 0x34
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4a3c      	ldr	r2, [pc, #240]	; (8005a70 <LL_ADC_SetChannelSamplingTime+0x100>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d042      	beq.n	8005a0a <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d104      	bne.n	8005998 <LL_ADC_SetChannelSamplingTime+0x28>
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	0e9b      	lsrs	r3, r3, #26
 8005992:	f003 021f 	and.w	r2, r3, #31
 8005996:	e011      	b.n	80059bc <LL_ADC_SetChannelSamplingTime+0x4c>
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	fa93 f3a3 	rbit	r3, r3
 80059a2:	61fb      	str	r3, [r7, #28]
  return result;
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 80059ae:	2320      	movs	r3, #32
 80059b0:	e003      	b.n	80059ba <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	fab3 f383 	clz	r3, r3
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	0e5b      	lsrs	r3, r3, #25
 80059c0:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80059c4:	460b      	mov	r3, r1
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	440b      	add	r3, r1
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	1ad2      	subs	r2, r2, r3
 80059ce:	4613      	mov	r3, r2
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	4413      	add	r3, r2
 80059d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	3314      	adds	r3, #20
 80059da:	461a      	mov	r2, r3
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	0e5b      	lsrs	r3, r3, #25
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	f003 0304 	and.w	r3, r3, #4
 80059e6:	4413      	add	r3, r2
 80059e8:	62bb      	str	r3, [r7, #40]	; 0x28
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 80059ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	2107      	movs	r1, #7
 80059f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f2:	fa01 f303 	lsl.w	r3, r1, r3
 80059f6:	43db      	mvns	r3, r3
 80059f8:	401a      	ands	r2, r3
 80059fa:	6879      	ldr	r1, [r7, #4]
 80059fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005a02:	431a      	orrs	r2, r3
 8005a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a06:	601a      	str	r2, [r3, #0]
               ADC4_SAMPLING_TIME_CH_MASK,
               ((1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel)) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)                  \
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8005a08:	e02c      	b.n	8005a64 <LL_ADC_SetChannelSamplingTime+0xf4>
    MODIFY_REG(ADCx->SMPR1,
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d108      	bne.n	8005a2c <LL_ADC_SetChannelSamplingTime+0xbc>
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	0e9b      	lsrs	r3, r3, #26
 8005a1e:	f003 031f 	and.w	r3, r3, #31
 8005a22:	2101      	movs	r1, #1
 8005a24:	fa01 f303 	lsl.w	r3, r1, r3
 8005a28:	021b      	lsls	r3, r3, #8
 8005a2a:	e014      	b.n	8005a56 <LL_ADC_SetChannelSamplingTime+0xe6>
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	fa93 f3a3 	rbit	r3, r3
 8005a36:	613b      	str	r3, [r7, #16]
  return result;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <LL_ADC_SetChannelSamplingTime+0xd6>
    return 32U;
 8005a42:	2320      	movs	r3, #32
 8005a44:	e003      	b.n	8005a4e <LL_ADC_SetChannelSamplingTime+0xde>
  return __builtin_clz(value);
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	fab3 f383 	clz	r3, r3
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	4619      	mov	r1, r3
 8005a50:	2301      	movs	r3, #1
 8005a52:	408b      	lsls	r3, r1
 8005a54:	021b      	lsls	r3, r3, #8
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	400b      	ands	r3, r1
 8005a5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	615a      	str	r2, [r3, #20]
}
 8005a64:	bf00      	nop
 8005a66:	3734      	adds	r7, #52	; 0x34
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	46021000 	.word	0x46021000

08005a74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a8c:	43db      	mvns	r3, r3
 8005a8e:	401a      	ands	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f003 0318 	and.w	r3, r3, #24
 8005a96:	4908      	ldr	r1, [pc, #32]	; (8005ab8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005a98:	40d9      	lsrs	r1, r3
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	400b      	ands	r3, r1
 8005a9e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005aaa:	bf00      	nop
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	000fffff 	.word	0x000fffff

08005abc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005acc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6093      	str	r3, [r2, #8]
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005af0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005af4:	d101      	bne.n	8005afa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005af6:	2301      	movs	r3, #1
 8005af8:	e000      	b.n	8005afc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005b18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	609a      	str	r2, [r3, #8]
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b44:	d101      	bne.n	8005b4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b6c:	f043 0201 	orr.w	r2, r3, #1
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	609a      	str	r2, [r3, #8]
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b94:	f043 0202 	orr.w	r2, r3, #2
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	609a      	str	r2, [r3, #8]
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d101      	bne.n	8005bc0 <LL_ADC_IsEnabled+0x18>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e000      	b.n	8005bc2 <LL_ADC_IsEnabled+0x1a>
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d101      	bne.n	8005be6 <LL_ADC_IsDisableOngoing+0x18>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e000      	b.n	8005be8 <LL_ADC_IsDisableOngoing+0x1a>
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005c08:	f043 0204 	orr.w	r2, r3, #4
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	609a      	str	r2, [r3, #8]
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b04      	cmp	r3, #4
 8005c2e:	d101      	bne.n	8005c34 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005c30:	2301      	movs	r3, #1
 8005c32:	e000      	b.n	8005c36 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f003 0308 	and.w	r3, r3, #8
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	d101      	bne.n	8005c5a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005c56:	2301      	movs	r3, #1
 8005c58:	e000      	b.n	8005c5c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08a      	sub	sp, #40	; 0x28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c70:	2300      	movs	r3, #0
 8005c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8005c76:	2300      	movs	r3, #0
 8005c78:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e2e3      	b.n	8006250 <HAL_ADC_Init+0x5e8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a92      	ldr	r2, [pc, #584]	; (8005ee0 <HAL_ADC_Init+0x278>)
 8005c96:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d109      	bne.n	8005cb4 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7fe fd07 	bl	80046b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7ff ff11 	bl	8005ae0 <LL_ADC_IsDeepPowerDownEnabled>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d004      	beq.n	8005cce <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7ff fef7 	bl	8005abc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7ff ff2c 	bl	8005b30 <LL_ADC_IsInternalRegulatorEnabled>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d115      	bne.n	8005d0a <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7ff ff10 	bl	8005b08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005ce8:	4b7e      	ldr	r3, [pc, #504]	; (8005ee4 <HAL_ADC_Init+0x27c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	099b      	lsrs	r3, r3, #6
 8005cee:	4a7e      	ldr	r2, [pc, #504]	; (8005ee8 <HAL_ADC_Init+0x280>)
 8005cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf4:	099b      	lsrs	r3, r3, #6
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005cfc:	e002      	b.n	8005d04 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	3b01      	subs	r3, #1
 8005d02:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1f9      	bne.n	8005cfe <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7ff ff0e 	bl	8005b30 <LL_ADC_IsInternalRegulatorEnabled>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10e      	bne.n	8005d38 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d1e:	f043 0210 	orr.w	r2, r3, #16
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d2a:	f043 0201 	orr.w	r2, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7ff ff6d 	bl	8005c1c <LL_ADC_REG_IsConversionOngoing>
 8005d42:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d48:	f003 0310 	and.w	r3, r3, #16
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f040 8274 	bne.w	800623a <HAL_ADC_Init+0x5d2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f040 8270 	bne.w	800623a <HAL_ADC_Init+0x5d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d5e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005d62:	f043 0202 	orr.w	r2, r3, #2
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff ff1a 	bl	8005ba8 <LL_ADC_IsEnabled>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d14e      	bne.n	8005e18 <HAL_ADC_Init+0x1b0>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a58      	ldr	r2, [pc, #352]	; (8005ee0 <HAL_ADC_Init+0x278>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d028      	beq.n	8005dd6 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a58      	ldr	r2, [pc, #352]	; (8005eec <HAL_ADC_Init+0x284>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d109      	bne.n	8005da2 <HAL_ADC_Init+0x13a>
 8005d8e:	4857      	ldr	r0, [pc, #348]	; (8005eec <HAL_ADC_Init+0x284>)
 8005d90:	f7ff ff0a 	bl	8005ba8 <LL_ADC_IsEnabled>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	bf0c      	ite	eq
 8005d9a:	2301      	moveq	r3, #1
 8005d9c:	2300      	movne	r3, #0
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	e008      	b.n	8005db4 <HAL_ADC_Init+0x14c>
 8005da2:	484f      	ldr	r0, [pc, #316]	; (8005ee0 <HAL_ADC_Init+0x278>)
 8005da4:	f7ff ff00 	bl	8005ba8 <LL_ADC_IsEnabled>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	bf0c      	ite	eq
 8005dae:	2301      	moveq	r3, #1
 8005db0:	2300      	movne	r3, #0
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d02f      	beq.n	8005e18 <HAL_ADC_Init+0x1b0>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a4b      	ldr	r2, [pc, #300]	; (8005eec <HAL_ADC_Init+0x284>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d101      	bne.n	8005dc6 <HAL_ADC_Init+0x15e>
 8005dc2:	4a4b      	ldr	r2, [pc, #300]	; (8005ef0 <HAL_ADC_Init+0x288>)
 8005dc4:	e000      	b.n	8005dc8 <HAL_ADC_Init+0x160>
 8005dc6:	4a4b      	ldr	r2, [pc, #300]	; (8005ef4 <HAL_ADC_Init+0x28c>)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	4619      	mov	r1, r3
 8005dce:	4610      	mov	r0, r2
 8005dd0:	f7ff fc22 	bl	8005618 <LL_ADC_SetCommonClock>
 8005dd4:	e020      	b.n	8005e18 <HAL_ADC_Init+0x1b0>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        MODIFY_REG(hadc->Instance->CFGR1,
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f023 010c 	bic.w	r1, r3, #12
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d005      	beq.n	8005df8 <HAL_ADC_Init+0x190>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	3b01      	subs	r3, #1
 8005df2:	f003 030c 	and.w	r3, r3, #12
 8005df6:	e000      	b.n	8005dfa <HAL_ADC_Init+0x192>
 8005df8:	230c      	movs	r3, #12
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6812      	ldr	r2, [r2, #0]
 8005dfe:	430b      	orrs	r3, r1
 8005e00:	60d3      	str	r3, [r2, #12]
                   ADC_CFGR1_RES,
                   __LL_ADC_RESOLUTION_ADC1_TO_ADC4(hadc->Init.Resolution));   /* Convert resolution for the ADC4 */

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8005e02:	4b3c      	ldr	r3, [pc, #240]	; (8005ef4 <HAL_ADC_Init+0x28c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005e12:	4938      	ldr	r1, [pc, #224]	; (8005ef4 <HAL_ADC_Init+0x28c>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a30      	ldr	r2, [pc, #192]	; (8005ee0 <HAL_ADC_Init+0x278>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d010      	beq.n	8005e44 <HAL_ADC_Init+0x1dc>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e28:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8005e2e:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8005e34:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005e3c:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	623b      	str	r3, [r7, #32]
 8005e42:	e030      	b.n	8005ea6 <HAL_ADC_Init+0x23e>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	7f1b      	ldrb	r3, [r3, #28]
 8005e48:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e50:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005e52:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005e58:	2a00      	cmp	r2, #0
 8005e5a:	d002      	beq.n	8005e62 <HAL_ADC_Init+0x1fa>
 8005e5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e60:	e000      	b.n	8005e64 <HAL_ADC_Init+0x1fc>
 8005e62:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005e64:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8005e6a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	da04      	bge.n	8005e7e <HAL_ADC_Init+0x216>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e7c:	e001      	b.n	8005e82 <HAL_ADC_Init+0x21a>
 8005e7e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8005e82:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4918      	ldr	r1, [pc, #96]	; (8005eec <HAL_ADC_Init+0x284>)
 8005e8a:	428b      	cmp	r3, r1
 8005e8c:	d103      	bne.n	8005e96 <HAL_ADC_Init+0x22e>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e94:	e003      	b.n	8005e9e <HAL_ADC_Init+0x236>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e9c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8005e9e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005ea0:	6a3a      	ldr	r2, [r7, #32]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d12f      	bne.n	8005f10 <HAL_ADC_Init+0x2a8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a0a      	ldr	r2, [pc, #40]	; (8005ee0 <HAL_ADC_Init+0x278>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d007      	beq.n	8005eca <HAL_ADC_Init+0x262>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	045b      	lsls	r3, r3, #17
 8005ec2:	6a3a      	ldr	r2, [r7, #32]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	623b      	str	r3, [r7, #32]
 8005ec8:	e022      	b.n	8005f10 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d111      	bne.n	8005ef8 <HAL_ADC_Init+0x290>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eda:	623b      	str	r3, [r7, #32]
 8005edc:	e018      	b.n	8005f10 <HAL_ADC_Init+0x2a8>
 8005ede:	bf00      	nop
 8005ee0:	46021000 	.word	0x46021000
 8005ee4:	20000020 	.word	0x20000020
 8005ee8:	053e2d63 	.word	0x053e2d63
 8005eec:	42028000 	.word	0x42028000
 8005ef0:	42028308 	.word	0x42028308
 8005ef4:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005efc:	f043 0220 	orr.w	r2, r3, #32
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f08:	f043 0201 	orr.w	r2, r3, #1
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a93      	ldr	r2, [pc, #588]	; (8006164 <HAL_ADC_Init+0x4fc>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d018      	beq.n	8005f4c <HAL_ADC_Init+0x2e4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d009      	beq.n	8005f36 <HAL_ADC_Init+0x2ce>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f26:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	6a3a      	ldr	r2, [r7, #32]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68da      	ldr	r2, [r3, #12]
 8005f3c:	4b8a      	ldr	r3, [pc, #552]	; (8006168 <HAL_ADC_Init+0x500>)
 8005f3e:	4013      	ands	r3, r2
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	6a39      	ldr	r1, [r7, #32]
 8005f46:	430b      	orrs	r3, r1
 8005f48:	60d3      	str	r3, [r2, #12]
 8005f4a:	e033      	b.n	8005fb4 <HAL_ADC_Init+0x34c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d009      	beq.n	8005f68 <HAL_ADC_Init+0x300>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f58:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f60:	4313      	orrs	r3, r2
 8005f62:	6a3a      	ldr	r2, [r7, #32]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	f423 33bf 	bic.w	r3, r3, #97792	; 0x17e00
 8005f72:	f423 73f9 	bic.w	r3, r3, #498	; 0x1f2
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	6812      	ldr	r2, [r2, #0]
 8005f7a:	6a39      	ldr	r1, [r7, #32]
 8005f7c:	430b      	orrs	r3, r1
 8005f7e:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN   |
                 ADC4_CFGR1_SCANDIR |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d008      	beq.n	8005f9a <HAL_ADC_Init+0x332>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1a      	ldr	r2, [r3, #32]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d008      	beq.n	8005fb4 <HAL_ADC_Init+0x34c>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a6a      	ldr	r2, [pc, #424]	; (8006164 <HAL_ADC_Init+0x4fc>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	f000 8093 	beq.w	80060e6 <HAL_ADC_Init+0x47e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7ff fe29 	bl	8005c1c <LL_ADC_REG_IsConversionOngoing>
 8005fca:	6138      	str	r0, [r7, #16]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7ff fe36 	bl	8005c42 <LL_ADC_INJ_IsConversionOngoing>
 8005fd6:	60f8      	str	r0, [r7, #12]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d161      	bne.n	80060a2 <HAL_ADC_Init+0x43a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d15e      	bne.n	80060a2 <HAL_ADC_Init+0x43a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	7f1b      	ldrb	r3, [r3, #28]
 8005fe8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	495f      	ldr	r1, [pc, #380]	; (800616c <HAL_ADC_Init+0x504>)
 8005ff0:	428b      	cmp	r3, r1
 8005ff2:	d102      	bne.n	8005ffa <HAL_ADC_Init+0x392>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff8:	e002      	b.n	8006000 <HAL_ADC_Init+0x398>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffe:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006000:	4313      	orrs	r3, r2
 8006002:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800600e:	f023 0303 	bic.w	r3, r3, #3
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	6812      	ldr	r2, [r2, #0]
 8006016:	6a39      	ldr	r1, [r7, #32]
 8006018:	430b      	orrs	r3, r1
 800601a:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d007      	beq.n	8006034 <HAL_ADC_Init+0x3cc>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	4619      	mov	r1, r3
 800602e:	4610      	mov	r0, r2
 8006030:	f7ff fb7d 	bl	800572e <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800603a:	2b01      	cmp	r3, #1
 800603c:	d11e      	bne.n	800607c <HAL_ADC_Init+0x414>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006042:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	691a      	ldr	r2, [r3, #16]
 800604a:	4b49      	ldr	r3, [pc, #292]	; (8006170 <HAL_ADC_Init+0x508>)
 800604c:	4013      	ands	r3, r2
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006052:	0411      	lsls	r1, r2, #16
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006058:	4311      	orrs	r1, r2
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800605e:	4311      	orrs	r1, r2
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8006064:	4311      	orrs	r1, r2
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800606a:	0892      	lsrs	r2, r2, #2
 800606c:	430a      	orrs	r2, r1
 800606e:	431a      	orrs	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f042 0201 	orr.w	r2, r2, #1
 8006078:	611a      	str	r2, [r3, #16]
 800607a:	e007      	b.n	800608c <HAL_ADC_Init+0x424>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	691a      	ldr	r2, [r3, #16]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 0201 	bic.w	r2, r2, #1
 800608a:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d10c      	bne.n	80060c4 <HAL_ADC_Init+0x45c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b0:	f023 010f 	bic.w	r1, r3, #15
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b8:	1e5a      	subs	r2, r3, #1
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	631a      	str	r2, [r3, #48]	; 0x30
 80060c2:	e007      	b.n	80060d4 <HAL_ADC_Init+0x46c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 020f 	bic.w	r2, r2, #15
 80060d2:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060d8:	f023 0303 	bic.w	r3, r3, #3
 80060dc:	f043 0201 	orr.w	r2, r3, #1
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80060e4:	e0b2      	b.n	800624c <HAL_ADC_Init+0x5e4>
      /*  - oversampling enable                                                 */
      /*  - oversampling ratio                                                  */
      /*  - oversampling shift                                                  */
      /*  - oversampling discontinuous mode (triggered mode)                    */
      /*  - trigger frequency mode                                              */
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                   hadc->Init.Oversampling.RightBitShift |
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80060ee:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                   hadc->Init.Oversampling.RightBitShift |
 80060f4:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                   hadc->Init.Oversampling.TriggeredMode |
 80060fa:	4313      	orrs	r3, r2
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80060fc:	69fa      	ldr	r2, [r7, #28]
 80060fe:	4313      	orrs	r3, r2
 8006100:	61fb      	str	r3, [r7, #28]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006108:	2b01      	cmp	r3, #1
 800610a:	d103      	bne.n	8006114 <HAL_ADC_Init+0x4ac>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	f043 0301 	orr.w	r3, r3, #1
 8006112:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691a      	ldr	r2, [r3, #16]
 800611a:	4b16      	ldr	r3, [pc, #88]	; (8006174 <HAL_ADC_Init+0x50c>)
 800611c:	4013      	ands	r3, r2
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	6812      	ldr	r2, [r2, #0]
 8006122:	69f9      	ldr	r1, [r7, #28]
 8006124:	430b      	orrs	r3, r1
 8006126:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6818      	ldr	r0, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006130:	461a      	mov	r2, r3
 8006132:	2100      	movs	r1, #0
 8006134:	f7ff fb1e 	bl	8005774 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6818      	ldr	r0, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006140:	461a      	mov	r2, r3
 8006142:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8006146:	f7ff fb15 	bl	8005774 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d112      	bne.n	8006178 <HAL_ADC_Init+0x510>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f062 020f 	orn	r2, r2, #15
 8006160:	629a      	str	r2, [r3, #40]	; 0x28
 8006162:	e044      	b.n	80061ee <HAL_ADC_Init+0x586>
 8006164:	46021000 	.word	0x46021000
 8006168:	fff0c013 	.word	0xfff0c013
 800616c:	42028000 	.word	0x42028000
 8006170:	fc00f81e 	.word	0xfc00f81e
 8006174:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006180:	d135      	bne.n	80061ee <HAL_ADC_Init+0x586>
      {
        /* Count number of ranks available in HAL ADC handle variable */
        uint32_t ADCGroupRegularSequencerRanksCount;

        /* Parse all ranks from 1 to 8 */
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8006182:	2300      	movs	r3, #0
 8006184:	61bb      	str	r3, [r7, #24]
 8006186:	e00d      	b.n	80061a4 <HAL_ADC_Init+0x53c>
             ADCGroupRegularSequencerRanksCount++)
        {
          /* Check each sequencer rank until value of end of sequence */
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	fa22 f303 	lsr.w	r3, r2, r3
 8006196:	f003 030f 	and.w	r3, r3, #15
 800619a:	2b0f      	cmp	r3, #15
 800619c:	d006      	beq.n	80061ac <HAL_ADC_Init+0x544>
             ADCGroupRegularSequencerRanksCount++)
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	3301      	adds	r3, #1
 80061a2:	61bb      	str	r3, [r7, #24]
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	2b07      	cmp	r3, #7
 80061a8:	d9ee      	bls.n	8006188 <HAL_ADC_Init+0x520>
 80061aa:	e000      	b.n	80061ae <HAL_ADC_Init+0x546>
              ADC_CHSELR_SQ1)
          {
            break;
 80061ac:	bf00      	nop
          }
        }

        if (ADCGroupRegularSequencerRanksCount == 1UL)
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d108      	bne.n	80061c6 <HAL_ADC_Init+0x55e>
        {
          /* Set ADC group regular sequencer:                                   */
          /* Set sequencer scan length by clearing ranks above rank 1           */
          /* and do not modify rank 1 value.                                    */
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f062 020f 	orn	r2, r2, #15
 80061c2:	629a      	str	r2, [r3, #40]	; 0x28
 80061c4:	e013      	b.n	80061ee <HAL_ADC_Init+0x586>
          /*          therefore after the first call of "HAL_ADC_Init()",        */
          /*          each rank corresponding to parameter "NbrOfConversion"    */
          /*          must be set using "HAL_ADC_ConfigChannel()".              */
          /*  - Set sequencer scan length by clearing ranks above maximum rank  */
          /*    and do not modify other ranks value.                            */
          MODIFY_REG(hadc->Instance->CHSELR,
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d0:	3b01      	subs	r3, #1
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	f003 031c 	and.w	r3, r3, #28
 80061d8:	f06f 020f 	mvn.w	r2, #15
 80061dc:	fa02 f103 	lsl.w	r1, r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68da      	ldr	r2, [r3, #12]
 80061f4:	4b18      	ldr	r3, [pc, #96]	; (8006258 <HAL_ADC_Init+0x5f0>)
 80061f6:	4013      	ands	r3, r2
 80061f8:	6a3a      	ldr	r2, [r7, #32]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d10b      	bne.n	8006216 <HAL_ADC_Init+0x5ae>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006208:	f023 0303 	bic.w	r3, r3, #3
 800620c:	f043 0201 	orr.w	r2, r3, #1
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8006214:	e01a      	b.n	800624c <HAL_ADC_Init+0x5e4>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800621a:	f023 0312 	bic.w	r3, r3, #18
 800621e:	f043 0210 	orr.w	r2, r3, #16
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800622a:	f043 0201 	orr.w	r2, r3, #1
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8006238:	e008      	b.n	800624c <HAL_ADC_Init+0x5e4>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800623e:	f043 0210 	orr.w	r2, r3, #16
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 800624c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006250:	4618      	mov	r0, r3
 8006252:	3728      	adds	r7, #40	; 0x28
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	833ffff3 	.word	0x833ffff3

0800625c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4618      	mov	r0, r3
 800626a:	f7ff fcd7 	bl	8005c1c <LL_ADC_REG_IsConversionOngoing>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	f040 80a1 	bne.w	80063b8 <HAL_ADC_Start_IT+0x15c>
  {
    __HAL_LOCK(hadc);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800627c:	2b01      	cmp	r3, #1
 800627e:	d101      	bne.n	8006284 <HAL_ADC_Start_IT+0x28>
 8006280:	2302      	movs	r3, #2
 8006282:	e09c      	b.n	80063be <HAL_ADC_Start_IT+0x162>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    tmp_hal_status = ADC_Enable(hadc);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f001 f80b 	bl	80072a8 <ADC_Enable>
 8006292:	4603      	mov	r3, r0
 8006294:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006296:	7bfb      	ldrb	r3, [r7, #15]
 8006298:	2b00      	cmp	r3, #0
 800629a:	f040 8088 	bne.w	80063ae <HAL_ADC_Start_IT+0x152>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80062a6:	f023 0301 	bic.w	r3, r3, #1
 80062aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	679a      	str	r2, [r3, #120]	; 0x78
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d006      	beq.n	80062cc <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062c2:	f023 0206 	bic.w	r2, r3, #6
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	67da      	str	r2, [r3, #124]	; 0x7c
 80062ca:	e002      	b.n	80062d2 <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	221c      	movs	r2, #28
 80062d8:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 021c 	bic.w	r2, r2, #28
 80062f0:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	2b08      	cmp	r3, #8
 80062f8:	d108      	bne.n	800630c <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f042 0208 	orr.w	r2, r2, #8
 8006308:	605a      	str	r2, [r3, #4]
          break;
 800630a:	e008      	b.n	800631e <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f042 0204 	orr.w	r2, r2, #4
 800631a:	605a      	str	r2, [r3, #4]
          break;
 800631c:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006322:	2b00      	cmp	r3, #0
 8006324:	d107      	bne.n	8006336 <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f042 0210 	orr.w	r2, r2, #16
 8006334:	605a      	str	r2, [r3, #4]
              break;
          }
        }
      }
#else
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d02d      	beq.n	80063a0 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006348:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800634c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	679a      	str	r2, [r3, #120]	; 0x78

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	2b08      	cmp	r3, #8
 800635a:	d110      	bne.n	800637e <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 0220 	bic.w	r2, r2, #32
 800636a:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800637a:	605a      	str	r2, [r3, #4]
            break;
 800637c:	e011      	b.n	80063a2 <HAL_ADC_Start_IT+0x146>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800638c:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f042 0220 	orr.w	r2, r2, #32
 800639c:	605a      	str	r2, [r3, #4]
            break;
 800639e:	e000      	b.n	80063a2 <HAL_ADC_Start_IT+0x146>
        }
      }
 80063a0:	bf00      	nop

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7ff fc24 	bl	8005bf4 <LL_ADC_REG_StartConversion>
 80063ac:	e006      	b.n	80063bc <HAL_ADC_Start_IT+0x160>

#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80063b6:	e001      	b.n	80063bc <HAL_ADC_Start_IT+0x160>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80063b8:	2302      	movs	r3, #2
 80063ba:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b088      	sub	sp, #32
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80063e8:	2300      	movs	r3, #0
 80063ea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	f003 0302 	and.w	r3, r3, #2
 8006402:	2b00      	cmp	r3, #0
 8006404:	d017      	beq.n	8006436 <HAL_ADC_IRQHandler+0x56>
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d012      	beq.n	8006436 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006414:	f003 0310 	and.w	r3, r3, #16
 8006418:	2b00      	cmp	r3, #0
 800641a:	d105      	bne.n	8006428 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006420:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	679a      	str	r2, [r3, #120]	; 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f001 f8c9 	bl	80075c0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2202      	movs	r2, #2
 8006434:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b00      	cmp	r3, #0
 800643e:	d004      	beq.n	800644a <HAL_ADC_IRQHandler+0x6a>
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f003 0304 	and.w	r3, r3, #4
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10b      	bne.n	8006462 <HAL_ADC_IRQHandler+0x82>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 80a4 	beq.w	800659e <HAL_ADC_IRQHandler+0x1be>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f003 0308 	and.w	r3, r3, #8
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 809e 	beq.w	800659e <HAL_ADC_IRQHandler+0x1be>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006466:	f003 0310 	and.w	r3, r3, #16
 800646a:	2b00      	cmp	r3, #0
 800646c:	d105      	bne.n	800647a <HAL_ADC_IRQHandler+0x9a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006472:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a3d      	ldr	r2, [pc, #244]	; (8006574 <HAL_ADC_IRQHandler+0x194>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d047      	beq.n	8006514 <HAL_ADC_IRQHandler+0x134>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4618      	mov	r0, r3
 800648a:	f7ff f992 	bl	80057b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d07d      	beq.n	8006590 <HAL_ADC_IRQHandler+0x1b0>
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
        }
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d174      	bne.n	8006590 <HAL_ADC_IRQHandler+0x1b0>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0308 	and.w	r3, r3, #8
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d16d      	bne.n	8006590 <HAL_ADC_IRQHandler+0x1b0>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7ff fbaf 	bl	8005c1c <LL_ADC_REG_IsConversionOngoing>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d11a      	bne.n	80064fa <HAL_ADC_IRQHandler+0x11a>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f022 020c 	bic.w	r2, r2, #12
 80064d2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	679a      	str	r2, [r3, #120]	; 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d151      	bne.n	8006590 <HAL_ADC_IRQHandler+0x1b0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064f0:	f043 0201 	orr.w	r2, r3, #1
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	679a      	str	r2, [r3, #120]	; 0x78
 80064f8:	e04a      	b.n	8006590 <HAL_ADC_IRQHandler+0x1b0>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064fe:	f043 0210 	orr.w	r2, r3, #16
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	679a      	str	r2, [r3, #120]	; 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800650a:	f043 0201 	orr.w	r2, r3, #1
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	67da      	str	r2, [r3, #124]	; 0x7c
 8006512:	e03d      	b.n	8006590 <HAL_ADC_IRQHandler+0x1b0>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4618      	mov	r0, r3
 800651a:	f7ff f94a 	bl	80057b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d035      	beq.n	8006590 <HAL_ADC_IRQHandler+0x1b0>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800652a:	2b00      	cmp	r3, #0
 800652c:	d130      	bne.n	8006590 <HAL_ADC_IRQHandler+0x1b0>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0308 	and.w	r3, r3, #8
 8006538:	2b08      	cmp	r3, #8
 800653a:	d129      	bne.n	8006590 <HAL_ADC_IRQHandler+0x1b0>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4618      	mov	r0, r3
 8006542:	f7ff fb6b 	bl	8005c1c <LL_ADC_REG_IsConversionOngoing>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d115      	bne.n	8006578 <HAL_ADC_IRQHandler+0x198>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 020c 	bic.w	r2, r2, #12
 800655a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006564:	f023 0301 	bic.w	r3, r3, #1
 8006568:	f043 0201 	orr.w	r2, r3, #1
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	679a      	str	r2, [r3, #120]	; 0x78
 8006570:	e00e      	b.n	8006590 <HAL_ADC_IRQHandler+0x1b0>
 8006572:	bf00      	nop
 8006574:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800657c:	f043 0220 	orr.w	r2, r3, #32
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	679a      	str	r2, [r3, #120]	; 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006588:	f043 0201 	orr.w	r2, r3, #1
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	67da      	str	r2, [r3, #124]	; 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7fe f821 	bl	80045d8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	220c      	movs	r2, #12
 800659c:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a7f      	ldr	r2, [pc, #508]	; (80067a0 <HAL_ADC_IRQHandler+0x3c0>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d06f      	beq.n	8006688 <HAL_ADC_IRQHandler+0x2a8>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	f003 0320 	and.w	r3, r3, #32
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d004      	beq.n	80065bc <HAL_ADC_IRQHandler+0x1dc>
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f003 0320 	and.w	r3, r3, #32
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d109      	bne.n	80065d0 <HAL_ADC_IRQHandler+0x1f0>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d060      	beq.n	8006688 <HAL_ADC_IRQHandler+0x2a8>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d05b      	beq.n	8006688 <HAL_ADC_IRQHandler+0x2a8>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065d4:	f003 0310 	and.w	r3, r3, #16
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d105      	bne.n	80065e8 <HAL_ADC_IRQHandler+0x208>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065e0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7ff f9ac 	bl	800594a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80065f2:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7ff f8da 	bl	80057b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80065fe:	60b8      	str	r0, [r7, #8]
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	613b      	str	r3, [r7, #16]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d035      	beq.n	800667a <HAL_ADC_IRQHandler+0x29a>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d007      	beq.n	8006628 <HAL_ADC_IRQHandler+0x248>
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d02d      	beq.n	800667a <HAL_ADC_IRQHandler+0x29a>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006624:	2b00      	cmp	r3, #0
 8006626:	d128      	bne.n	800667a <HAL_ADC_IRQHandler+0x29a>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006632:	2b40      	cmp	r3, #64	; 0x40
 8006634:	d121      	bne.n	800667a <HAL_ADC_IRQHandler+0x29a>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4618      	mov	r0, r3
 800663c:	f7ff fb01 	bl	8005c42 <LL_ADC_INJ_IsConversionOngoing>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d119      	bne.n	800667a <HAL_ADC_IRQHandler+0x29a>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006654:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800665a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	679a      	str	r2, [r3, #120]	; 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666a:	2b00      	cmp	r3, #0
 800666c:	d105      	bne.n	800667a <HAL_ADC_IRQHandler+0x29a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006672:	f043 0201 	orr.w	r2, r3, #1
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	679a      	str	r2, [r3, #120]	; 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 ff82 	bl	8007584 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2260      	movs	r2, #96	; 0x60
 8006686:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668e:	2b00      	cmp	r3, #0
 8006690:	d011      	beq.n	80066b6 <HAL_ADC_IRQHandler+0x2d6>
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00c      	beq.n	80066b6 <HAL_ADC_IRQHandler+0x2d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f87b 	bl	80067a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2280      	movs	r2, #128	; 0x80
 80066b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d012      	beq.n	80066e6 <HAL_ADC_IRQHandler+0x306>
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00d      	beq.n	80066e6 <HAL_ADC_IRQHandler+0x306>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 ff5e 	bl	8007598 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d012      	beq.n	8006716 <HAL_ADC_IRQHandler+0x336>
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00d      	beq.n	8006716 <HAL_ADC_IRQHandler+0x336>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	679a      	str	r2, [r3, #120]	; 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 ff50 	bl	80075ac <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006714:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	f003 0310 	and.w	r3, r3, #16
 800671c:	2b00      	cmp	r3, #0
 800671e:	d03a      	beq.n	8006796 <HAL_ADC_IRQHandler+0x3b6>
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	f003 0310 	and.w	r3, r3, #16
 8006726:	2b00      	cmp	r3, #0
 8006728:	d035      	beq.n	8006796 <HAL_ADC_IRQHandler+0x3b6>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672e:	2b00      	cmp	r3, #0
 8006730:	d102      	bne.n	8006738 <HAL_ADC_IRQHandler+0x358>
    {
      overrun_error = 1UL;
 8006732:	2301      	movs	r3, #1
 8006734:	61fb      	str	r3, [r7, #28]
 8006736:	e018      	b.n	800676a <HAL_ADC_IRQHandler+0x38a>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a18      	ldr	r2, [pc, #96]	; (80067a0 <HAL_ADC_IRQHandler+0x3c0>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d009      	beq.n	8006756 <HAL_ADC_IRQHandler+0x376>
            overrun_error = 1UL;
          }
        }
#else
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f003 0303 	and.w	r3, r3, #3
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00c      	beq.n	800676a <HAL_ADC_IRQHandler+0x38a>
        {
          overrun_error = 1UL;
 8006750:	2301      	movs	r3, #1
 8006752:	61fb      	str	r3, [r7, #28]
 8006754:	e009      	b.n	800676a <HAL_ADC_IRQHandler+0x38a>
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4618      	mov	r0, r3
 800675c:	f7ff f8e7 	bl	800592e <LL_ADC_REG_GetDMATransfer>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <HAL_ADC_IRQHandler+0x38a>
        {
          overrun_error = 1UL;
 8006766:	2301      	movs	r3, #1
 8006768:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d10e      	bne.n	800678e <HAL_ADC_IRQHandler+0x3ae>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006774:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006780:	f043 0202 	orr.w	r2, r3, #2
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	67da      	str	r2, [r3, #124]	; 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f815 	bl	80067b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2210      	movs	r2, #16
 8006794:	601a      	str	r2, [r3, #0]
  }

}
 8006796:	bf00      	nop
 8006798:	3720      	adds	r7, #32
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	46021000 	.word	0x46021000

080067a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b0a4      	sub	sp, #144	; 0x90
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067d6:	2300      	movs	r3, #0
 80067d8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80067dc:	2300      	movs	r3, #0
 80067de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a94      	ldr	r2, [pc, #592]	; (8006a38 <HAL_ADC_ConfigChannel+0x26c>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d103      	bne.n	80067f2 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d102      	bne.n	8006802 <HAL_ADC_ConfigChannel+0x36>
 80067fc:	2302      	movs	r3, #2
 80067fe:	f000 bd4b 	b.w	8007298 <HAL_ADC_ConfigChannel+0xacc>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4618      	mov	r0, r3
 8006810:	f7ff fa04 	bl	8005c1c <LL_ADC_REG_IsConversionOngoing>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	f040 852b 	bne.w	8007272 <HAL_ADC_ConfigChannel+0xaa6>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a85      	ldr	r2, [pc, #532]	; (8006a38 <HAL_ADC_ConfigChannel+0x26c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	f000 827f 	beq.w	8006d26 <HAL_ADC_ConfigChannel+0x55a>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d108      	bne.n	8006846 <HAL_ADC_ConfigChannel+0x7a>
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	0e9b      	lsrs	r3, r3, #26
 800683a:	f003 031f 	and.w	r3, r3, #31
 800683e:	2201      	movs	r2, #1
 8006840:	fa02 f303 	lsl.w	r3, r2, r3
 8006844:	e016      	b.n	8006874 <HAL_ADC_ConfigChannel+0xa8>
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800684c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800684e:	fa93 f3a3 	rbit	r3, r3
 8006852:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006856:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8006858:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800685a:	2b00      	cmp	r3, #0
 800685c:	d101      	bne.n	8006862 <HAL_ADC_ConfigChannel+0x96>
    return 32U;
 800685e:	2320      	movs	r3, #32
 8006860:	e003      	b.n	800686a <HAL_ADC_ConfigChannel+0x9e>
  return __builtin_clz(value);
 8006862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006864:	fab3 f383 	clz	r3, r3
 8006868:	b2db      	uxtb	r3, r3
 800686a:	f003 031f 	and.w	r3, r3, #31
 800686e:	2201      	movs	r2, #1
 8006870:	fa02 f303 	lsl.w	r3, r2, r3
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6812      	ldr	r2, [r2, #0]
 8006878:	69d1      	ldr	r1, [r2, #28]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	6812      	ldr	r2, [r2, #0]
 800687e:	430b      	orrs	r3, r1
 8006880:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6818      	ldr	r0, [r3, #0]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	6859      	ldr	r1, [r3, #4]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	461a      	mov	r2, r3
 8006890:	f7fe ffa2 	bl	80057d8 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff f9bf 	bl	8005c1c <LL_ADC_REG_IsConversionOngoing>
 800689e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7ff f9cb 	bl	8005c42 <LL_ADC_INJ_IsConversionOngoing>
 80068ac:	67f8      	str	r0, [r7, #124]	; 0x7c
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80068ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f040 8087 	bne.w	80069c6 <HAL_ADC_ConfigChannel+0x1fa>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80068b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f040 8083 	bne.w	80069c6 <HAL_ADC_ConfigChannel+0x1fa>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6818      	ldr	r0, [r3, #0]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	6819      	ldr	r1, [r3, #0]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	461a      	mov	r2, r3
 80068ce:	f7ff f84f 	bl	8005970 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	695a      	ldr	r2, [r3, #20]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	089b      	lsrs	r3, r3, #2
 80068de:	f003 0303 	and.w	r3, r3, #3
 80068e2:	005b      	lsls	r3, r3, #1
 80068e4:	fa02 f303 	lsl.w	r3, r2, r3
 80068e8:	67bb      	str	r3, [r7, #120]	; 0x78

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d021      	beq.n	8006936 <HAL_ADC_ConfigChannel+0x16a>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6818      	ldr	r0, [r3, #0]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	6919      	ldr	r1, [r3, #16]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006900:	f7fe febe 	bl	8005680 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6818      	ldr	r0, [r3, #0]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	6919      	ldr	r1, [r3, #16]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	69db      	ldr	r3, [r3, #28]
 8006910:	461a      	mov	r2, r3
 8006912:	f7fe fed6 	bl	80056c2 <LL_ADC_SetOffsetSign>
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,                  \
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6818      	ldr	r0, [r3, #0]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	6919      	ldr	r1, [r3, #16]
                                           (pConfig->OffsetSignedSaturation == ENABLE)             \
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	7e5b      	ldrb	r3, [r3, #25]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,                  \
 8006922:	2b01      	cmp	r3, #1
 8006924:	d102      	bne.n	800692c <HAL_ADC_ConfigChannel+0x160>
 8006926:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800692a:	e000      	b.n	800692e <HAL_ADC_ConfigChannel+0x162>
 800692c:	2300      	movs	r3, #0
 800692e:	461a      	mov	r2, r3
 8006930:	f7fe fee2 	bl	80056f8 <LL_ADC_SetOffsetSignedSaturation>
 8006934:	e047      	b.n	80069c6 <HAL_ADC_ConfigChannel+0x1fa>
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
            If this is the case, offset OFRx is disabled since
            pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800693c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	06db      	lsls	r3, r3, #27
 8006946:	429a      	cmp	r2, r3
 8006948:	d107      	bne.n	800695a <HAL_ADC_ConfigChannel+0x18e>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSAT);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8006958:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006960:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	06db      	lsls	r3, r3, #27
 800696a:	429a      	cmp	r2, r3
 800696c:	d107      	bne.n	800697e <HAL_ADC_ConfigChannel+0x1b2>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSAT);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800697c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006984:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	06db      	lsls	r3, r3, #27
 800698e:	429a      	cmp	r2, r3
 8006990:	d107      	bne.n	80069a2 <HAL_ADC_ConfigChannel+0x1d6>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSAT);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80069a0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069a8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	06db      	lsls	r3, r3, #27
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d107      	bne.n	80069c6 <HAL_ADC_ConfigChannel+0x1fa>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSAT);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80069c4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7ff f8ec 	bl	8005ba8 <LL_ADC_IsEnabled>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f040 845a 	bne.w	800728c <HAL_ADC_ConfigChannel+0xac0>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6818      	ldr	r0, [r3, #0]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	6819      	ldr	r1, [r3, #0]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	461a      	mov	r2, r3
 80069e6:	f7ff f845 	bl	8005a74 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069f2:	f040 80d9 	bne.w	8006ba8 <HAL_ADC_ConfigChannel+0x3dc>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10b      	bne.n	8006a1a <HAL_ADC_ConfigChannel+0x24e>
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	0e9b      	lsrs	r3, r3, #26
 8006a08:	3301      	adds	r3, #1
 8006a0a:	f003 031f 	and.w	r3, r3, #31
 8006a0e:	2b09      	cmp	r3, #9
 8006a10:	bf94      	ite	ls
 8006a12:	2301      	movls	r3, #1
 8006a14:	2300      	movhi	r3, #0
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	e01c      	b.n	8006a54 <HAL_ADC_ConfigChannel+0x288>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a22:	fa93 f3a3 	rbit	r3, r3
 8006a26:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8006a28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a2a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8006a2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d104      	bne.n	8006a3c <HAL_ADC_ConfigChannel+0x270>
    return 32U;
 8006a32:	2320      	movs	r3, #32
 8006a34:	e006      	b.n	8006a44 <HAL_ADC_ConfigChannel+0x278>
 8006a36:	bf00      	nop
 8006a38:	46021000 	.word	0x46021000
  return __builtin_clz(value);
 8006a3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a3e:	fab3 f383 	clz	r3, r3
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	3301      	adds	r3, #1
 8006a46:	f003 031f 	and.w	r3, r3, #31
 8006a4a:	2b09      	cmp	r3, #9
 8006a4c:	bf94      	ite	ls
 8006a4e:	2301      	movls	r3, #1
 8006a50:	2300      	movhi	r3, #0
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d04d      	beq.n	8006af4 <HAL_ADC_ConfigChannel+0x328>
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d107      	bne.n	8006a74 <HAL_ADC_ConfigChannel+0x2a8>
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	0e9b      	lsrs	r3, r3, #26
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	069b      	lsls	r3, r3, #26
 8006a6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a72:	e015      	b.n	8006aa0 <HAL_ADC_ConfigChannel+0x2d4>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a7c:	fa93 f3a3 	rbit	r3, r3
 8006a80:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a84:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 8006a8c:	2320      	movs	r3, #32
 8006a8e:	e003      	b.n	8006a98 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8006a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a92:	fab3 f383 	clz	r3, r3
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	3301      	adds	r3, #1
 8006a9a:	069b      	lsls	r3, r3, #26
 8006a9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d109      	bne.n	8006ac0 <HAL_ADC_ConfigChannel+0x2f4>
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	0e9b      	lsrs	r3, r3, #26
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	f003 031f 	and.w	r3, r3, #31
 8006ab8:	2101      	movs	r1, #1
 8006aba:	fa01 f303 	lsl.w	r3, r1, r3
 8006abe:	e017      	b.n	8006af0 <HAL_ADC_ConfigChannel+0x324>
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac8:	fa93 f3a3 	rbit	r3, r3
 8006acc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ad0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d101      	bne.n	8006adc <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8006ad8:	2320      	movs	r3, #32
 8006ada:	e003      	b.n	8006ae4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8006adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ade:	fab3 f383 	clz	r3, r3
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	f003 031f 	and.w	r3, r3, #31
 8006aea:	2101      	movs	r1, #1
 8006aec:	fa01 f303 	lsl.w	r3, r1, r3
 8006af0:	4313      	orrs	r3, r2
 8006af2:	e04e      	b.n	8006b92 <HAL_ADC_ConfigChannel+0x3c6>
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d107      	bne.n	8006b10 <HAL_ADC_ConfigChannel+0x344>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	0e9b      	lsrs	r3, r3, #26
 8006b06:	3301      	adds	r3, #1
 8006b08:	069b      	lsls	r3, r3, #26
 8006b0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b0e:	e015      	b.n	8006b3c <HAL_ADC_ConfigChannel+0x370>
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b18:	fa93 f3a3 	rbit	r3, r3
 8006b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b20:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8006b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d101      	bne.n	8006b2c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8006b28:	2320      	movs	r3, #32
 8006b2a:	e003      	b.n	8006b34 <HAL_ADC_ConfigChannel+0x368>
  return __builtin_clz(value);
 8006b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b2e:	fab3 f383 	clz	r3, r3
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	3301      	adds	r3, #1
 8006b36:	069b      	lsls	r3, r3, #26
 8006b38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d109      	bne.n	8006b5c <HAL_ADC_ConfigChannel+0x390>
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	0e9b      	lsrs	r3, r3, #26
 8006b4e:	3301      	adds	r3, #1
 8006b50:	f003 031f 	and.w	r3, r3, #31
 8006b54:	2101      	movs	r1, #1
 8006b56:	fa01 f303 	lsl.w	r3, r1, r3
 8006b5a:	e017      	b.n	8006b8c <HAL_ADC_ConfigChannel+0x3c0>
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b64:	fa93 f3a3 	rbit	r3, r3
 8006b68:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <HAL_ADC_ConfigChannel+0x3ac>
    return 32U;
 8006b74:	2320      	movs	r3, #32
 8006b76:	e003      	b.n	8006b80 <HAL_ADC_ConfigChannel+0x3b4>
  return __builtin_clz(value);
 8006b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7a:	fab3 f383 	clz	r3, r3
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	3301      	adds	r3, #1
 8006b82:	f003 031f 	and.w	r3, r3, #31
 8006b86:	2101      	movs	r1, #1
 8006b88:	fa01 f303 	lsl.w	r3, r1, r3
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006b92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6818      	ldr	r0, [r3, #0]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8006ba4:	f7fe fee4 	bl	8005970 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f280 836d 	bge.w	800728c <HAL_ADC_ConfigChannel+0xac0>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a98      	ldr	r2, [pc, #608]	; (8006e18 <HAL_ADC_ConfigChannel+0x64c>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d101      	bne.n	8006bc0 <HAL_ADC_ConfigChannel+0x3f4>
 8006bbc:	4b97      	ldr	r3, [pc, #604]	; (8006e1c <HAL_ADC_ConfigChannel+0x650>)
 8006bbe:	e000      	b.n	8006bc2 <HAL_ADC_ConfigChannel+0x3f6>
 8006bc0:	4b97      	ldr	r3, [pc, #604]	; (8006e20 <HAL_ADC_ConfigChannel+0x654>)
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fe fd4e 	bl	8005664 <LL_ADC_GetCommonPathInternalCh>
 8006bc8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a91      	ldr	r2, [pc, #580]	; (8006e18 <HAL_ADC_ConfigChannel+0x64c>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d109      	bne.n	8006bea <HAL_ADC_ConfigChannel+0x41e>
 8006bd6:	4890      	ldr	r0, [pc, #576]	; (8006e18 <HAL_ADC_ConfigChannel+0x64c>)
 8006bd8:	f7fe ffe6 	bl	8005ba8 <LL_ADC_IsEnabled>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	bf0c      	ite	eq
 8006be2:	2301      	moveq	r3, #1
 8006be4:	2300      	movne	r3, #0
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	e008      	b.n	8006bfc <HAL_ADC_ConfigChannel+0x430>
 8006bea:	488e      	ldr	r0, [pc, #568]	; (8006e24 <HAL_ADC_ConfigChannel+0x658>)
 8006bec:	f7fe ffdc 	bl	8005ba8 <LL_ADC_IsEnabled>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	bf0c      	ite	eq
 8006bf6:	2301      	moveq	r3, #1
 8006bf8:	2300      	movne	r3, #0
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f000 8088 	beq.w	8006d12 <HAL_ADC_ConfigChannel+0x546>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a88      	ldr	r2, [pc, #544]	; (8006e28 <HAL_ADC_ConfigChannel+0x65c>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d132      	bne.n	8006c72 <HAL_ADC_ConfigChannel+0x4a6>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006c0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d12c      	bne.n	8006c72 <HAL_ADC_ConfigChannel+0x4a6>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a7e      	ldr	r2, [pc, #504]	; (8006e18 <HAL_ADC_ConfigChannel+0x64c>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d005      	beq.n	8006c2e <HAL_ADC_ConfigChannel+0x462>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a7f      	ldr	r2, [pc, #508]	; (8006e24 <HAL_ADC_ConfigChannel+0x658>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	f040 832c 	bne.w	8007286 <HAL_ADC_ConfigChannel+0xaba>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a79      	ldr	r2, [pc, #484]	; (8006e18 <HAL_ADC_ConfigChannel+0x64c>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d101      	bne.n	8006c3c <HAL_ADC_ConfigChannel+0x470>
 8006c38:	4a78      	ldr	r2, [pc, #480]	; (8006e1c <HAL_ADC_ConfigChannel+0x650>)
 8006c3a:	e000      	b.n	8006c3e <HAL_ADC_ConfigChannel+0x472>
 8006c3c:	4a78      	ldr	r2, [pc, #480]	; (8006e20 <HAL_ADC_ConfigChannel+0x654>)
 8006c3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006c46:	4619      	mov	r1, r3
 8006c48:	4610      	mov	r0, r2
 8006c4a:	f7fe fcf8 	bl	800563e <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006c4e:	4b77      	ldr	r3, [pc, #476]	; (8006e2c <HAL_ADC_ConfigChannel+0x660>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	099b      	lsrs	r3, r3, #6
 8006c54:	4a76      	ldr	r2, [pc, #472]	; (8006e30 <HAL_ADC_ConfigChannel+0x664>)
 8006c56:	fba2 2303 	umull	r2, r3, r2, r3
 8006c5a:	099b      	lsrs	r3, r3, #6
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8006c60:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8006c62:	e002      	b.n	8006c6a <HAL_ADC_ConfigChannel+0x49e>
                {
                  wait_loop_index--;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	3b01      	subs	r3, #1
 8006c68:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1f9      	bne.n	8006c64 <HAL_ADC_ConfigChannel+0x498>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006c70:	e309      	b.n	8007286 <HAL_ADC_ConfigChannel+0xaba>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a6f      	ldr	r2, [pc, #444]	; (8006e34 <HAL_ADC_ConfigChannel+0x668>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d121      	bne.n	8006cc0 <HAL_ADC_ConfigChannel+0x4f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006c7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d11b      	bne.n	8006cc0 <HAL_ADC_ConfigChannel+0x4f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a62      	ldr	r2, [pc, #392]	; (8006e18 <HAL_ADC_ConfigChannel+0x64c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d005      	beq.n	8006c9e <HAL_ADC_ConfigChannel+0x4d2>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a63      	ldr	r2, [pc, #396]	; (8006e24 <HAL_ADC_ConfigChannel+0x658>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	f040 82f6 	bne.w	800728a <HAL_ADC_ConfigChannel+0xabe>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a5d      	ldr	r2, [pc, #372]	; (8006e18 <HAL_ADC_ConfigChannel+0x64c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d101      	bne.n	8006cac <HAL_ADC_ConfigChannel+0x4e0>
 8006ca8:	4a5c      	ldr	r2, [pc, #368]	; (8006e1c <HAL_ADC_ConfigChannel+0x650>)
 8006caa:	e000      	b.n	8006cae <HAL_ADC_ConfigChannel+0x4e2>
 8006cac:	4a5c      	ldr	r2, [pc, #368]	; (8006e20 <HAL_ADC_ConfigChannel+0x654>)
 8006cae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	4610      	mov	r0, r2
 8006cba:	f7fe fcc0 	bl	800563e <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006cbe:	e2e4      	b.n	800728a <HAL_ADC_ConfigChannel+0xabe>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a5c      	ldr	r2, [pc, #368]	; (8006e38 <HAL_ADC_ConfigChannel+0x66c>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	f040 82e0 	bne.w	800728c <HAL_ADC_ConfigChannel+0xac0>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006ccc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f040 82d9 	bne.w	800728c <HAL_ADC_ConfigChannel+0xac0>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a4e      	ldr	r2, [pc, #312]	; (8006e18 <HAL_ADC_ConfigChannel+0x64c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d005      	beq.n	8006cf0 <HAL_ADC_ConfigChannel+0x524>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a4e      	ldr	r2, [pc, #312]	; (8006e24 <HAL_ADC_ConfigChannel+0x658>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	f040 82ce 	bne.w	800728c <HAL_ADC_ConfigChannel+0xac0>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a48      	ldr	r2, [pc, #288]	; (8006e18 <HAL_ADC_ConfigChannel+0x64c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d101      	bne.n	8006cfe <HAL_ADC_ConfigChannel+0x532>
 8006cfa:	4a48      	ldr	r2, [pc, #288]	; (8006e1c <HAL_ADC_ConfigChannel+0x650>)
 8006cfc:	e000      	b.n	8006d00 <HAL_ADC_ConfigChannel+0x534>
 8006cfe:	4a48      	ldr	r2, [pc, #288]	; (8006e20 <HAL_ADC_ConfigChannel+0x654>)
 8006d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d08:	4619      	mov	r1, r3
 8006d0a:	4610      	mov	r0, r2
 8006d0c:	f7fe fc97 	bl	800563e <LL_ADC_SetCommonPathInternalCh>
 8006d10:	e2bc      	b.n	800728c <HAL_ADC_ConfigChannel+0xac0>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d16:	f043 0220 	orr.w	r2, r3, #32
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	679a      	str	r2, [r3, #120]	; 0x78

            tmp_hal_status = HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006d24:	e2b2      	b.n	800728c <HAL_ADC_ConfigChannel+0xac0>
      }
    }
    else
    {
      /* Remap Internal Channels for Cut1 vs Cut2 (or 4M) */
      tmp_channel = pConfig->Channel;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
#if !defined (ADC2)
      if (HAL_GetREVID() == REV_ID_A) /* STM32U5 silicon Rev.A */
 8006d2e:	f7fe fc65 	bl	80055fc <HAL_GetREVID>
 8006d32:	4603      	mov	r3, r0
 8006d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d38:	d130      	bne.n	8006d9c <HAL_ADC_ConfigChannel+0x5d0>
      {
        if (pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a3f      	ldr	r2, [pc, #252]	; (8006e3c <HAL_ADC_ConfigChannel+0x670>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d103      	bne.n	8006d4c <HAL_ADC_ConfigChannel+0x580>
        {
          tmp_channel = (LL_ADC_CHANNEL_22 | ADC_CHANNEL_ID_INTERNAL_CH);
 8006d44:	4b3e      	ldr	r3, [pc, #248]	; (8006e40 <HAL_ADC_ConfigChannel+0x674>)
 8006d46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d4a:	e027      	b.n	8006d9c <HAL_ADC_ConfigChannel+0x5d0>
        }
        else if (pConfig->Channel == ADC4_CHANNEL_VBAT)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a3c      	ldr	r2, [pc, #240]	; (8006e44 <HAL_ADC_ConfigChannel+0x678>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d103      	bne.n	8006d5e <HAL_ADC_ConfigChannel+0x592>
        {
          tmp_channel = (LL_ADC_CHANNEL_23 | ADC_CHANNEL_ID_INTERNAL_CH);
 8006d56:	4b3c      	ldr	r3, [pc, #240]	; (8006e48 <HAL_ADC_ConfigChannel+0x67c>)
 8006d58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d5c:	e01e      	b.n	8006d9c <HAL_ADC_ConfigChannel+0x5d0>
        }
        else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a3a      	ldr	r2, [pc, #232]	; (8006e4c <HAL_ADC_ConfigChannel+0x680>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d103      	bne.n	8006d70 <HAL_ADC_ConfigChannel+0x5a4>
        {
          tmp_channel = (LL_ADC_CHANNEL_VREFINT | LL_ADC_CHANNEL_DIFFERENCIATION_VREFINT_VCORE);
 8006d68:	4b39      	ldr	r3, [pc, #228]	; (8006e50 <HAL_ADC_ConfigChannel+0x684>)
 8006d6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d6e:	e015      	b.n	8006d9c <HAL_ADC_ConfigChannel+0x5d0>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH1_ADC4)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a37      	ldr	r2, [pc, #220]	; (8006e54 <HAL_ADC_ConfigChannel+0x688>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d103      	bne.n	8006d82 <HAL_ADC_ConfigChannel+0x5b6>
        {
          tmp_channel = (LL_ADC_CHANNEL_20 | ADC_CHANNEL_ID_INTERNAL_CH);
 8006d7a:	4b37      	ldr	r3, [pc, #220]	; (8006e58 <HAL_ADC_ConfigChannel+0x68c>)
 8006d7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d80:	e00c      	b.n	8006d9c <HAL_ADC_ConfigChannel+0x5d0>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a35      	ldr	r2, [pc, #212]	; (8006e5c <HAL_ADC_ConfigChannel+0x690>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d103      	bne.n	8006d94 <HAL_ADC_ConfigChannel+0x5c8>
        {
          tmp_channel = (LL_ADC_CHANNEL_21 | ADC_CHANNEL_ID_INTERNAL_CH);
 8006d8c:	4b31      	ldr	r3, [pc, #196]	; (8006e54 <HAL_ADC_ConfigChannel+0x688>)
 8006d8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d92:	e003      	b.n	8006d9c <HAL_ADC_ConfigChannel+0x5d0>
        }
        else
        {
          tmp_channel = pConfig->Channel;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	f000 81a3 	beq.w	80070ec <HAL_ADC_ConfigChannel+0x920>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dae:	d004      	beq.n	8006dba <HAL_ADC_ConfigChannel+0x5ee>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8006db4:	4a2a      	ldr	r2, [pc, #168]	; (8006e60 <HAL_ADC_ConfigChannel+0x694>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d107      	bne.n	8006dca <HAL_ADC_ConfigChannel+0x5fe>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fe fd68 	bl	8005898 <LL_ADC_REG_SetSequencerChAdd>
 8006dc8:	e0c2      	b.n	8006f50 <HAL_ADC_ConfigChannel+0x784>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f003 031f 	and.w	r3, r3, #31
 8006dd8:	210f      	movs	r1, #15
 8006dda:	fa01 f303 	lsl.w	r3, r1, r3
 8006dde:	43db      	mvns	r3, r3
 8006de0:	401a      	ands	r2, r3
 8006de2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006de6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d105      	bne.n	8006dfa <HAL_ADC_ConfigChannel+0x62e>
 8006dee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006df2:	0e9b      	lsrs	r3, r3, #26
 8006df4:	f003 031f 	and.w	r3, r3, #31
 8006df8:	e038      	b.n	8006e6c <HAL_ADC_ConfigChannel+0x6a0>
 8006dfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e02:	fa93 f3a3 	rbit	r3, r3
 8006e06:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8006e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d128      	bne.n	8006e64 <HAL_ADC_ConfigChannel+0x698>
    return 32U;
 8006e12:	2320      	movs	r3, #32
 8006e14:	e02a      	b.n	8006e6c <HAL_ADC_ConfigChannel+0x6a0>
 8006e16:	bf00      	nop
 8006e18:	42028000 	.word	0x42028000
 8006e1c:	42028308 	.word	0x42028308
 8006e20:	46021308 	.word	0x46021308
 8006e24:	46021000 	.word	0x46021000
 8006e28:	ce080000 	.word	0xce080000
 8006e2c:	20000020 	.word	0x20000020
 8006e30:	053e2d63 	.word	0x053e2d63
 8006e34:	ca040000 	.word	0xca040000
 8006e38:	80000001 	.word	0x80000001
 8006e3c:	b6002000 	.word	0xb6002000
 8006e40:	da400000 	.word	0xda400000
 8006e44:	ba004000 	.word	0xba004000
 8006e48:	de800000 	.word	0xde800000
 8006e4c:	b2001000 	.word	0xb2001000
 8006e50:	81000001 	.word	0x81000001
 8006e54:	d6200000 	.word	0xd6200000
 8006e58:	d2100000 	.word	0xd2100000
 8006e5c:	d7200000 	.word	0xd7200000
 8006e60:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8006e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e66:	fab3 f383 	clz	r3, r3
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	6839      	ldr	r1, [r7, #0]
 8006e6e:	6849      	ldr	r1, [r1, #4]
 8006e70:	f001 011f 	and.w	r1, r1, #31
 8006e74:	408b      	lsls	r3, r1
 8006e76:	431a      	orrs	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	089b      	lsrs	r3, r3, #2
 8006e84:	1c5a      	adds	r2, r3, #1
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d860      	bhi.n	8006f50 <HAL_ADC_ConfigChannel+0x784>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8006e8e:	f7fe fbb5 	bl	80055fc <HAL_GetREVID>
 8006e92:	4603      	mov	r3, r0
 8006e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e98:	d851      	bhi.n	8006f3e <HAL_ADC_ConfigChannel+0x772>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 8006e9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e9e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10a      	bne.n	8006ebc <HAL_ADC_ConfigChannel+0x6f0>
 8006ea6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006eaa:	0e9b      	lsrs	r3, r3, #26
 8006eac:	f003 031f 	and.w	r3, r3, #31
 8006eb0:	2b13      	cmp	r3, #19
 8006eb2:	bf8c      	ite	hi
 8006eb4:	2301      	movhi	r3, #1
 8006eb6:	2300      	movls	r3, #0
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	e016      	b.n	8006eea <HAL_ADC_ConfigChannel+0x71e>
 8006ebc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ec0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	fa93 f3a3 	rbit	r3, r3
 8006ec8:	61bb      	str	r3, [r7, #24]
  return result;
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <HAL_ADC_ConfigChannel+0x70c>
    return 32U;
 8006ed4:	2320      	movs	r3, #32
 8006ed6:	e003      	b.n	8006ee0 <HAL_ADC_ConfigChannel+0x714>
  return __builtin_clz(value);
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	fab3 f383 	clz	r3, r3
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b13      	cmp	r3, #19
 8006ee2:	bf8c      	ite	hi
 8006ee4:	2301      	movhi	r3, #1
 8006ee6:	2300      	movls	r3, #0
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d027      	beq.n	8006f3e <HAL_ADC_ConfigChannel+0x772>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 8006eee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ef2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d109      	bne.n	8006f0e <HAL_ADC_ConfigChannel+0x742>
 8006efa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006efe:	0e9b      	lsrs	r3, r3, #26
 8006f00:	f003 031f 	and.w	r3, r3, #31
 8006f04:	3b09      	subs	r3, #9
 8006f06:	2201      	movs	r2, #1
 8006f08:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0c:	e015      	b.n	8006f3a <HAL_ADC_ConfigChannel+0x76e>
 8006f0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	fa93 f3a3 	rbit	r3, r3
 8006f1a:	60fb      	str	r3, [r7, #12]
  return result;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <HAL_ADC_ConfigChannel+0x75e>
    return 32U;
 8006f26:	2320      	movs	r3, #32
 8006f28:	e003      	b.n	8006f32 <HAL_ADC_ConfigChannel+0x766>
  return __builtin_clz(value);
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	fab3 f383 	clz	r3, r3
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	3b09      	subs	r3, #9
 8006f34:	2201      	movs	r2, #1
 8006f36:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6818      	ldr	r0, [r3, #0]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	f7fe fc44 	bl	80057d8 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6818      	ldr	r0, [r3, #0]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	461a      	mov	r2, r3
 8006f5a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8006f5e:	f7fe fd07 	bl	8005970 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f280 8190 	bge.w	800728c <HAL_ADC_ConfigChannel+0xac0>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a97      	ldr	r2, [pc, #604]	; (80071d0 <HAL_ADC_ConfigChannel+0xa04>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d101      	bne.n	8006f7a <HAL_ADC_ConfigChannel+0x7ae>
 8006f76:	4b97      	ldr	r3, [pc, #604]	; (80071d4 <HAL_ADC_ConfigChannel+0xa08>)
 8006f78:	e000      	b.n	8006f7c <HAL_ADC_ConfigChannel+0x7b0>
 8006f7a:	4b97      	ldr	r3, [pc, #604]	; (80071d8 <HAL_ADC_ConfigChannel+0xa0c>)
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7fe fb71 	bl	8005664 <LL_ADC_GetCommonPathInternalCh>
 8006f82:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a94      	ldr	r2, [pc, #592]	; (80071dc <HAL_ADC_ConfigChannel+0xa10>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d126      	bne.n	8006fde <HAL_ADC_ConfigChannel+0x812>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006f90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d120      	bne.n	8006fde <HAL_ADC_ConfigChannel+0x812>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a8b      	ldr	r2, [pc, #556]	; (80071d0 <HAL_ADC_ConfigChannel+0xa04>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d101      	bne.n	8006faa <HAL_ADC_ConfigChannel+0x7de>
 8006fa6:	4a8b      	ldr	r2, [pc, #556]	; (80071d4 <HAL_ADC_ConfigChannel+0xa08>)
 8006fa8:	e000      	b.n	8006fac <HAL_ADC_ConfigChannel+0x7e0>
 8006faa:	4a8b      	ldr	r2, [pc, #556]	; (80071d8 <HAL_ADC_ConfigChannel+0xa0c>)
 8006fac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	f7fe fb41 	bl	800563e <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006fbc:	4b88      	ldr	r3, [pc, #544]	; (80071e0 <HAL_ADC_ConfigChannel+0xa14>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	099b      	lsrs	r3, r3, #6
 8006fc2:	4a88      	ldr	r2, [pc, #544]	; (80071e4 <HAL_ADC_ConfigChannel+0xa18>)
 8006fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc8:	099b      	lsrs	r3, r3, #6
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8006fce:	e002      	b.n	8006fd6 <HAL_ADC_ConfigChannel+0x80a>
            {
              wait_loop_index--;
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1f9      	bne.n	8006fd0 <HAL_ADC_ConfigChannel+0x804>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8006fdc:	e067      	b.n	80070ae <HAL_ADC_ConfigChannel+0x8e2>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a81      	ldr	r2, [pc, #516]	; (80071e8 <HAL_ADC_ConfigChannel+0xa1c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d116      	bne.n	8007016 <HAL_ADC_ConfigChannel+0x84a>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d110      	bne.n	8007016 <HAL_ADC_ConfigChannel+0x84a>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a75      	ldr	r2, [pc, #468]	; (80071d0 <HAL_ADC_ConfigChannel+0xa04>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d101      	bne.n	8007002 <HAL_ADC_ConfigChannel+0x836>
 8006ffe:	4a75      	ldr	r2, [pc, #468]	; (80071d4 <HAL_ADC_ConfigChannel+0xa08>)
 8007000:	e000      	b.n	8007004 <HAL_ADC_ConfigChannel+0x838>
 8007002:	4a75      	ldr	r2, [pc, #468]	; (80071d8 <HAL_ADC_ConfigChannel+0xa0c>)
 8007004:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007008:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800700c:	4619      	mov	r1, r3
 800700e:	4610      	mov	r0, r2
 8007010:	f7fe fb15 	bl	800563e <LL_ADC_SetCommonPathInternalCh>
 8007014:	e04b      	b.n	80070ae <HAL_ADC_ConfigChannel+0x8e2>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a74      	ldr	r2, [pc, #464]	; (80071ec <HAL_ADC_ConfigChannel+0xa20>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d116      	bne.n	800704e <HAL_ADC_ConfigChannel+0x882>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007020:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007024:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d110      	bne.n	800704e <HAL_ADC_ConfigChannel+0x882>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a67      	ldr	r2, [pc, #412]	; (80071d0 <HAL_ADC_ConfigChannel+0xa04>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d101      	bne.n	800703a <HAL_ADC_ConfigChannel+0x86e>
 8007036:	4a67      	ldr	r2, [pc, #412]	; (80071d4 <HAL_ADC_ConfigChannel+0xa08>)
 8007038:	e000      	b.n	800703c <HAL_ADC_ConfigChannel+0x870>
 800703a:	4a67      	ldr	r2, [pc, #412]	; (80071d8 <HAL_ADC_ConfigChannel+0xa0c>)
 800703c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007040:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007044:	4619      	mov	r1, r3
 8007046:	4610      	mov	r0, r2
 8007048:	f7fe faf9 	bl	800563e <LL_ADC_SetCommonPathInternalCh>
 800704c:	e02f      	b.n	80070ae <HAL_ADC_ConfigChannel+0x8e2>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a67      	ldr	r2, [pc, #412]	; (80071f0 <HAL_ADC_ConfigChannel+0xa24>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d12a      	bne.n	80070ae <HAL_ADC_ConfigChannel+0x8e2>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007058:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800705c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d124      	bne.n	80070ae <HAL_ADC_ConfigChannel+0x8e2>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a62      	ldr	r2, [pc, #392]	; (80071f4 <HAL_ADC_ConfigChannel+0xa28>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d11f      	bne.n	80070ae <HAL_ADC_ConfigChannel+0x8e2>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a57      	ldr	r2, [pc, #348]	; (80071d0 <HAL_ADC_ConfigChannel+0xa04>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d101      	bne.n	800707c <HAL_ADC_ConfigChannel+0x8b0>
 8007078:	4a56      	ldr	r2, [pc, #344]	; (80071d4 <HAL_ADC_ConfigChannel+0xa08>)
 800707a:	e000      	b.n	800707e <HAL_ADC_ConfigChannel+0x8b2>
 800707c:	4a56      	ldr	r2, [pc, #344]	; (80071d8 <HAL_ADC_ConfigChannel+0xa0c>)
 800707e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007082:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007086:	4619      	mov	r1, r3
 8007088:	4610      	mov	r0, r2
 800708a:	f7fe fad8 	bl	800563e <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 800708e:	f7fe fab5 	bl	80055fc <HAL_GetREVID>
 8007092:	4603      	mov	r3, r0
 8007094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007098:	d809      	bhi.n	80070ae <HAL_ADC_ConfigChannel+0x8e2>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f042 0201 	orr.w	r2, r2, #1
 80070aa:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 80070ae:	f7fe faa5 	bl	80055fc <HAL_GetREVID>
 80070b2:	4603      	mov	r3, r0
 80070b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070b8:	f040 80e8 	bne.w	800728c <HAL_ADC_ConfigChannel+0xac0>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a4d      	ldr	r2, [pc, #308]	; (80071f8 <HAL_ADC_ConfigChannel+0xa2c>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	f040 80e2 	bne.w	800728c <HAL_ADC_ConfigChannel+0xac0>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80070c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f040 80db 	bne.w	800728c <HAL_ADC_ConfigChannel+0xac0>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f042 0201 	orr.w	r2, r2, #1
 80070e6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 80070ea:	e0cf      	b.n	800728c <HAL_ADC_ConfigChannel+0xac0>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070f4:	d004      	beq.n	8007100 <HAL_ADC_ConfigChannel+0x934>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80070fa:	4a40      	ldr	r2, [pc, #256]	; (80071fc <HAL_ADC_ConfigChannel+0xa30>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d106      	bne.n	800710e <HAL_ADC_ConfigChannel+0x942>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8007108:	4618      	mov	r0, r3
 800710a:	f7fe fbf8 	bl	80058fe <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	f280 80ba 	bge.w	800728c <HAL_ADC_ConfigChannel+0xac0>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a2c      	ldr	r2, [pc, #176]	; (80071d0 <HAL_ADC_ConfigChannel+0xa04>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d101      	bne.n	8007126 <HAL_ADC_ConfigChannel+0x95a>
 8007122:	4b2c      	ldr	r3, [pc, #176]	; (80071d4 <HAL_ADC_ConfigChannel+0xa08>)
 8007124:	e000      	b.n	8007128 <HAL_ADC_ConfigChannel+0x95c>
 8007126:	4b2c      	ldr	r3, [pc, #176]	; (80071d8 <HAL_ADC_ConfigChannel+0xa0c>)
 8007128:	4618      	mov	r0, r3
 800712a:	f7fe fa9b 	bl	8005664 <LL_ADC_GetCommonPathInternalCh>
 800712e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a32      	ldr	r2, [pc, #200]	; (8007200 <HAL_ADC_ConfigChannel+0xa34>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d110      	bne.n	800715e <HAL_ADC_ConfigChannel+0x992>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a23      	ldr	r2, [pc, #140]	; (80071d0 <HAL_ADC_ConfigChannel+0xa04>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d101      	bne.n	800714a <HAL_ADC_ConfigChannel+0x97e>
 8007146:	4a23      	ldr	r2, [pc, #140]	; (80071d4 <HAL_ADC_ConfigChannel+0xa08>)
 8007148:	e000      	b.n	800714c <HAL_ADC_ConfigChannel+0x980>
 800714a:	4a23      	ldr	r2, [pc, #140]	; (80071d8 <HAL_ADC_ConfigChannel+0xa0c>)
 800714c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007150:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007154:	4619      	mov	r1, r3
 8007156:	4610      	mov	r0, r2
 8007158:	f7fe fa71 	bl	800563e <LL_ADC_SetCommonPathInternalCh>
 800715c:	e06d      	b.n	800723a <HAL_ADC_ConfigChannel+0xa6e>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a28      	ldr	r2, [pc, #160]	; (8007204 <HAL_ADC_ConfigChannel+0xa38>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d110      	bne.n	800718a <HAL_ADC_ConfigChannel+0x9be>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a18      	ldr	r2, [pc, #96]	; (80071d0 <HAL_ADC_ConfigChannel+0xa04>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d101      	bne.n	8007176 <HAL_ADC_ConfigChannel+0x9aa>
 8007172:	4a18      	ldr	r2, [pc, #96]	; (80071d4 <HAL_ADC_ConfigChannel+0xa08>)
 8007174:	e000      	b.n	8007178 <HAL_ADC_ConfigChannel+0x9ac>
 8007176:	4a18      	ldr	r2, [pc, #96]	; (80071d8 <HAL_ADC_ConfigChannel+0xa0c>)
 8007178:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800717c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007180:	4619      	mov	r1, r3
 8007182:	4610      	mov	r0, r2
 8007184:	f7fe fa5b 	bl	800563e <LL_ADC_SetCommonPathInternalCh>
 8007188:	e057      	b.n	800723a <HAL_ADC_ConfigChannel+0xa6e>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a17      	ldr	r2, [pc, #92]	; (80071ec <HAL_ADC_ConfigChannel+0xa20>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d110      	bne.n	80071b6 <HAL_ADC_ConfigChannel+0x9ea>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a0d      	ldr	r2, [pc, #52]	; (80071d0 <HAL_ADC_ConfigChannel+0xa04>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d101      	bne.n	80071a2 <HAL_ADC_ConfigChannel+0x9d6>
 800719e:	4a0d      	ldr	r2, [pc, #52]	; (80071d4 <HAL_ADC_ConfigChannel+0xa08>)
 80071a0:	e000      	b.n	80071a4 <HAL_ADC_ConfigChannel+0x9d8>
 80071a2:	4a0d      	ldr	r2, [pc, #52]	; (80071d8 <HAL_ADC_ConfigChannel+0xa0c>)
 80071a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071a8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80071ac:	4619      	mov	r1, r3
 80071ae:	4610      	mov	r0, r2
 80071b0:	f7fe fa45 	bl	800563e <LL_ADC_SetCommonPathInternalCh>
 80071b4:	e041      	b.n	800723a <HAL_ADC_ConfigChannel+0xa6e>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a0d      	ldr	r2, [pc, #52]	; (80071f0 <HAL_ADC_ConfigChannel+0xa24>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d13c      	bne.n	800723a <HAL_ADC_ConfigChannel+0xa6e>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a02      	ldr	r2, [pc, #8]	; (80071d0 <HAL_ADC_ConfigChannel+0xa04>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d11e      	bne.n	8007208 <HAL_ADC_ConfigChannel+0xa3c>
 80071ca:	4a02      	ldr	r2, [pc, #8]	; (80071d4 <HAL_ADC_ConfigChannel+0xa08>)
 80071cc:	e01d      	b.n	800720a <HAL_ADC_ConfigChannel+0xa3e>
 80071ce:	bf00      	nop
 80071d0:	42028000 	.word	0x42028000
 80071d4:	42028308 	.word	0x42028308
 80071d8:	46021308 	.word	0x46021308
 80071dc:	b6002000 	.word	0xb6002000
 80071e0:	20000020 	.word	0x20000020
 80071e4:	053e2d63 	.word	0x053e2d63
 80071e8:	ba004000 	.word	0xba004000
 80071ec:	80000001 	.word	0x80000001
 80071f0:	b2001000 	.word	0xb2001000
 80071f4:	46021000 	.word	0x46021000
 80071f8:	d7200000 	.word	0xd7200000
 80071fc:	80000010 	.word	0x80000010
 8007200:	ce080000 	.word	0xce080000
 8007204:	ca040000 	.word	0xca040000
 8007208:	4a25      	ldr	r2, [pc, #148]	; (80072a0 <HAL_ADC_ConfigChannel+0xad4>)
 800720a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800720e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007212:	4619      	mov	r1, r3
 8007214:	4610      	mov	r0, r2
 8007216:	f7fe fa12 	bl	800563e <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 800721a:	f7fe f9ef 	bl	80055fc <HAL_GetREVID>
 800721e:	4603      	mov	r3, r0
 8007220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007224:	d809      	bhi.n	800723a <HAL_ADC_ConfigChannel+0xa6e>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f042 0201 	orr.w	r2, r2, #1
 8007236:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 800723a:	f7fe f9df 	bl	80055fc <HAL_GetREVID>
 800723e:	4603      	mov	r3, r0
 8007240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007244:	d122      	bne.n	800728c <HAL_ADC_ConfigChannel+0xac0>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a16      	ldr	r2, [pc, #88]	; (80072a4 <HAL_ADC_ConfigChannel+0xad8>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d11d      	bne.n	800728c <HAL_ADC_ConfigChannel+0xac0>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007250:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007254:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d117      	bne.n	800728c <HAL_ADC_ConfigChannel+0xac0>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f042 0201 	orr.w	r2, r2, #1
 800726c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8007270:	e00c      	b.n	800728c <HAL_ADC_ConfigChannel+0xac0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007276:	f043 0220 	orr.w	r2, r3, #32
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	679a      	str	r2, [r3, #120]	; 0x78
    tmp_hal_status = HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8007284:	e002      	b.n	800728c <HAL_ADC_ConfigChannel+0xac0>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007286:	bf00      	nop
 8007288:	e000      	b.n	800728c <HAL_ADC_ConfigChannel+0xac0>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800728a:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8007294:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8007298:	4618      	mov	r0, r3
 800729a:	3790      	adds	r7, #144	; 0x90
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	46021308 	.word	0x46021308
 80072a4:	d7200000 	.word	0xd7200000

080072a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7fe fc77 	bl	8005ba8 <LL_ADC_IsEnabled>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d156      	bne.n	800736e <ADC_Enable+0xc6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689a      	ldr	r2, [r3, #8]
 80072c6:	4b2c      	ldr	r3, [pc, #176]	; (8007378 <ADC_Enable+0xd0>)
 80072c8:	4013      	ands	r3, r2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00d      	beq.n	80072ea <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072d2:	f043 0210 	orr.w	r2, r3, #16
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072de:	f043 0201 	orr.w	r2, r3, #1
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e042      	b.n	8007370 <ADC_Enable+0xc8>
    }

    LL_ADC_Enable(hadc->Instance);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7fe fc32 	bl	8005b58 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d004      	beq.n	8007306 <ADC_Enable+0x5e>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a1e      	ldr	r2, [pc, #120]	; (800737c <ADC_Enable+0xd4>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d033      	beq.n	800736e <ADC_Enable+0xc6>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8007306:	f7fe f8bb 	bl	8005480 <HAL_GetTick>
 800730a:	60f8      	str	r0, [r7, #12]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800730c:	e028      	b.n	8007360 <ADC_Enable+0xb8>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4618      	mov	r0, r3
 8007314:	f7fe fc48 	bl	8005ba8 <LL_ADC_IsEnabled>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d104      	bne.n	8007328 <ADC_Enable+0x80>
          {
            LL_ADC_Enable(hadc->Instance);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4618      	mov	r0, r3
 8007324:	f7fe fc18 	bl	8005b58 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007328:	f7fe f8aa 	bl	8005480 <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	2b02      	cmp	r3, #2
 8007334:	d914      	bls.n	8007360 <ADC_Enable+0xb8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	2b01      	cmp	r3, #1
 8007342:	d00d      	beq.n	8007360 <ADC_Enable+0xb8>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007348:	f043 0210 	orr.w	r2, r3, #16
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	679a      	str	r2, [r3, #120]	; 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007354:	f043 0201 	orr.w	r2, r3, #1
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	67da      	str	r2, [r3, #124]	; 0x7c

              return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e007      	b.n	8007370 <ADC_Enable+0xc8>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	2b01      	cmp	r3, #1
 800736c:	d1cf      	bne.n	800730e <ADC_Enable+0x66>
        }
      }
    }
  }

  return HAL_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	8000003f 	.word	0x8000003f
 800737c:	46021000 	.word	0x46021000

08007380 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4618      	mov	r0, r3
 800738e:	f7fe fc1e 	bl	8005bce <LL_ADC_IsDisableOngoing>
 8007392:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4618      	mov	r0, r3
 800739a:	f7fe fc05 	bl	8005ba8 <LL_ADC_IsEnabled>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d047      	beq.n	8007434 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d144      	bne.n	8007434 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f003 030d 	and.w	r3, r3, #13
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d10c      	bne.n	80073d2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4618      	mov	r0, r3
 80073be:	f7fe fbdf 	bl	8005b80 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2203      	movs	r2, #3
 80073c8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80073ca:	f7fe f859 	bl	8005480 <HAL_GetTick>
 80073ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80073d0:	e029      	b.n	8007426 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073d6:	f043 0210 	orr.w	r2, r3, #16
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	679a      	str	r2, [r3, #120]	; 0x78
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073e2:	f043 0201 	orr.w	r2, r3, #1
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	67da      	str	r2, [r3, #124]	; 0x7c
      return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e023      	b.n	8007436 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80073ee:	f7fe f847 	bl	8005480 <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d914      	bls.n	8007426 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00d      	beq.n	8007426 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800740e:	f043 0210 	orr.w	r2, r3, #16
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800741a:	f043 0201 	orr.w	r2, r3, #1
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e007      	b.n	8007436 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1dc      	bne.n	80073ee <ADC_Disable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
	...

08007440 <LL_ADC_StartCalibration>:
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a0f      	ldr	r2, [pc, #60]	; (800748c <LL_ADC_StartCalibration+0x4c>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d00c      	beq.n	800746c <LL_ADC_StartCalibration+0x2c>
    MODIFY_REG(ADCx->CR,
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	689a      	ldr	r2, [r3, #8]
 8007456:	4b0e      	ldr	r3, [pc, #56]	; (8007490 <LL_ADC_StartCalibration+0x50>)
 8007458:	4013      	ands	r3, r2
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8007460:	4313      	orrs	r3, r2
 8007462:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	609a      	str	r2, [r3, #8]
}
 800746a:	e009      	b.n	8007480 <LL_ADC_StartCalibration+0x40>
    MODIFY_REG(ADCx->CR,  ADC_CR_BITS_PROPERTY_RS,    ADC_CR_ADCAL);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007474:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007478:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	609a      	str	r2, [r3, #8]
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	46021000 	.word	0x46021000
 8007490:	7ffeffc0 	.word	0x7ffeffc0

08007494 <LL_ADC_IsCalibrationOnGoing>:
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074a8:	d101      	bne.n	80074ae <LL_ADC_IsCalibrationOnGoing+0x1a>
 80074aa:	2301      	movs	r3, #1
 80074ac:	e000      	b.n	80074b0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80074c8:	2300      	movs	r3, #0
 80074ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  __HAL_LOCK(hadc);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d101      	bne.n	80074da <HAL_ADCEx_Calibration_Start+0x1e>
 80074d6:	2302      	movs	r3, #2
 80074d8:	e04d      	b.n	8007576 <HAL_ADCEx_Calibration_Start+0xba>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f7ff ff4c 	bl	8007380 <ADC_Disable>
 80074e8:	4603      	mov	r3, r0
 80074ea:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80074ec:	7dfb      	ldrb	r3, [r7, #23]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d136      	bne.n	8007560 <HAL_ADCEx_Calibration_Start+0xa4>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80074fa:	f023 0302 	bic.w	r3, r3, #2
 80074fe:	f043 0202 	orr.w	r2, r3, #2
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	679a      	str	r2, [r3, #120]	; 0x78

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68b9      	ldr	r1, [r7, #8]
 800750c:	4618      	mov	r0, r3
 800750e:	f7ff ff97 	bl	8007440 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007512:	e014      	b.n	800753e <HAL_ADCEx_Calibration_Start+0x82>
    {
      wait_loop_index++;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	3301      	adds	r3, #1
 8007518:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	4a18      	ldr	r2, [pc, #96]	; (8007580 <HAL_ADCEx_Calibration_Start+0xc4>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d90d      	bls.n	800753e <HAL_ADCEx_Calibration_Start+0x82>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007526:	f023 0312 	bic.w	r3, r3, #18
 800752a:	f043 0210 	orr.w	r2, r3, #16
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(hadc);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e01b      	b.n	8007576 <HAL_ADCEx_Calibration_Start+0xba>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4618      	mov	r0, r3
 8007544:	f7ff ffa6 	bl	8007494 <LL_ADC_IsCalibrationOnGoing>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1e2      	bne.n	8007514 <HAL_ADCEx_Calibration_Start+0x58>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007552:	f023 0303 	bic.w	r3, r3, #3
 8007556:	f043 0201 	orr.w	r2, r3, #1
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	679a      	str	r2, [r3, #120]	; 0x78
 800755e:	e005      	b.n	800756c <HAL_ADCEx_Calibration_Start+0xb0>
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007564:	f043 0210 	orr.w	r2, r3, #16
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8007574:	7dfb      	ldrb	r3, [r7, #23]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3718      	adds	r7, #24
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	555a95ff 	.word	0x555a95ff

08007584 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f003 0307 	and.w	r3, r3, #7
 80075e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80075e4:	4b0c      	ldr	r3, [pc, #48]	; (8007618 <__NVIC_SetPriorityGrouping+0x44>)
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80075f0:	4013      	ands	r3, r2
 80075f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80075fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007606:	4a04      	ldr	r2, [pc, #16]	; (8007618 <__NVIC_SetPriorityGrouping+0x44>)
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	60d3      	str	r3, [r2, #12]
}
 800760c:	bf00      	nop
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	e000ed00 	.word	0xe000ed00

0800761c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800761c:	b480      	push	{r7}
 800761e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007620:	4b04      	ldr	r3, [pc, #16]	; (8007634 <__NVIC_GetPriorityGrouping+0x18>)
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	0a1b      	lsrs	r3, r3, #8
 8007626:	f003 0307 	and.w	r3, r3, #7
}
 800762a:	4618      	mov	r0, r3
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	e000ed00 	.word	0xe000ed00

08007638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	4603      	mov	r3, r0
 8007640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007646:	2b00      	cmp	r3, #0
 8007648:	db0b      	blt.n	8007662 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800764a:	79fb      	ldrb	r3, [r7, #7]
 800764c:	f003 021f 	and.w	r2, r3, #31
 8007650:	4907      	ldr	r1, [pc, #28]	; (8007670 <__NVIC_EnableIRQ+0x38>)
 8007652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007656:	095b      	lsrs	r3, r3, #5
 8007658:	2001      	movs	r0, #1
 800765a:	fa00 f202 	lsl.w	r2, r0, r2
 800765e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007662:	bf00      	nop
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	e000e100 	.word	0xe000e100

08007674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	4603      	mov	r3, r0
 800767c:	6039      	str	r1, [r7, #0]
 800767e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007684:	2b00      	cmp	r3, #0
 8007686:	db0a      	blt.n	800769e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	b2da      	uxtb	r2, r3
 800768c:	490c      	ldr	r1, [pc, #48]	; (80076c0 <__NVIC_SetPriority+0x4c>)
 800768e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007692:	0112      	lsls	r2, r2, #4
 8007694:	b2d2      	uxtb	r2, r2
 8007696:	440b      	add	r3, r1
 8007698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800769c:	e00a      	b.n	80076b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	b2da      	uxtb	r2, r3
 80076a2:	4908      	ldr	r1, [pc, #32]	; (80076c4 <__NVIC_SetPriority+0x50>)
 80076a4:	79fb      	ldrb	r3, [r7, #7]
 80076a6:	f003 030f 	and.w	r3, r3, #15
 80076aa:	3b04      	subs	r3, #4
 80076ac:	0112      	lsls	r2, r2, #4
 80076ae:	b2d2      	uxtb	r2, r2
 80076b0:	440b      	add	r3, r1
 80076b2:	761a      	strb	r2, [r3, #24]
}
 80076b4:	bf00      	nop
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	e000e100 	.word	0xe000e100
 80076c4:	e000ed00 	.word	0xe000ed00

080076c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b089      	sub	sp, #36	; 0x24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f003 0307 	and.w	r3, r3, #7
 80076da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	f1c3 0307 	rsb	r3, r3, #7
 80076e2:	2b04      	cmp	r3, #4
 80076e4:	bf28      	it	cs
 80076e6:	2304      	movcs	r3, #4
 80076e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	3304      	adds	r3, #4
 80076ee:	2b06      	cmp	r3, #6
 80076f0:	d902      	bls.n	80076f8 <NVIC_EncodePriority+0x30>
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	3b03      	subs	r3, #3
 80076f6:	e000      	b.n	80076fa <NVIC_EncodePriority+0x32>
 80076f8:	2300      	movs	r3, #0
 80076fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	fa02 f303 	lsl.w	r3, r2, r3
 8007706:	43da      	mvns	r2, r3
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	401a      	ands	r2, r3
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007710:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	fa01 f303 	lsl.w	r3, r1, r3
 800771a:	43d9      	mvns	r1, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007720:	4313      	orrs	r3, r2
         );
}
 8007722:	4618      	mov	r0, r3
 8007724:	3724      	adds	r7, #36	; 0x24
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
	...

08007730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	3b01      	subs	r3, #1
 800773c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007740:	d301      	bcc.n	8007746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007742:	2301      	movs	r3, #1
 8007744:	e00f      	b.n	8007766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007746:	4a0a      	ldr	r2, [pc, #40]	; (8007770 <SysTick_Config+0x40>)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3b01      	subs	r3, #1
 800774c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800774e:	210f      	movs	r1, #15
 8007750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007754:	f7ff ff8e 	bl	8007674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007758:	4b05      	ldr	r3, [pc, #20]	; (8007770 <SysTick_Config+0x40>)
 800775a:	2200      	movs	r2, #0
 800775c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800775e:	4b04      	ldr	r3, [pc, #16]	; (8007770 <SysTick_Config+0x40>)
 8007760:	2207      	movs	r2, #7
 8007762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	e000e010 	.word	0xe000e010

08007774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7ff ff29 	bl	80075d4 <__NVIC_SetPriorityGrouping>
}
 8007782:	bf00      	nop
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b086      	sub	sp, #24
 800778e:	af00      	add	r7, sp, #0
 8007790:	4603      	mov	r3, r0
 8007792:	60b9      	str	r1, [r7, #8]
 8007794:	607a      	str	r2, [r7, #4]
 8007796:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007798:	f7ff ff40 	bl	800761c <__NVIC_GetPriorityGrouping>
 800779c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	68b9      	ldr	r1, [r7, #8]
 80077a2:	6978      	ldr	r0, [r7, #20]
 80077a4:	f7ff ff90 	bl	80076c8 <NVIC_EncodePriority>
 80077a8:	4602      	mov	r2, r0
 80077aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077ae:	4611      	mov	r1, r2
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7ff ff5f 	bl	8007674 <__NVIC_SetPriority>
}
 80077b6:	bf00      	nop
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b082      	sub	sp, #8
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	4603      	mov	r3, r0
 80077c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80077c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7ff ff33 	bl	8007638 <__NVIC_EnableIRQ>
}
 80077d2:	bf00      	nop
 80077d4:	3708      	adds	r7, #8
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b082      	sub	sp, #8
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7ff ffa4 	bl	8007730 <SysTick_Config>
 80077e8:	4603      	mov	r3, r0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
	...

080077f4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b089      	sub	sp, #36	; 0x24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80077fe:	2300      	movs	r3, #0
 8007800:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007806:	e1ba      	b.n	8007b7e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	2101      	movs	r1, #1
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	fa01 f303 	lsl.w	r3, r1, r3
 8007814:	4013      	ands	r3, r2
 8007816:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2b00      	cmp	r3, #0
 8007820:	f000 81aa 	beq.w	8007b78 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a55      	ldr	r2, [pc, #340]	; (800797c <HAL_GPIO_Init+0x188>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d15d      	bne.n	80078e8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8007832:	2201      	movs	r2, #1
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	fa02 f303 	lsl.w	r3, r2, r3
 800783a:	43db      	mvns	r3, r3
 800783c:	69fa      	ldr	r2, [r7, #28]
 800783e:	4013      	ands	r3, r2
 8007840:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f003 0201 	and.w	r2, r3, #1
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	fa02 f303 	lsl.w	r3, r2, r3
 8007850:	69fa      	ldr	r2, [r7, #28]
 8007852:	4313      	orrs	r3, r2
 8007854:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	69fa      	ldr	r2, [r7, #28]
 800785a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800785c:	4a48      	ldr	r2, [pc, #288]	; (8007980 <HAL_GPIO_Init+0x18c>)
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007864:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8007866:	4a46      	ldr	r2, [pc, #280]	; (8007980 <HAL_GPIO_Init+0x18c>)
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	00db      	lsls	r3, r3, #3
 800786c:	4413      	add	r3, r2
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	08da      	lsrs	r2, r3, #3
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	3208      	adds	r2, #8
 800787a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800787e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	f003 0307 	and.w	r3, r3, #7
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	220f      	movs	r2, #15
 800788a:	fa02 f303 	lsl.w	r3, r2, r3
 800788e:	43db      	mvns	r3, r3
 8007890:	69fa      	ldr	r2, [r7, #28]
 8007892:	4013      	ands	r3, r2
 8007894:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	f003 0307 	and.w	r3, r3, #7
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	220b      	movs	r2, #11
 80078a0:	fa02 f303 	lsl.w	r3, r2, r3
 80078a4:	69fa      	ldr	r2, [r7, #28]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	08da      	lsrs	r2, r3, #3
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	3208      	adds	r2, #8
 80078b2:	69f9      	ldr	r1, [r7, #28]
 80078b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	2203      	movs	r2, #3
 80078c4:	fa02 f303 	lsl.w	r3, r2, r3
 80078c8:	43db      	mvns	r3, r3
 80078ca:	69fa      	ldr	r2, [r7, #28]
 80078cc:	4013      	ands	r3, r2
 80078ce:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	2202      	movs	r2, #2
 80078d6:	fa02 f303 	lsl.w	r3, r2, r3
 80078da:	69fa      	ldr	r2, [r7, #28]
 80078dc:	4313      	orrs	r3, r2
 80078de:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	69fa      	ldr	r2, [r7, #28]
 80078e4:	601a      	str	r2, [r3, #0]
 80078e6:	e067      	b.n	80079b8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d003      	beq.n	80078f8 <HAL_GPIO_Init+0x104>
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	2b12      	cmp	r3, #18
 80078f6:	d145      	bne.n	8007984 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	08da      	lsrs	r2, r3, #3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3208      	adds	r2, #8
 8007900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007904:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f003 0307 	and.w	r3, r3, #7
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	220f      	movs	r2, #15
 8007910:	fa02 f303 	lsl.w	r3, r2, r3
 8007914:	43db      	mvns	r3, r3
 8007916:	69fa      	ldr	r2, [r7, #28]
 8007918:	4013      	ands	r3, r2
 800791a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	f003 020f 	and.w	r2, r3, #15
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	f003 0307 	and.w	r3, r3, #7
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	fa02 f303 	lsl.w	r3, r2, r3
 8007930:	69fa      	ldr	r2, [r7, #28]
 8007932:	4313      	orrs	r3, r2
 8007934:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	08da      	lsrs	r2, r3, #3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3208      	adds	r2, #8
 800793e:	69f9      	ldr	r1, [r7, #28]
 8007940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	005b      	lsls	r3, r3, #1
 800794e:	2203      	movs	r2, #3
 8007950:	fa02 f303 	lsl.w	r3, r2, r3
 8007954:	43db      	mvns	r3, r3
 8007956:	69fa      	ldr	r2, [r7, #28]
 8007958:	4013      	ands	r3, r2
 800795a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f003 0203 	and.w	r2, r3, #3
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	005b      	lsls	r3, r3, #1
 8007968:	fa02 f303 	lsl.w	r3, r2, r3
 800796c:	69fa      	ldr	r2, [r7, #28]
 800796e:	4313      	orrs	r3, r2
 8007970:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	69fa      	ldr	r2, [r7, #28]
 8007976:	601a      	str	r2, [r3, #0]
 8007978:	e01e      	b.n	80079b8 <HAL_GPIO_Init+0x1c4>
 800797a:	bf00      	nop
 800797c:	46020000 	.word	0x46020000
 8007980:	08011d74 	.word	0x08011d74
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	005b      	lsls	r3, r3, #1
 800798e:	2203      	movs	r2, #3
 8007990:	fa02 f303 	lsl.w	r3, r2, r3
 8007994:	43db      	mvns	r3, r3
 8007996:	69fa      	ldr	r2, [r7, #28]
 8007998:	4013      	ands	r3, r2
 800799a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	f003 0203 	and.w	r2, r3, #3
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	005b      	lsls	r3, r3, #1
 80079a8:	fa02 f303 	lsl.w	r3, r2, r3
 80079ac:	69fa      	ldr	r2, [r7, #28]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	69fa      	ldr	r2, [r7, #28]
 80079b6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d00b      	beq.n	80079d8 <HAL_GPIO_Init+0x1e4>
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d007      	beq.n	80079d8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80079cc:	2b11      	cmp	r3, #17
 80079ce:	d003      	beq.n	80079d8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	2b12      	cmp	r3, #18
 80079d6:	d130      	bne.n	8007a3a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	005b      	lsls	r3, r3, #1
 80079e2:	2203      	movs	r2, #3
 80079e4:	fa02 f303 	lsl.w	r3, r2, r3
 80079e8:	43db      	mvns	r3, r3
 80079ea:	69fa      	ldr	r2, [r7, #28]
 80079ec:	4013      	ands	r3, r2
 80079ee:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	68da      	ldr	r2, [r3, #12]
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	005b      	lsls	r3, r3, #1
 80079f8:	fa02 f303 	lsl.w	r3, r2, r3
 80079fc:	69fa      	ldr	r2, [r7, #28]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	69fa      	ldr	r2, [r7, #28]
 8007a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8007a0e:	2201      	movs	r2, #1
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	fa02 f303 	lsl.w	r3, r2, r3
 8007a16:	43db      	mvns	r3, r3
 8007a18:	69fa      	ldr	r2, [r7, #28]
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	091b      	lsrs	r3, r3, #4
 8007a24:	f003 0201 	and.w	r2, r3, #1
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2e:	69fa      	ldr	r2, [r7, #28]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	69fa      	ldr	r2, [r7, #28]
 8007a38:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	d017      	beq.n	8007a72 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	005b      	lsls	r3, r3, #1
 8007a4c:	2203      	movs	r2, #3
 8007a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a52:	43db      	mvns	r3, r3
 8007a54:	69fa      	ldr	r2, [r7, #28]
 8007a56:	4013      	ands	r3, r2
 8007a58:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	689a      	ldr	r2, [r3, #8]
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	005b      	lsls	r3, r3, #1
 8007a62:	fa02 f303 	lsl.w	r3, r2, r3
 8007a66:	69fa      	ldr	r2, [r7, #28]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	69fa      	ldr	r2, [r7, #28]
 8007a70:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d07c      	beq.n	8007b78 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8007a7e:	4a47      	ldr	r2, [pc, #284]	; (8007b9c <HAL_GPIO_Init+0x3a8>)
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	089b      	lsrs	r3, r3, #2
 8007a84:	3318      	adds	r3, #24
 8007a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a8a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	f003 0303 	and.w	r3, r3, #3
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	220f      	movs	r2, #15
 8007a96:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9a:	43db      	mvns	r3, r3
 8007a9c:	69fa      	ldr	r2, [r7, #28]
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	0a9a      	lsrs	r2, r3, #10
 8007aa6:	4b3e      	ldr	r3, [pc, #248]	; (8007ba0 <HAL_GPIO_Init+0x3ac>)
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	f002 0203 	and.w	r2, r2, #3
 8007ab0:	00d2      	lsls	r2, r2, #3
 8007ab2:	4093      	lsls	r3, r2
 8007ab4:	69fa      	ldr	r2, [r7, #28]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8007aba:	4938      	ldr	r1, [pc, #224]	; (8007b9c <HAL_GPIO_Init+0x3a8>)
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	089b      	lsrs	r3, r3, #2
 8007ac0:	3318      	adds	r3, #24
 8007ac2:	69fa      	ldr	r2, [r7, #28]
 8007ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007ac8:	4b34      	ldr	r3, [pc, #208]	; (8007b9c <HAL_GPIO_Init+0x3a8>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	43db      	mvns	r3, r3
 8007ad2:	69fa      	ldr	r2, [r7, #28]
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d003      	beq.n	8007aec <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8007ae4:	69fa      	ldr	r2, [r7, #28]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8007aec:	4a2b      	ldr	r2, [pc, #172]	; (8007b9c <HAL_GPIO_Init+0x3a8>)
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8007af2:	4b2a      	ldr	r3, [pc, #168]	; (8007b9c <HAL_GPIO_Init+0x3a8>)
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	43db      	mvns	r3, r3
 8007afc:	69fa      	ldr	r2, [r7, #28]
 8007afe:	4013      	ands	r3, r2
 8007b00:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d003      	beq.n	8007b16 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8007b0e:	69fa      	ldr	r2, [r7, #28]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8007b16:	4a21      	ldr	r2, [pc, #132]	; (8007b9c <HAL_GPIO_Init+0x3a8>)
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8007b1c:	4b1f      	ldr	r3, [pc, #124]	; (8007b9c <HAL_GPIO_Init+0x3a8>)
 8007b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b22:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	43db      	mvns	r3, r3
 8007b28:	69fa      	ldr	r2, [r7, #28]
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d003      	beq.n	8007b42 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8007b3a:	69fa      	ldr	r2, [r7, #28]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8007b42:	4a16      	ldr	r2, [pc, #88]	; (8007b9c <HAL_GPIO_Init+0x3a8>)
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8007b4a:	4b14      	ldr	r3, [pc, #80]	; (8007b9c <HAL_GPIO_Init+0x3a8>)
 8007b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b50:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	43db      	mvns	r3, r3
 8007b56:	69fa      	ldr	r2, [r7, #28]
 8007b58:	4013      	ands	r3, r2
 8007b5a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d003      	beq.n	8007b70 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8007b68:	69fa      	ldr	r2, [r7, #28]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8007b70:	4a0a      	ldr	r2, [pc, #40]	; (8007b9c <HAL_GPIO_Init+0x3a8>)
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	fa22 f303 	lsr.w	r3, r2, r3
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f47f ae3d 	bne.w	8007808 <HAL_GPIO_Init+0x14>
  }
}
 8007b8e:	bf00      	nop
 8007b90:	bf00      	nop
 8007b92:	3724      	adds	r7, #36	; 0x24
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr
 8007b9c:	46022000 	.word	0x46022000
 8007ba0:	002f7f7f 	.word	0x002f7f7f

08007ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	460b      	mov	r3, r1
 8007bae:	807b      	strh	r3, [r7, #2]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007bb4:	787b      	ldrb	r3, [r7, #1]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007bba:	887a      	ldrh	r2, [r7, #2]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8007bc0:	e002      	b.n	8007bc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8007bc2:	887a      	ldrh	r2, [r7, #2]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007bc8:	bf00      	nop
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	4603      	mov	r3, r0
 8007bdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8007bde:	4b0f      	ldr	r3, [pc, #60]	; (8007c1c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007be0:	68da      	ldr	r2, [r3, #12]
 8007be2:	88fb      	ldrh	r3, [r7, #6]
 8007be4:	4013      	ands	r3, r2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d006      	beq.n	8007bf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8007bea:	4a0c      	ldr	r2, [pc, #48]	; (8007c1c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007bec:	88fb      	ldrh	r3, [r7, #6]
 8007bee:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8007bf0:	88fb      	ldrh	r3, [r7, #6]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fc fc82 	bl	80044fc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8007bf8:	4b08      	ldr	r3, [pc, #32]	; (8007c1c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007bfa:	691a      	ldr	r2, [r3, #16]
 8007bfc:	88fb      	ldrh	r3, [r7, #6]
 8007bfe:	4013      	ands	r3, r2
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d006      	beq.n	8007c12 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8007c04:	4a05      	ldr	r2, [pc, #20]	; (8007c1c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007c06:	88fb      	ldrh	r3, [r7, #6]
 8007c08:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8007c0a:	88fb      	ldrh	r3, [r7, #6]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7fc fcc9 	bl	80045a4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8007c12:	bf00      	nop
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	46022000 	.word	0x46022000

08007c20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e081      	b.n	8007d36 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d106      	bne.n	8007c4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7fc fd78 	bl	800473c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2224      	movs	r2, #36	; 0x24
 8007c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f022 0201 	bic.w	r2, r2, #1
 8007c62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685a      	ldr	r2, [r3, #4]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007c70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	689a      	ldr	r2, [r3, #8]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d107      	bne.n	8007c9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	689a      	ldr	r2, [r3, #8]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c96:	609a      	str	r2, [r3, #8]
 8007c98:	e006      	b.n	8007ca8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	689a      	ldr	r2, [r3, #8]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007ca6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d104      	bne.n	8007cba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007cb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	6812      	ldr	r2, [r2, #0]
 8007cc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007cc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ccc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68da      	ldr	r2, [r3, #12]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007cdc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	691a      	ldr	r2, [r3, #16]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	69d9      	ldr	r1, [r3, #28]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a1a      	ldr	r2, [r3, #32]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	430a      	orrs	r2, r1
 8007d06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f042 0201 	orr.w	r2, r2, #1
 8007d16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2220      	movs	r2, #32
 8007d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
	...

08007d40 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b088      	sub	sp, #32
 8007d44:	af02      	add	r7, sp, #8
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	607a      	str	r2, [r7, #4]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	817b      	strh	r3, [r7, #10]
 8007d50:	4613      	mov	r3, r2
 8007d52:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b20      	cmp	r3, #32
 8007d5e:	f040 80da 	bne.w	8007f16 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d101      	bne.n	8007d70 <HAL_I2C_Master_Transmit+0x30>
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	e0d3      	b.n	8007f18 <HAL_I2C_Master_Transmit+0x1d8>
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007d78:	f7fd fb82 	bl	8005480 <HAL_GetTick>
 8007d7c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	2319      	movs	r3, #25
 8007d84:	2201      	movs	r2, #1
 8007d86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f000 fcbc 	bl	8008708 <I2C_WaitOnFlagUntilTimeout>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e0be      	b.n	8007f18 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2221      	movs	r2, #33	; 0x21
 8007d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2210      	movs	r2, #16
 8007da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	893a      	ldrh	r2, [r7, #8]
 8007dba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	2bff      	cmp	r3, #255	; 0xff
 8007dca:	d90e      	bls.n	8007dea <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	22ff      	movs	r2, #255	; 0xff
 8007dd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	8979      	ldrh	r1, [r7, #10]
 8007dda:	4b51      	ldr	r3, [pc, #324]	; (8007f20 <HAL_I2C_Master_Transmit+0x1e0>)
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f000 feb2 	bl	8008b4c <I2C_TransferConfig>
 8007de8:	e06c      	b.n	8007ec4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007df8:	b2da      	uxtb	r2, r3
 8007dfa:	8979      	ldrh	r1, [r7, #10]
 8007dfc:	4b48      	ldr	r3, [pc, #288]	; (8007f20 <HAL_I2C_Master_Transmit+0x1e0>)
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f000 fea1 	bl	8008b4c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007e0a:	e05b      	b.n	8007ec4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	6a39      	ldr	r1, [r7, #32]
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f000 fcb9 	bl	8008788 <I2C_WaitOnTXISFlagUntilTimeout>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d001      	beq.n	8007e20 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e07b      	b.n	8007f18 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e24:	781a      	ldrb	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e30:	1c5a      	adds	r2, r3, #1
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d034      	beq.n	8007ec4 <HAL_I2C_Master_Transmit+0x184>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d130      	bne.n	8007ec4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	9300      	str	r3, [sp, #0]
 8007e66:	6a3b      	ldr	r3, [r7, #32]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	2180      	movs	r1, #128	; 0x80
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f000 fc4b 	bl	8008708 <I2C_WaitOnFlagUntilTimeout>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d001      	beq.n	8007e7c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e04d      	b.n	8007f18 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	2bff      	cmp	r3, #255	; 0xff
 8007e84:	d90e      	bls.n	8007ea4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	22ff      	movs	r2, #255	; 0xff
 8007e8a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	8979      	ldrh	r1, [r7, #10]
 8007e94:	2300      	movs	r3, #0
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f000 fe55 	bl	8008b4c <I2C_TransferConfig>
 8007ea2:	e00f      	b.n	8007ec4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eb2:	b2da      	uxtb	r2, r3
 8007eb4:	8979      	ldrh	r1, [r7, #10]
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f000 fe44 	bl	8008b4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d19e      	bne.n	8007e0c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ece:	697a      	ldr	r2, [r7, #20]
 8007ed0:	6a39      	ldr	r1, [r7, #32]
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f000 fc98 	bl	8008808 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e01a      	b.n	8007f18 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2220      	movs	r2, #32
 8007ee8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	6859      	ldr	r1, [r3, #4]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	4b0b      	ldr	r3, [pc, #44]	; (8007f24 <HAL_I2C_Master_Transmit+0x1e4>)
 8007ef6:	400b      	ands	r3, r1
 8007ef8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2220      	movs	r2, #32
 8007efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f12:	2300      	movs	r3, #0
 8007f14:	e000      	b.n	8007f18 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007f16:	2302      	movs	r3, #2
  }
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3718      	adds	r7, #24
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	80002000 	.word	0x80002000
 8007f24:	fe00e800 	.word	0xfe00e800

08007f28 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b088      	sub	sp, #32
 8007f2c:	af02      	add	r7, sp, #8
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	607a      	str	r2, [r7, #4]
 8007f32:	461a      	mov	r2, r3
 8007f34:	460b      	mov	r3, r1
 8007f36:	817b      	strh	r3, [r7, #10]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	2b20      	cmp	r3, #32
 8007f46:	f040 80db 	bne.w	8008100 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d101      	bne.n	8007f58 <HAL_I2C_Master_Receive+0x30>
 8007f54:	2302      	movs	r3, #2
 8007f56:	e0d4      	b.n	8008102 <HAL_I2C_Master_Receive+0x1da>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007f60:	f7fd fa8e 	bl	8005480 <HAL_GetTick>
 8007f64:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	2319      	movs	r3, #25
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f000 fbc8 	bl	8008708 <I2C_WaitOnFlagUntilTimeout>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d001      	beq.n	8007f82 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e0bf      	b.n	8008102 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2222      	movs	r2, #34	; 0x22
 8007f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2210      	movs	r2, #16
 8007f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	893a      	ldrh	r2, [r7, #8]
 8007fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	2bff      	cmp	r3, #255	; 0xff
 8007fb2:	d90e      	bls.n	8007fd2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	22ff      	movs	r2, #255	; 0xff
 8007fb8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	8979      	ldrh	r1, [r7, #10]
 8007fc2:	4b52      	ldr	r3, [pc, #328]	; (800810c <HAL_I2C_Master_Receive+0x1e4>)
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f000 fdbe 	bl	8008b4c <I2C_TransferConfig>
 8007fd0:	e06d      	b.n	80080ae <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	8979      	ldrh	r1, [r7, #10]
 8007fe4:	4b49      	ldr	r3, [pc, #292]	; (800810c <HAL_I2C_Master_Receive+0x1e4>)
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f000 fdad 	bl	8008b4c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007ff2:	e05c      	b.n	80080ae <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	6a39      	ldr	r1, [r7, #32]
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f000 fc41 	bl	8008880 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e07c      	b.n	8008102 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008012:	b2d2      	uxtb	r2, r2
 8008014:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801a:	1c5a      	adds	r2, r3, #1
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008024:	3b01      	subs	r3, #1
 8008026:	b29a      	uxth	r2, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008030:	b29b      	uxth	r3, r3
 8008032:	3b01      	subs	r3, #1
 8008034:	b29a      	uxth	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800803e:	b29b      	uxth	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	d034      	beq.n	80080ae <HAL_I2C_Master_Receive+0x186>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008048:	2b00      	cmp	r3, #0
 800804a:	d130      	bne.n	80080ae <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	6a3b      	ldr	r3, [r7, #32]
 8008052:	2200      	movs	r2, #0
 8008054:	2180      	movs	r1, #128	; 0x80
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f000 fb56 	bl	8008708 <I2C_WaitOnFlagUntilTimeout>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e04d      	b.n	8008102 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800806a:	b29b      	uxth	r3, r3
 800806c:	2bff      	cmp	r3, #255	; 0xff
 800806e:	d90e      	bls.n	800808e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	22ff      	movs	r2, #255	; 0xff
 8008074:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800807a:	b2da      	uxtb	r2, r3
 800807c:	8979      	ldrh	r1, [r7, #10]
 800807e:	2300      	movs	r3, #0
 8008080:	9300      	str	r3, [sp, #0]
 8008082:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f000 fd60 	bl	8008b4c <I2C_TransferConfig>
 800808c:	e00f      	b.n	80080ae <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008092:	b29a      	uxth	r2, r3
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800809c:	b2da      	uxtb	r2, r3
 800809e:	8979      	ldrh	r1, [r7, #10]
 80080a0:	2300      	movs	r3, #0
 80080a2:	9300      	str	r3, [sp, #0]
 80080a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f000 fd4f 	bl	8008b4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d19d      	bne.n	8007ff4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	6a39      	ldr	r1, [r7, #32]
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 fba3 	bl	8008808 <I2C_WaitOnSTOPFlagUntilTimeout>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d001      	beq.n	80080cc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e01a      	b.n	8008102 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2220      	movs	r2, #32
 80080d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6859      	ldr	r1, [r3, #4]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	4b0c      	ldr	r3, [pc, #48]	; (8008110 <HAL_I2C_Master_Receive+0x1e8>)
 80080e0:	400b      	ands	r3, r1
 80080e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2220      	movs	r2, #32
 80080e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	e000      	b.n	8008102 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008100:	2302      	movs	r3, #2
  }
}
 8008102:	4618      	mov	r0, r3
 8008104:	3718      	adds	r7, #24
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	80002400 	.word	0x80002400
 8008110:	fe00e800 	.word	0xfe00e800

08008114 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b088      	sub	sp, #32
 8008118:	af02      	add	r7, sp, #8
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	4608      	mov	r0, r1
 800811e:	4611      	mov	r1, r2
 8008120:	461a      	mov	r2, r3
 8008122:	4603      	mov	r3, r0
 8008124:	817b      	strh	r3, [r7, #10]
 8008126:	460b      	mov	r3, r1
 8008128:	813b      	strh	r3, [r7, #8]
 800812a:	4613      	mov	r3, r2
 800812c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b20      	cmp	r3, #32
 8008138:	f040 80f9 	bne.w	800832e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800813c:	6a3b      	ldr	r3, [r7, #32]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d002      	beq.n	8008148 <HAL_I2C_Mem_Write+0x34>
 8008142:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008144:	2b00      	cmp	r3, #0
 8008146:	d105      	bne.n	8008154 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800814e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e0ed      	b.n	8008330 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800815a:	2b01      	cmp	r3, #1
 800815c:	d101      	bne.n	8008162 <HAL_I2C_Mem_Write+0x4e>
 800815e:	2302      	movs	r3, #2
 8008160:	e0e6      	b.n	8008330 <HAL_I2C_Mem_Write+0x21c>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2201      	movs	r2, #1
 8008166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800816a:	f7fd f989 	bl	8005480 <HAL_GetTick>
 800816e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	2319      	movs	r3, #25
 8008176:	2201      	movs	r2, #1
 8008178:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f000 fac3 	bl	8008708 <I2C_WaitOnFlagUntilTimeout>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e0d1      	b.n	8008330 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2221      	movs	r2, #33	; 0x21
 8008190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2240      	movs	r2, #64	; 0x40
 8008198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2200      	movs	r2, #0
 80081a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6a3a      	ldr	r2, [r7, #32]
 80081a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80081ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80081b4:	88f8      	ldrh	r0, [r7, #6]
 80081b6:	893a      	ldrh	r2, [r7, #8]
 80081b8:	8979      	ldrh	r1, [r7, #10]
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	9301      	str	r3, [sp, #4]
 80081be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c0:	9300      	str	r3, [sp, #0]
 80081c2:	4603      	mov	r3, r0
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f000 f9d3 	bl	8008570 <I2C_RequestMemoryWrite>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d005      	beq.n	80081dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e0a9      	b.n	8008330 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	2bff      	cmp	r3, #255	; 0xff
 80081e4:	d90e      	bls.n	8008204 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	22ff      	movs	r2, #255	; 0xff
 80081ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	8979      	ldrh	r1, [r7, #10]
 80081f4:	2300      	movs	r3, #0
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 fca5 	bl	8008b4c <I2C_TransferConfig>
 8008202:	e00f      	b.n	8008224 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008208:	b29a      	uxth	r2, r3
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008212:	b2da      	uxtb	r2, r3
 8008214:	8979      	ldrh	r1, [r7, #10]
 8008216:	2300      	movs	r3, #0
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f000 fc94 	bl	8008b4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f000 faad 	bl	8008788 <I2C_WaitOnTXISFlagUntilTimeout>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d001      	beq.n	8008238 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	e07b      	b.n	8008330 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823c:	781a      	ldrb	r2, [r3, #0]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008248:	1c5a      	adds	r2, r3, #1
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008252:	b29b      	uxth	r3, r3
 8008254:	3b01      	subs	r3, #1
 8008256:	b29a      	uxth	r2, r3
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008260:	3b01      	subs	r3, #1
 8008262:	b29a      	uxth	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800826c:	b29b      	uxth	r3, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	d034      	beq.n	80082dc <HAL_I2C_Mem_Write+0x1c8>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008276:	2b00      	cmp	r3, #0
 8008278:	d130      	bne.n	80082dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008280:	2200      	movs	r2, #0
 8008282:	2180      	movs	r1, #128	; 0x80
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f000 fa3f 	bl	8008708 <I2C_WaitOnFlagUntilTimeout>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d001      	beq.n	8008294 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e04d      	b.n	8008330 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008298:	b29b      	uxth	r3, r3
 800829a:	2bff      	cmp	r3, #255	; 0xff
 800829c:	d90e      	bls.n	80082bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	22ff      	movs	r2, #255	; 0xff
 80082a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	8979      	ldrh	r1, [r7, #10]
 80082ac:	2300      	movs	r3, #0
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f000 fc49 	bl	8008b4c <I2C_TransferConfig>
 80082ba:	e00f      	b.n	80082dc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082ca:	b2da      	uxtb	r2, r3
 80082cc:	8979      	ldrh	r1, [r7, #10]
 80082ce:	2300      	movs	r3, #0
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 fc38 	bl	8008b4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d19e      	bne.n	8008224 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082e6:	697a      	ldr	r2, [r7, #20]
 80082e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	f000 fa8c 	bl	8008808 <I2C_WaitOnSTOPFlagUntilTimeout>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d001      	beq.n	80082fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e01a      	b.n	8008330 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2220      	movs	r2, #32
 8008300:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	6859      	ldr	r1, [r3, #4]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	4b0a      	ldr	r3, [pc, #40]	; (8008338 <HAL_I2C_Mem_Write+0x224>)
 800830e:	400b      	ands	r3, r1
 8008310:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2220      	movs	r2, #32
 8008316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800832a:	2300      	movs	r3, #0
 800832c:	e000      	b.n	8008330 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800832e:	2302      	movs	r3, #2
  }
}
 8008330:	4618      	mov	r0, r3
 8008332:	3718      	adds	r7, #24
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	fe00e800 	.word	0xfe00e800

0800833c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b088      	sub	sp, #32
 8008340:	af02      	add	r7, sp, #8
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	4608      	mov	r0, r1
 8008346:	4611      	mov	r1, r2
 8008348:	461a      	mov	r2, r3
 800834a:	4603      	mov	r3, r0
 800834c:	817b      	strh	r3, [r7, #10]
 800834e:	460b      	mov	r3, r1
 8008350:	813b      	strh	r3, [r7, #8]
 8008352:	4613      	mov	r3, r2
 8008354:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b20      	cmp	r3, #32
 8008360:	f040 80fd 	bne.w	800855e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d002      	beq.n	8008370 <HAL_I2C_Mem_Read+0x34>
 800836a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800836c:	2b00      	cmp	r3, #0
 800836e:	d105      	bne.n	800837c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008376:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e0f1      	b.n	8008560 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008382:	2b01      	cmp	r3, #1
 8008384:	d101      	bne.n	800838a <HAL_I2C_Mem_Read+0x4e>
 8008386:	2302      	movs	r3, #2
 8008388:	e0ea      	b.n	8008560 <HAL_I2C_Mem_Read+0x224>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2201      	movs	r2, #1
 800838e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008392:	f7fd f875 	bl	8005480 <HAL_GetTick>
 8008396:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	2319      	movs	r3, #25
 800839e:	2201      	movs	r2, #1
 80083a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f000 f9af 	bl	8008708 <I2C_WaitOnFlagUntilTimeout>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d001      	beq.n	80083b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e0d5      	b.n	8008560 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2222      	movs	r2, #34	; 0x22
 80083b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2240      	movs	r2, #64	; 0x40
 80083c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6a3a      	ldr	r2, [r7, #32]
 80083ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80083d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2200      	movs	r2, #0
 80083da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80083dc:	88f8      	ldrh	r0, [r7, #6]
 80083de:	893a      	ldrh	r2, [r7, #8]
 80083e0:	8979      	ldrh	r1, [r7, #10]
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	9301      	str	r3, [sp, #4]
 80083e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	4603      	mov	r3, r0
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f000 f913 	bl	8008618 <I2C_RequestMemoryRead>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d005      	beq.n	8008404 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e0ad      	b.n	8008560 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008408:	b29b      	uxth	r3, r3
 800840a:	2bff      	cmp	r3, #255	; 0xff
 800840c:	d90e      	bls.n	800842c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	22ff      	movs	r2, #255	; 0xff
 8008412:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008418:	b2da      	uxtb	r2, r3
 800841a:	8979      	ldrh	r1, [r7, #10]
 800841c:	4b52      	ldr	r3, [pc, #328]	; (8008568 <HAL_I2C_Mem_Read+0x22c>)
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f000 fb91 	bl	8008b4c <I2C_TransferConfig>
 800842a:	e00f      	b.n	800844c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008430:	b29a      	uxth	r2, r3
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800843a:	b2da      	uxtb	r2, r3
 800843c:	8979      	ldrh	r1, [r7, #10]
 800843e:	4b4a      	ldr	r3, [pc, #296]	; (8008568 <HAL_I2C_Mem_Read+0x22c>)
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f000 fb80 	bl	8008b4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008452:	2200      	movs	r2, #0
 8008454:	2104      	movs	r1, #4
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f000 f956 	bl	8008708 <I2C_WaitOnFlagUntilTimeout>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d001      	beq.n	8008466 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e07c      	b.n	8008560 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008470:	b2d2      	uxtb	r2, r2
 8008472:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008478:	1c5a      	adds	r2, r3, #1
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008482:	3b01      	subs	r3, #1
 8008484:	b29a      	uxth	r2, r3
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800848e:	b29b      	uxth	r3, r3
 8008490:	3b01      	subs	r3, #1
 8008492:	b29a      	uxth	r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800849c:	b29b      	uxth	r3, r3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d034      	beq.n	800850c <HAL_I2C_Mem_Read+0x1d0>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d130      	bne.n	800850c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b0:	2200      	movs	r2, #0
 80084b2:	2180      	movs	r1, #128	; 0x80
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f000 f927 	bl	8008708 <I2C_WaitOnFlagUntilTimeout>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d001      	beq.n	80084c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	e04d      	b.n	8008560 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	2bff      	cmp	r3, #255	; 0xff
 80084cc:	d90e      	bls.n	80084ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	22ff      	movs	r2, #255	; 0xff
 80084d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084d8:	b2da      	uxtb	r2, r3
 80084da:	8979      	ldrh	r1, [r7, #10]
 80084dc:	2300      	movs	r3, #0
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f000 fb31 	bl	8008b4c <I2C_TransferConfig>
 80084ea:	e00f      	b.n	800850c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084fa:	b2da      	uxtb	r2, r3
 80084fc:	8979      	ldrh	r1, [r7, #10]
 80084fe:	2300      	movs	r3, #0
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f000 fb20 	bl	8008b4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008510:	b29b      	uxth	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	d19a      	bne.n	800844c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008516:	697a      	ldr	r2, [r7, #20]
 8008518:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f000 f974 	bl	8008808 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d001      	beq.n	800852a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e01a      	b.n	8008560 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2220      	movs	r2, #32
 8008530:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6859      	ldr	r1, [r3, #4]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	4b0b      	ldr	r3, [pc, #44]	; (800856c <HAL_I2C_Mem_Read+0x230>)
 800853e:	400b      	ands	r3, r1
 8008540:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2220      	movs	r2, #32
 8008546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800855a:	2300      	movs	r3, #0
 800855c:	e000      	b.n	8008560 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800855e:	2302      	movs	r3, #2
  }
}
 8008560:	4618      	mov	r0, r3
 8008562:	3718      	adds	r7, #24
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	80002400 	.word	0x80002400
 800856c:	fe00e800 	.word	0xfe00e800

08008570 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af02      	add	r7, sp, #8
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	4608      	mov	r0, r1
 800857a:	4611      	mov	r1, r2
 800857c:	461a      	mov	r2, r3
 800857e:	4603      	mov	r3, r0
 8008580:	817b      	strh	r3, [r7, #10]
 8008582:	460b      	mov	r3, r1
 8008584:	813b      	strh	r3, [r7, #8]
 8008586:	4613      	mov	r3, r2
 8008588:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800858a:	88fb      	ldrh	r3, [r7, #6]
 800858c:	b2da      	uxtb	r2, r3
 800858e:	8979      	ldrh	r1, [r7, #10]
 8008590:	4b20      	ldr	r3, [pc, #128]	; (8008614 <I2C_RequestMemoryWrite+0xa4>)
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f000 fad7 	bl	8008b4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800859e:	69fa      	ldr	r2, [r7, #28]
 80085a0:	69b9      	ldr	r1, [r7, #24]
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f000 f8f0 	bl	8008788 <I2C_WaitOnTXISFlagUntilTimeout>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d001      	beq.n	80085b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	e02c      	b.n	800860c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80085b2:	88fb      	ldrh	r3, [r7, #6]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d105      	bne.n	80085c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80085b8:	893b      	ldrh	r3, [r7, #8]
 80085ba:	b2da      	uxtb	r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	629a      	str	r2, [r3, #40]	; 0x28
 80085c2:	e015      	b.n	80085f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80085c4:	893b      	ldrh	r3, [r7, #8]
 80085c6:	0a1b      	lsrs	r3, r3, #8
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	b2da      	uxtb	r2, r3
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085d2:	69fa      	ldr	r2, [r7, #28]
 80085d4:	69b9      	ldr	r1, [r7, #24]
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f000 f8d6 	bl	8008788 <I2C_WaitOnTXISFlagUntilTimeout>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e012      	b.n	800860c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80085e6:	893b      	ldrh	r3, [r7, #8]
 80085e8:	b2da      	uxtb	r2, r3
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	2200      	movs	r2, #0
 80085f8:	2180      	movs	r1, #128	; 0x80
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f000 f884 	bl	8008708 <I2C_WaitOnFlagUntilTimeout>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e000      	b.n	800860c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	80002000 	.word	0x80002000

08008618 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af02      	add	r7, sp, #8
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	4608      	mov	r0, r1
 8008622:	4611      	mov	r1, r2
 8008624:	461a      	mov	r2, r3
 8008626:	4603      	mov	r3, r0
 8008628:	817b      	strh	r3, [r7, #10]
 800862a:	460b      	mov	r3, r1
 800862c:	813b      	strh	r3, [r7, #8]
 800862e:	4613      	mov	r3, r2
 8008630:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008632:	88fb      	ldrh	r3, [r7, #6]
 8008634:	b2da      	uxtb	r2, r3
 8008636:	8979      	ldrh	r1, [r7, #10]
 8008638:	4b20      	ldr	r3, [pc, #128]	; (80086bc <I2C_RequestMemoryRead+0xa4>)
 800863a:	9300      	str	r3, [sp, #0]
 800863c:	2300      	movs	r3, #0
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f000 fa84 	bl	8008b4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008644:	69fa      	ldr	r2, [r7, #28]
 8008646:	69b9      	ldr	r1, [r7, #24]
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 f89d 	bl	8008788 <I2C_WaitOnTXISFlagUntilTimeout>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d001      	beq.n	8008658 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	e02c      	b.n	80086b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008658:	88fb      	ldrh	r3, [r7, #6]
 800865a:	2b01      	cmp	r3, #1
 800865c:	d105      	bne.n	800866a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800865e:	893b      	ldrh	r3, [r7, #8]
 8008660:	b2da      	uxtb	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	629a      	str	r2, [r3, #40]	; 0x28
 8008668:	e015      	b.n	8008696 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800866a:	893b      	ldrh	r3, [r7, #8]
 800866c:	0a1b      	lsrs	r3, r3, #8
 800866e:	b29b      	uxth	r3, r3
 8008670:	b2da      	uxtb	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008678:	69fa      	ldr	r2, [r7, #28]
 800867a:	69b9      	ldr	r1, [r7, #24]
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 f883 	bl	8008788 <I2C_WaitOnTXISFlagUntilTimeout>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d001      	beq.n	800868c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	e012      	b.n	80086b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800868c:	893b      	ldrh	r3, [r7, #8]
 800868e:	b2da      	uxtb	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	2200      	movs	r2, #0
 800869e:	2140      	movs	r1, #64	; 0x40
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f000 f831 	bl	8008708 <I2C_WaitOnFlagUntilTimeout>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d001      	beq.n	80086b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e000      	b.n	80086b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	80002000 	.word	0x80002000

080086c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	f003 0302 	and.w	r3, r3, #2
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d103      	bne.n	80086de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2200      	movs	r2, #0
 80086dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	f003 0301 	and.w	r3, r3, #1
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d007      	beq.n	80086fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	699a      	ldr	r2, [r3, #24]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f042 0201 	orr.w	r2, r2, #1
 80086fa:	619a      	str	r2, [r3, #24]
  }
}
 80086fc:	bf00      	nop
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	603b      	str	r3, [r7, #0]
 8008714:	4613      	mov	r3, r2
 8008716:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008718:	e022      	b.n	8008760 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008720:	d01e      	beq.n	8008760 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008722:	f7fc fead 	bl	8005480 <HAL_GetTick>
 8008726:	4602      	mov	r2, r0
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	683a      	ldr	r2, [r7, #0]
 800872e:	429a      	cmp	r2, r3
 8008730:	d302      	bcc.n	8008738 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d113      	bne.n	8008760 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800873c:	f043 0220 	orr.w	r2, r3, #32
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2220      	movs	r2, #32
 8008748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	e00f      	b.n	8008780 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	699a      	ldr	r2, [r3, #24]
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	4013      	ands	r3, r2
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	429a      	cmp	r2, r3
 800876e:	bf0c      	ite	eq
 8008770:	2301      	moveq	r3, #1
 8008772:	2300      	movne	r3, #0
 8008774:	b2db      	uxtb	r3, r3
 8008776:	461a      	mov	r2, r3
 8008778:	79fb      	ldrb	r3, [r7, #7]
 800877a:	429a      	cmp	r2, r3
 800877c:	d0cd      	beq.n	800871a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008794:	e02c      	b.n	80087f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	68b9      	ldr	r1, [r7, #8]
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f000 f8ea 	bl	8008974 <I2C_IsErrorOccurred>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d001      	beq.n	80087aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e02a      	b.n	8008800 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087b0:	d01e      	beq.n	80087f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087b2:	f7fc fe65 	bl	8005480 <HAL_GetTick>
 80087b6:	4602      	mov	r2, r0
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	68ba      	ldr	r2, [r7, #8]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d302      	bcc.n	80087c8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d113      	bne.n	80087f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087cc:	f043 0220 	orr.w	r2, r3, #32
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2220      	movs	r2, #32
 80087d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e007      	b.n	8008800 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	699b      	ldr	r3, [r3, #24]
 80087f6:	f003 0302 	and.w	r3, r3, #2
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d1cb      	bne.n	8008796 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008814:	e028      	b.n	8008868 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	68b9      	ldr	r1, [r7, #8]
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f000 f8aa 	bl	8008974 <I2C_IsErrorOccurred>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e026      	b.n	8008878 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800882a:	f7fc fe29 	bl	8005480 <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	68ba      	ldr	r2, [r7, #8]
 8008836:	429a      	cmp	r2, r3
 8008838:	d302      	bcc.n	8008840 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d113      	bne.n	8008868 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008844:	f043 0220 	orr.w	r2, r3, #32
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2220      	movs	r2, #32
 8008850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e007      	b.n	8008878 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	f003 0320 	and.w	r3, r3, #32
 8008872:	2b20      	cmp	r3, #32
 8008874:	d1cf      	bne.n	8008816 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800888c:	e064      	b.n	8008958 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	68b9      	ldr	r1, [r7, #8]
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f000 f86e 	bl	8008974 <I2C_IsErrorOccurred>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e062      	b.n	8008968 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	f003 0320 	and.w	r3, r3, #32
 80088ac:	2b20      	cmp	r3, #32
 80088ae:	d138      	bne.n	8008922 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	f003 0304 	and.w	r3, r3, #4
 80088ba:	2b04      	cmp	r3, #4
 80088bc:	d105      	bne.n	80088ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d001      	beq.n	80088ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80088c6:	2300      	movs	r3, #0
 80088c8:	e04e      	b.n	8008968 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	f003 0310 	and.w	r3, r3, #16
 80088d4:	2b10      	cmp	r3, #16
 80088d6:	d107      	bne.n	80088e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2210      	movs	r2, #16
 80088de:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2204      	movs	r2, #4
 80088e4:	645a      	str	r2, [r3, #68]	; 0x44
 80088e6:	e002      	b.n	80088ee <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2200      	movs	r2, #0
 80088ec:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2220      	movs	r2, #32
 80088f4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	6859      	ldr	r1, [r3, #4]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	4b1b      	ldr	r3, [pc, #108]	; (8008970 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8008902:	400b      	ands	r3, r1
 8008904:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2220      	movs	r2, #32
 800890a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	e022      	b.n	8008968 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008922:	f7fc fdad 	bl	8005480 <HAL_GetTick>
 8008926:	4602      	mov	r2, r0
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	429a      	cmp	r2, r3
 8008930:	d302      	bcc.n	8008938 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d10f      	bne.n	8008958 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800893c:	f043 0220 	orr.w	r2, r3, #32
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2220      	movs	r2, #32
 8008948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	e007      	b.n	8008968 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	f003 0304 	and.w	r3, r3, #4
 8008962:	2b04      	cmp	r3, #4
 8008964:	d193      	bne.n	800888e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	fe00e800 	.word	0xfe00e800

08008974 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b08a      	sub	sp, #40	; 0x28
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008980:	2300      	movs	r3, #0
 8008982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800898e:	2300      	movs	r3, #0
 8008990:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	f003 0310 	and.w	r3, r3, #16
 800899c:	2b00      	cmp	r3, #0
 800899e:	d075      	beq.n	8008a8c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2210      	movs	r2, #16
 80089a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80089a8:	e056      	b.n	8008a58 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089b0:	d052      	beq.n	8008a58 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80089b2:	f7fc fd65 	bl	8005480 <HAL_GetTick>
 80089b6:	4602      	mov	r2, r0
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d302      	bcc.n	80089c8 <I2C_IsErrorOccurred+0x54>
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d147      	bne.n	8008a58 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80089da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089ea:	d12e      	bne.n	8008a4a <I2C_IsErrorOccurred+0xd6>
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089f2:	d02a      	beq.n	8008a4a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80089f4:	7cfb      	ldrb	r3, [r7, #19]
 80089f6:	2b20      	cmp	r3, #32
 80089f8:	d027      	beq.n	8008a4a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	685a      	ldr	r2, [r3, #4]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a08:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008a0a:	f7fc fd39 	bl	8005480 <HAL_GetTick>
 8008a0e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a10:	e01b      	b.n	8008a4a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008a12:	f7fc fd35 	bl	8005480 <HAL_GetTick>
 8008a16:	4602      	mov	r2, r0
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	2b19      	cmp	r3, #25
 8008a1e:	d914      	bls.n	8008a4a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a24:	f043 0220 	orr.w	r2, r3, #32
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	699b      	ldr	r3, [r3, #24]
 8008a50:	f003 0320 	and.w	r3, r3, #32
 8008a54:	2b20      	cmp	r3, #32
 8008a56:	d1dc      	bne.n	8008a12 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	699b      	ldr	r3, [r3, #24]
 8008a5e:	f003 0320 	and.w	r3, r3, #32
 8008a62:	2b20      	cmp	r3, #32
 8008a64:	d003      	beq.n	8008a6e <I2C_IsErrorOccurred+0xfa>
 8008a66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d09d      	beq.n	80089aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008a6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d103      	bne.n	8008a7e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2220      	movs	r2, #32
 8008a7c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008a7e:	6a3b      	ldr	r3, [r7, #32]
 8008a80:	f043 0304 	orr.w	r3, r3, #4
 8008a84:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00b      	beq.n	8008ab6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008a9e:	6a3b      	ldr	r3, [r7, #32]
 8008aa0:	f043 0301 	orr.w	r3, r3, #1
 8008aa4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008aae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00b      	beq.n	8008ad8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	f043 0308 	orr.w	r3, r3, #8
 8008ac6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008ad0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00b      	beq.n	8008afa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008ae2:	6a3b      	ldr	r3, [r7, #32]
 8008ae4:	f043 0302 	orr.w	r3, r3, #2
 8008ae8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008af2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d01c      	beq.n	8008b3c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f7ff fddc 	bl	80086c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6859      	ldr	r1, [r3, #4]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	4b0d      	ldr	r3, [pc, #52]	; (8008b48 <I2C_IsErrorOccurred+0x1d4>)
 8008b14:	400b      	ands	r3, r1
 8008b16:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	431a      	orrs	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2220      	movs	r2, #32
 8008b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3728      	adds	r7, #40	; 0x28
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	fe00e800 	.word	0xfe00e800

08008b4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b087      	sub	sp, #28
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	607b      	str	r3, [r7, #4]
 8008b56:	460b      	mov	r3, r1
 8008b58:	817b      	strh	r3, [r7, #10]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b5e:	897b      	ldrh	r3, [r7, #10]
 8008b60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b64:	7a7b      	ldrb	r3, [r7, #9]
 8008b66:	041b      	lsls	r3, r3, #16
 8008b68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b6c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b7a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	685a      	ldr	r2, [r3, #4]
 8008b82:	6a3b      	ldr	r3, [r7, #32]
 8008b84:	0d5b      	lsrs	r3, r3, #21
 8008b86:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008b8a:	4b08      	ldr	r3, [pc, #32]	; (8008bac <I2C_TransferConfig+0x60>)
 8008b8c:	430b      	orrs	r3, r1
 8008b8e:	43db      	mvns	r3, r3
 8008b90:	ea02 0103 	and.w	r1, r2, r3
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008b9e:	bf00      	nop
 8008ba0:	371c      	adds	r7, #28
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	03ff63ff 	.word	0x03ff63ff

08008bb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	2b20      	cmp	r3, #32
 8008bc4:	d138      	bne.n	8008c38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d101      	bne.n	8008bd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	e032      	b.n	8008c3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2224      	movs	r2, #36	; 0x24
 8008be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f022 0201 	bic.w	r2, r2, #1
 8008bf2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6819      	ldr	r1, [r3, #0]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	683a      	ldr	r2, [r7, #0]
 8008c10:	430a      	orrs	r2, r1
 8008c12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f042 0201 	orr.w	r2, r2, #1
 8008c22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2220      	movs	r2, #32
 8008c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008c34:	2300      	movs	r3, #0
 8008c36:	e000      	b.n	8008c3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008c38:	2302      	movs	r3, #2
  }
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b085      	sub	sp, #20
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
 8008c4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b20      	cmp	r3, #32
 8008c5a:	d139      	bne.n	8008cd0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d101      	bne.n	8008c6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008c66:	2302      	movs	r3, #2
 8008c68:	e033      	b.n	8008cd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2224      	movs	r2, #36	; 0x24
 8008c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f022 0201 	bic.w	r2, r2, #1
 8008c88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008c98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	021b      	lsls	r3, r3, #8
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f042 0201 	orr.w	r2, r2, #1
 8008cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	e000      	b.n	8008cd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008cd0:	2302      	movs	r3, #2
  }
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
	...

08008ce0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8008cec:	4b0b      	ldr	r3, [pc, #44]	; (8008d1c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 0301 	and.w	r3, r3, #1
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d002      	beq.n	8008cfe <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	73fb      	strb	r3, [r7, #15]
 8008cfc:	e007      	b.n	8008d0e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8008cfe:	4b07      	ldr	r3, [pc, #28]	; (8008d1c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f023 0204 	bic.w	r2, r3, #4
 8008d06:	4905      	ldr	r1, [pc, #20]	; (8008d1c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8008d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3714      	adds	r7, #20
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr
 8008d1c:	40030400 	.word	0x40030400

08008d20 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8008d20:	b480      	push	{r7}
 8008d22:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8008d24:	4b05      	ldr	r3, [pc, #20]	; (8008d3c <HAL_ICACHE_Enable+0x1c>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a04      	ldr	r2, [pc, #16]	; (8008d3c <HAL_ICACHE_Enable+0x1c>)
 8008d2a:	f043 0301 	orr.w	r3, r3, #1
 8008d2e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr
 8008d3c:	40030400 	.word	0x40030400

08008d40 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8008d48:	4b34      	ldr	r3, [pc, #208]	; (8008e1c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8008d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d50:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8008d52:	68ba      	ldr	r2, [r7, #8]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d101      	bne.n	8008d5e <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	e057      	b.n	8008e0e <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d64:	d90a      	bls.n	8008d7c <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8008d66:	4b2d      	ldr	r3, [pc, #180]	; (8008e1c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	4a2a      	ldr	r2, [pc, #168]	; (8008e1c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8008d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d78:	60d3      	str	r3, [r2, #12]
 8008d7a:	e007      	b.n	8008d8c <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8008d7c:	4b27      	ldr	r3, [pc, #156]	; (8008e1c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008d84:	4925      	ldr	r1, [pc, #148]	; (8008e1c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8008d8c:	4b24      	ldr	r3, [pc, #144]	; (8008e20 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a24      	ldr	r2, [pc, #144]	; (8008e24 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8008d92:	fba2 2303 	umull	r2, r3, r2, r3
 8008d96:	099b      	lsrs	r3, r3, #6
 8008d98:	2232      	movs	r2, #50	; 0x32
 8008d9a:	fb02 f303 	mul.w	r3, r2, r3
 8008d9e:	4a21      	ldr	r2, [pc, #132]	; (8008e24 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8008da0:	fba2 2303 	umull	r2, r3, r2, r3
 8008da4:	099b      	lsrs	r3, r3, #6
 8008da6:	3301      	adds	r3, #1
 8008da8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8008daa:	e002      	b.n	8008db2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	3b01      	subs	r3, #1
 8008db0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8008db2:	4b1a      	ldr	r3, [pc, #104]	; (8008e1c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d102      	bne.n	8008dc4 <HAL_PWREx_ControlVoltageScaling+0x84>
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d1f3      	bne.n	8008dac <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d01b      	beq.n	8008e02 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8008dca:	4b15      	ldr	r3, [pc, #84]	; (8008e20 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a15      	ldr	r2, [pc, #84]	; (8008e24 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8008dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd4:	099b      	lsrs	r3, r3, #6
 8008dd6:	2232      	movs	r2, #50	; 0x32
 8008dd8:	fb02 f303 	mul.w	r3, r2, r3
 8008ddc:	4a11      	ldr	r2, [pc, #68]	; (8008e24 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8008dde:	fba2 2303 	umull	r2, r3, r2, r3
 8008de2:	099b      	lsrs	r3, r3, #6
 8008de4:	3301      	adds	r3, #1
 8008de6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8008de8:	e002      	b.n	8008df0 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	3b01      	subs	r3, #1
 8008dee:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8008df0:	4b0a      	ldr	r3, [pc, #40]	; (8008e1c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8008df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008df4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d102      	bne.n	8008e02 <HAL_PWREx_ControlVoltageScaling+0xc2>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d1f3      	bne.n	8008dea <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d101      	bne.n	8008e0c <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	e000      	b.n	8008e0e <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3714      	adds	r7, #20
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	46020800 	.word	0x46020800
 8008e20:	20000020 	.word	0x20000020
 8008e24:	10624dd3 	.word	0x10624dd3

08008e28 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8008e2c:	4b04      	ldr	r3, [pc, #16]	; (8008e40 <HAL_PWREx_GetVoltageRange+0x18>)
 8008e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	46020800 	.word	0x46020800

08008e44 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8008e4c:	4b22      	ldr	r3, [pc, #136]	; (8008ed8 <HAL_PWREx_ConfigSupply+0x94>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a22      	ldr	r2, [pc, #136]	; (8008edc <HAL_PWREx_ConfigSupply+0x98>)
 8008e52:	fba2 2303 	umull	r2, r3, r2, r3
 8008e56:	099b      	lsrs	r3, r3, #6
 8008e58:	2232      	movs	r2, #50	; 0x32
 8008e5a:	fb02 f303 	mul.w	r3, r2, r3
 8008e5e:	4a1f      	ldr	r2, [pc, #124]	; (8008edc <HAL_PWREx_ConfigSupply+0x98>)
 8008e60:	fba2 2303 	umull	r2, r3, r2, r3
 8008e64:	099b      	lsrs	r3, r3, #6
 8008e66:	3301      	adds	r3, #1
 8008e68:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d113      	bne.n	8008e98 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8008e70:	4b1b      	ldr	r3, [pc, #108]	; (8008ee0 <HAL_PWREx_ConfigSupply+0x9c>)
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	4a1a      	ldr	r2, [pc, #104]	; (8008ee0 <HAL_PWREx_ConfigSupply+0x9c>)
 8008e76:	f023 0302 	bic.w	r3, r3, #2
 8008e7a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8008e7c:	e002      	b.n	8008e84 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	3b01      	subs	r3, #1
 8008e82:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8008e84:	4b16      	ldr	r3, [pc, #88]	; (8008ee0 <HAL_PWREx_ConfigSupply+0x9c>)
 8008e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e88:	f003 0302 	and.w	r3, r3, #2
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d116      	bne.n	8008ebe <HAL_PWREx_ConfigSupply+0x7a>
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1f3      	bne.n	8008e7e <HAL_PWREx_ConfigSupply+0x3a>
 8008e96:	e012      	b.n	8008ebe <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8008e98:	4b11      	ldr	r3, [pc, #68]	; (8008ee0 <HAL_PWREx_ConfigSupply+0x9c>)
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	4a10      	ldr	r2, [pc, #64]	; (8008ee0 <HAL_PWREx_ConfigSupply+0x9c>)
 8008e9e:	f043 0302 	orr.w	r3, r3, #2
 8008ea2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8008ea4:	e002      	b.n	8008eac <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8008eac:	4b0c      	ldr	r3, [pc, #48]	; (8008ee0 <HAL_PWREx_ConfigSupply+0x9c>)
 8008eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eb0:	f003 0302 	and.w	r3, r3, #2
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d102      	bne.n	8008ebe <HAL_PWREx_ConfigSupply+0x7a>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1f3      	bne.n	8008ea6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d101      	bne.n	8008ec8 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	e000      	b.n	8008eca <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3714      	adds	r7, #20
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	20000020 	.word	0x20000020
 8008edc:	10624dd3 	.word	0x10624dd3
 8008ee0:	46020800 	.word	0x46020800

08008ee4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8008ee8:	4b05      	ldr	r3, [pc, #20]	; (8008f00 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	4a04      	ldr	r2, [pc, #16]	; (8008f00 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008eee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ef2:	6113      	str	r3, [r2, #16]
}
 8008ef4:	bf00      	nop
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	46020800 	.word	0x46020800

08008f04 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8008f04:	b480      	push	{r7}
 8008f06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8008f08:	4b05      	ldr	r3, [pc, #20]	; (8008f20 <HAL_PWREx_EnableVddA+0x1c>)
 8008f0a:	691b      	ldr	r3, [r3, #16]
 8008f0c:	4a04      	ldr	r2, [pc, #16]	; (8008f20 <HAL_PWREx_EnableVddA+0x1c>)
 8008f0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f12:	6113      	str	r3, [r2, #16]
}
 8008f14:	bf00      	nop
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	46020800 	.word	0x46020800

08008f24 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008f24:	b480      	push	{r7}
 8008f26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8008f28:	4b05      	ldr	r3, [pc, #20]	; (8008f40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f2c:	4a04      	ldr	r2, [pc, #16]	; (8008f40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008f2e:	f043 0301 	orr.w	r3, r3, #1
 8008f32:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8008f34:	bf00      	nop
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	46020800 	.word	0x46020800

08008f44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b08e      	sub	sp, #56	; 0x38
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d102      	bne.n	8008f5e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	f000 bec3 	b.w	8009ce4 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f5e:	4b9c      	ldr	r3, [pc, #624]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 8008f60:	69db      	ldr	r3, [r3, #28]
 8008f62:	f003 030c 	and.w	r3, r3, #12
 8008f66:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008f68:	4b99      	ldr	r3, [pc, #612]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 8008f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f6c:	f003 0303 	and.w	r3, r3, #3
 8008f70:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 0310 	and.w	r3, r3, #16
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 8172 	beq.w	8009264 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d007      	beq.n	8008f96 <HAL_RCC_OscConfig+0x52>
 8008f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f88:	2b0c      	cmp	r3, #12
 8008f8a:	f040 80e4 	bne.w	8009156 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	f040 80e0 	bne.w	8009156 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008f96:	4b8e      	ldr	r3, [pc, #568]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 0304 	and.w	r3, r3, #4
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d006      	beq.n	8008fb0 <HAL_RCC_OscConfig+0x6c>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	69db      	ldr	r3, [r3, #28]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d102      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	f000 be9a 	b.w	8009ce4 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fb4:	4b86      	ldr	r3, [pc, #536]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d004      	beq.n	8008fca <HAL_RCC_OscConfig+0x86>
 8008fc0:	4b83      	ldr	r3, [pc, #524]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008fc8:	e005      	b.n	8008fd6 <HAL_RCC_OscConfig+0x92>
 8008fca:	4b81      	ldr	r3, [pc, #516]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 8008fcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008fd0:	041b      	lsls	r3, r3, #16
 8008fd2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d255      	bcs.n	8009086 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d10a      	bne.n	8008ff6 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f001 f9d3 	bl	800a390 <RCC_SetFlashLatencyFromMSIRange>
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d002      	beq.n	8008ff6 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	f000 be77 	b.w	8009ce4 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8008ff6:	4b76      	ldr	r3, [pc, #472]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	4a75      	ldr	r2, [pc, #468]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 8008ffc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009000:	6093      	str	r3, [r2, #8]
 8009002:	4b73      	ldr	r3, [pc, #460]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900e:	4970      	ldr	r1, [pc, #448]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 8009010:	4313      	orrs	r3, r2
 8009012:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009018:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800901c:	d309      	bcc.n	8009032 <HAL_RCC_OscConfig+0xee>
 800901e:	4b6c      	ldr	r3, [pc, #432]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	f023 021f 	bic.w	r2, r3, #31
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a1b      	ldr	r3, [r3, #32]
 800902a:	4969      	ldr	r1, [pc, #420]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 800902c:	4313      	orrs	r3, r2
 800902e:	60cb      	str	r3, [r1, #12]
 8009030:	e07e      	b.n	8009130 <HAL_RCC_OscConfig+0x1ec>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009036:	2b00      	cmp	r3, #0
 8009038:	da0a      	bge.n	8009050 <HAL_RCC_OscConfig+0x10c>
 800903a:	4b65      	ldr	r3, [pc, #404]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a1b      	ldr	r3, [r3, #32]
 8009046:	015b      	lsls	r3, r3, #5
 8009048:	4961      	ldr	r1, [pc, #388]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 800904a:	4313      	orrs	r3, r2
 800904c:	60cb      	str	r3, [r1, #12]
 800904e:	e06f      	b.n	8009130 <HAL_RCC_OscConfig+0x1ec>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009058:	d30a      	bcc.n	8009070 <HAL_RCC_OscConfig+0x12c>
 800905a:	4b5d      	ldr	r3, [pc, #372]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a1b      	ldr	r3, [r3, #32]
 8009066:	029b      	lsls	r3, r3, #10
 8009068:	4959      	ldr	r1, [pc, #356]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 800906a:	4313      	orrs	r3, r2
 800906c:	60cb      	str	r3, [r1, #12]
 800906e:	e05f      	b.n	8009130 <HAL_RCC_OscConfig+0x1ec>
 8009070:	4b57      	ldr	r3, [pc, #348]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6a1b      	ldr	r3, [r3, #32]
 800907c:	03db      	lsls	r3, r3, #15
 800907e:	4954      	ldr	r1, [pc, #336]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 8009080:	4313      	orrs	r3, r2
 8009082:	60cb      	str	r3, [r1, #12]
 8009084:	e054      	b.n	8009130 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009086:	4b52      	ldr	r3, [pc, #328]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	4a51      	ldr	r2, [pc, #324]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 800908c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009090:	6093      	str	r3, [r2, #8]
 8009092:	4b4f      	ldr	r3, [pc, #316]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909e:	494c      	ldr	r1, [pc, #304]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 80090a0:	4313      	orrs	r3, r2
 80090a2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80090ac:	d309      	bcc.n	80090c2 <HAL_RCC_OscConfig+0x17e>
 80090ae:	4b48      	ldr	r3, [pc, #288]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	f023 021f 	bic.w	r2, r3, #31
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	4945      	ldr	r1, [pc, #276]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 80090bc:	4313      	orrs	r3, r2
 80090be:	60cb      	str	r3, [r1, #12]
 80090c0:	e028      	b.n	8009114 <HAL_RCC_OscConfig+0x1d0>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	da0a      	bge.n	80090e0 <HAL_RCC_OscConfig+0x19c>
 80090ca:	4b41      	ldr	r3, [pc, #260]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a1b      	ldr	r3, [r3, #32]
 80090d6:	015b      	lsls	r3, r3, #5
 80090d8:	493d      	ldr	r1, [pc, #244]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 80090da:	4313      	orrs	r3, r2
 80090dc:	60cb      	str	r3, [r1, #12]
 80090de:	e019      	b.n	8009114 <HAL_RCC_OscConfig+0x1d0>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090e8:	d30a      	bcc.n	8009100 <HAL_RCC_OscConfig+0x1bc>
 80090ea:	4b39      	ldr	r3, [pc, #228]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a1b      	ldr	r3, [r3, #32]
 80090f6:	029b      	lsls	r3, r3, #10
 80090f8:	4935      	ldr	r1, [pc, #212]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 80090fa:	4313      	orrs	r3, r2
 80090fc:	60cb      	str	r3, [r1, #12]
 80090fe:	e009      	b.n	8009114 <HAL_RCC_OscConfig+0x1d0>
 8009100:	4b33      	ldr	r3, [pc, #204]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6a1b      	ldr	r3, [r3, #32]
 800910c:	03db      	lsls	r3, r3, #15
 800910e:	4930      	ldr	r1, [pc, #192]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 8009110:	4313      	orrs	r3, r2
 8009112:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10a      	bne.n	8009130 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911e:	4618      	mov	r0, r3
 8009120:	f001 f936 	bl	800a390 <RCC_SetFlashLatencyFromMSIRange>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d002      	beq.n	8009130 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	f000 bdda 	b.w	8009ce4 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8009130:	f001 f8d8 	bl	800a2e4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009134:	4b27      	ldr	r3, [pc, #156]	; (80091d4 <HAL_RCC_OscConfig+0x290>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4618      	mov	r0, r3
 800913a:	f7fc fa29 	bl	8005590 <HAL_InitTick>
 800913e:	4603      	mov	r3, r0
 8009140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8009144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009148:	2b00      	cmp	r3, #0
 800914a:	f000 808a 	beq.w	8009262 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 800914e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009152:	f000 bdc7 	b.w	8009ce4 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	69db      	ldr	r3, [r3, #28]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d066      	beq.n	800922c <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800915e:	4b1c      	ldr	r3, [pc, #112]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a1b      	ldr	r2, [pc, #108]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 8009164:	f043 0301 	orr.w	r3, r3, #1
 8009168:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800916a:	f7fc f989 	bl	8005480 <HAL_GetTick>
 800916e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009170:	e009      	b.n	8009186 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009172:	f7fc f985 	bl	8005480 <HAL_GetTick>
 8009176:	4602      	mov	r2, r0
 8009178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	2b02      	cmp	r3, #2
 800917e:	d902      	bls.n	8009186 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8009180:	2303      	movs	r3, #3
 8009182:	f000 bdaf 	b.w	8009ce4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009186:	4b12      	ldr	r3, [pc, #72]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f003 0304 	and.w	r3, r3, #4
 800918e:	2b00      	cmp	r3, #0
 8009190:	d0ef      	beq.n	8009172 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009192:	4b0f      	ldr	r3, [pc, #60]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	4a0e      	ldr	r2, [pc, #56]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 8009198:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800919c:	6093      	str	r3, [r2, #8]
 800919e:	4b0c      	ldr	r3, [pc, #48]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091aa:	4909      	ldr	r1, [pc, #36]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 80091ac:	4313      	orrs	r3, r2
 80091ae:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80091b8:	d30e      	bcc.n	80091d8 <HAL_RCC_OscConfig+0x294>
 80091ba:	4b05      	ldr	r3, [pc, #20]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	f023 021f 	bic.w	r2, r3, #31
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a1b      	ldr	r3, [r3, #32]
 80091c6:	4902      	ldr	r1, [pc, #8]	; (80091d0 <HAL_RCC_OscConfig+0x28c>)
 80091c8:	4313      	orrs	r3, r2
 80091ca:	60cb      	str	r3, [r1, #12]
 80091cc:	e04a      	b.n	8009264 <HAL_RCC_OscConfig+0x320>
 80091ce:	bf00      	nop
 80091d0:	46020c00 	.word	0x46020c00
 80091d4:	20000028 	.word	0x20000028
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091dc:	2b00      	cmp	r3, #0
 80091de:	da0a      	bge.n	80091f6 <HAL_RCC_OscConfig+0x2b2>
 80091e0:	4b9b      	ldr	r3, [pc, #620]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a1b      	ldr	r3, [r3, #32]
 80091ec:	015b      	lsls	r3, r3, #5
 80091ee:	4998      	ldr	r1, [pc, #608]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 80091f0:	4313      	orrs	r3, r2
 80091f2:	60cb      	str	r3, [r1, #12]
 80091f4:	e036      	b.n	8009264 <HAL_RCC_OscConfig+0x320>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091fe:	d30a      	bcc.n	8009216 <HAL_RCC_OscConfig+0x2d2>
 8009200:	4b93      	ldr	r3, [pc, #588]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a1b      	ldr	r3, [r3, #32]
 800920c:	029b      	lsls	r3, r3, #10
 800920e:	4990      	ldr	r1, [pc, #576]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 8009210:	4313      	orrs	r3, r2
 8009212:	60cb      	str	r3, [r1, #12]
 8009214:	e026      	b.n	8009264 <HAL_RCC_OscConfig+0x320>
 8009216:	4b8e      	ldr	r3, [pc, #568]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 8009218:	68db      	ldr	r3, [r3, #12]
 800921a:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a1b      	ldr	r3, [r3, #32]
 8009222:	03db      	lsls	r3, r3, #15
 8009224:	498a      	ldr	r1, [pc, #552]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 8009226:	4313      	orrs	r3, r2
 8009228:	60cb      	str	r3, [r1, #12]
 800922a:	e01b      	b.n	8009264 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800922c:	4b88      	ldr	r3, [pc, #544]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a87      	ldr	r2, [pc, #540]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 8009232:	f023 0301 	bic.w	r3, r3, #1
 8009236:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009238:	f7fc f922 	bl	8005480 <HAL_GetTick>
 800923c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800923e:	e009      	b.n	8009254 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009240:	f7fc f91e 	bl	8005480 <HAL_GetTick>
 8009244:	4602      	mov	r2, r0
 8009246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009248:	1ad3      	subs	r3, r2, r3
 800924a:	2b02      	cmp	r3, #2
 800924c:	d902      	bls.n	8009254 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 800924e:	2303      	movs	r3, #3
 8009250:	f000 bd48 	b.w	8009ce4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009254:	4b7e      	ldr	r3, [pc, #504]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 0304 	and.w	r3, r3, #4
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1ef      	bne.n	8009240 <HAL_RCC_OscConfig+0x2fc>
 8009260:	e000      	b.n	8009264 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009262:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 0301 	and.w	r3, r3, #1
 800926c:	2b00      	cmp	r3, #0
 800926e:	f000 8094 	beq.w	800939a <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8009272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009274:	2b08      	cmp	r3, #8
 8009276:	d005      	beq.n	8009284 <HAL_RCC_OscConfig+0x340>
 8009278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927a:	2b0c      	cmp	r3, #12
 800927c:	d110      	bne.n	80092a0 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800927e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009280:	2b03      	cmp	r3, #3
 8009282:	d10d      	bne.n	80092a0 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009284:	4b72      	ldr	r3, [pc, #456]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800928c:	2b00      	cmp	r3, #0
 800928e:	f000 8083 	beq.w	8009398 <HAL_RCC_OscConfig+0x454>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d17e      	bne.n	8009398 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	f000 bd22 	b.w	8009ce4 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092a8:	d106      	bne.n	80092b8 <HAL_RCC_OscConfig+0x374>
 80092aa:	4b69      	ldr	r3, [pc, #420]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a68      	ldr	r2, [pc, #416]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 80092b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092b4:	6013      	str	r3, [r2, #0]
 80092b6:	e041      	b.n	800933c <HAL_RCC_OscConfig+0x3f8>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092c0:	d112      	bne.n	80092e8 <HAL_RCC_OscConfig+0x3a4>
 80092c2:	4b63      	ldr	r3, [pc, #396]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a62      	ldr	r2, [pc, #392]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 80092c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092cc:	6013      	str	r3, [r2, #0]
 80092ce:	4b60      	ldr	r3, [pc, #384]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a5f      	ldr	r2, [pc, #380]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 80092d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80092d8:	6013      	str	r3, [r2, #0]
 80092da:	4b5d      	ldr	r3, [pc, #372]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a5c      	ldr	r2, [pc, #368]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 80092e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	e029      	b.n	800933c <HAL_RCC_OscConfig+0x3f8>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80092f0:	d112      	bne.n	8009318 <HAL_RCC_OscConfig+0x3d4>
 80092f2:	4b57      	ldr	r3, [pc, #348]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a56      	ldr	r2, [pc, #344]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 80092f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092fc:	6013      	str	r3, [r2, #0]
 80092fe:	4b54      	ldr	r3, [pc, #336]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a53      	ldr	r2, [pc, #332]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 8009304:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009308:	6013      	str	r3, [r2, #0]
 800930a:	4b51      	ldr	r3, [pc, #324]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a50      	ldr	r2, [pc, #320]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 8009310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009314:	6013      	str	r3, [r2, #0]
 8009316:	e011      	b.n	800933c <HAL_RCC_OscConfig+0x3f8>
 8009318:	4b4d      	ldr	r3, [pc, #308]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a4c      	ldr	r2, [pc, #304]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 800931e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009322:	6013      	str	r3, [r2, #0]
 8009324:	4b4a      	ldr	r3, [pc, #296]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a49      	ldr	r2, [pc, #292]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 800932a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800932e:	6013      	str	r3, [r2, #0]
 8009330:	4b47      	ldr	r3, [pc, #284]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a46      	ldr	r2, [pc, #280]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 8009336:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800933a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d014      	beq.n	800936e <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8009344:	f7fc f89c 	bl	8005480 <HAL_GetTick>
 8009348:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800934a:	e009      	b.n	8009360 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800934c:	f7fc f898 	bl	8005480 <HAL_GetTick>
 8009350:	4602      	mov	r2, r0
 8009352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	2b64      	cmp	r3, #100	; 0x64
 8009358:	d902      	bls.n	8009360 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800935a:	2303      	movs	r3, #3
 800935c:	f000 bcc2 	b.w	8009ce4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009360:	4b3b      	ldr	r3, [pc, #236]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009368:	2b00      	cmp	r3, #0
 800936a:	d0ef      	beq.n	800934c <HAL_RCC_OscConfig+0x408>
 800936c:	e015      	b.n	800939a <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800936e:	f7fc f887 	bl	8005480 <HAL_GetTick>
 8009372:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009374:	e009      	b.n	800938a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009376:	f7fc f883 	bl	8005480 <HAL_GetTick>
 800937a:	4602      	mov	r2, r0
 800937c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	2b64      	cmp	r3, #100	; 0x64
 8009382:	d902      	bls.n	800938a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	f000 bcad 	b.w	8009ce4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800938a:	4b31      	ldr	r3, [pc, #196]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1ef      	bne.n	8009376 <HAL_RCC_OscConfig+0x432>
 8009396:	e000      	b.n	800939a <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f003 0302 	and.w	r3, r3, #2
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d066      	beq.n	8009474 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80093a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a8:	2b04      	cmp	r3, #4
 80093aa:	d005      	beq.n	80093b8 <HAL_RCC_OscConfig+0x474>
 80093ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ae:	2b0c      	cmp	r3, #12
 80093b0:	d11a      	bne.n	80093e8 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80093b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	d117      	bne.n	80093e8 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80093b8:	4b25      	ldr	r3, [pc, #148]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d006      	beq.n	80093d2 <HAL_RCC_OscConfig+0x48e>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d102      	bne.n	80093d2 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 80093cc:	2301      	movs	r3, #1
 80093ce:	f000 bc89 	b.w	8009ce4 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80093d2:	4b1f      	ldr	r3, [pc, #124]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	041b      	lsls	r3, r3, #16
 80093e0:	491b      	ldr	r1, [pc, #108]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 80093e2:	4313      	orrs	r3, r2
 80093e4:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80093e6:	e045      	b.n	8009474 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d024      	beq.n	800943a <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80093f0:	4b17      	ldr	r3, [pc, #92]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a16      	ldr	r2, [pc, #88]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 80093f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80093fc:	f7fc f840 	bl	8005480 <HAL_GetTick>
 8009400:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009402:	e009      	b.n	8009418 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009404:	f7fc f83c 	bl	8005480 <HAL_GetTick>
 8009408:	4602      	mov	r2, r0
 800940a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940c:	1ad3      	subs	r3, r2, r3
 800940e:	2b02      	cmp	r3, #2
 8009410:	d902      	bls.n	8009418 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8009412:	2303      	movs	r3, #3
 8009414:	f000 bc66 	b.w	8009ce4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009418:	4b0d      	ldr	r3, [pc, #52]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009420:	2b00      	cmp	r3, #0
 8009422:	d0ef      	beq.n	8009404 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009424:	4b0a      	ldr	r3, [pc, #40]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	041b      	lsls	r3, r3, #16
 8009432:	4907      	ldr	r1, [pc, #28]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 8009434:	4313      	orrs	r3, r2
 8009436:	610b      	str	r3, [r1, #16]
 8009438:	e01c      	b.n	8009474 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800943a:	4b05      	ldr	r3, [pc, #20]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a04      	ldr	r2, [pc, #16]	; (8009450 <HAL_RCC_OscConfig+0x50c>)
 8009440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009444:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009446:	f7fc f81b 	bl	8005480 <HAL_GetTick>
 800944a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800944c:	e00c      	b.n	8009468 <HAL_RCC_OscConfig+0x524>
 800944e:	bf00      	nop
 8009450:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009454:	f7fc f814 	bl	8005480 <HAL_GetTick>
 8009458:	4602      	mov	r2, r0
 800945a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	2b02      	cmp	r3, #2
 8009460:	d902      	bls.n	8009468 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	f000 bc3e 	b.w	8009ce4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009468:	4baf      	ldr	r3, [pc, #700]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1ef      	bne.n	8009454 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 0308 	and.w	r3, r3, #8
 800947c:	2b00      	cmp	r3, #0
 800947e:	f000 80c7 	beq.w	8009610 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8009482:	2300      	movs	r3, #0
 8009484:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009488:	4ba7      	ldr	r3, [pc, #668]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 800948a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800948e:	f003 0304 	and.w	r3, r3, #4
 8009492:	2b00      	cmp	r3, #0
 8009494:	d111      	bne.n	80094ba <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009496:	4ba4      	ldr	r3, [pc, #656]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 8009498:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800949c:	4aa2      	ldr	r2, [pc, #648]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 800949e:	f043 0304 	orr.w	r3, r3, #4
 80094a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80094a6:	4ba0      	ldr	r3, [pc, #640]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 80094a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094ac:	f003 0304 	and.w	r3, r3, #4
 80094b0:	617b      	str	r3, [r7, #20]
 80094b2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80094b4:	2301      	movs	r3, #1
 80094b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80094ba:	4b9c      	ldr	r3, [pc, #624]	; (800972c <HAL_RCC_OscConfig+0x7e8>)
 80094bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094be:	f003 0301 	and.w	r3, r3, #1
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d118      	bne.n	80094f8 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80094c6:	4b99      	ldr	r3, [pc, #612]	; (800972c <HAL_RCC_OscConfig+0x7e8>)
 80094c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ca:	4a98      	ldr	r2, [pc, #608]	; (800972c <HAL_RCC_OscConfig+0x7e8>)
 80094cc:	f043 0301 	orr.w	r3, r3, #1
 80094d0:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80094d2:	f7fb ffd5 	bl	8005480 <HAL_GetTick>
 80094d6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80094d8:	e008      	b.n	80094ec <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094da:	f7fb ffd1 	bl	8005480 <HAL_GetTick>
 80094de:	4602      	mov	r2, r0
 80094e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d901      	bls.n	80094ec <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 80094e8:	2303      	movs	r3, #3
 80094ea:	e3fb      	b.n	8009ce4 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80094ec:	4b8f      	ldr	r3, [pc, #572]	; (800972c <HAL_RCC_OscConfig+0x7e8>)
 80094ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f0:	f003 0301 	and.w	r3, r3, #1
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d0f0      	beq.n	80094da <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	695b      	ldr	r3, [r3, #20]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d05f      	beq.n	80095c0 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8009500:	4b89      	ldr	r3, [pc, #548]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 8009502:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009506:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	699a      	ldr	r2, [r3, #24]
 800950c:	6a3b      	ldr	r3, [r7, #32]
 800950e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009512:	429a      	cmp	r2, r3
 8009514:	d037      	beq.n	8009586 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009516:	6a3b      	ldr	r3, [r7, #32]
 8009518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800951c:	2b00      	cmp	r3, #0
 800951e:	d006      	beq.n	800952e <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8009520:	6a3b      	ldr	r3, [r7, #32]
 8009522:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	e3da      	b.n	8009ce4 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800952e:	6a3b      	ldr	r3, [r7, #32]
 8009530:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d01b      	beq.n	8009570 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8009538:	4b7b      	ldr	r3, [pc, #492]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 800953a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800953e:	4a7a      	ldr	r2, [pc, #488]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 8009540:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8009544:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8009548:	f7fb ff9a 	bl	8005480 <HAL_GetTick>
 800954c:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800954e:	e008      	b.n	8009562 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009550:	f7fb ff96 	bl	8005480 <HAL_GetTick>
 8009554:	4602      	mov	r2, r0
 8009556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	2b02      	cmp	r3, #2
 800955c:	d901      	bls.n	8009562 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 800955e:	2303      	movs	r3, #3
 8009560:	e3c0      	b.n	8009ce4 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009562:	4b71      	ldr	r3, [pc, #452]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 8009564:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800956c:	2b00      	cmp	r3, #0
 800956e:	d1ef      	bne.n	8009550 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8009570:	4b6d      	ldr	r3, [pc, #436]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 8009572:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009576:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	699b      	ldr	r3, [r3, #24]
 800957e:	496a      	ldr	r1, [pc, #424]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 8009580:	4313      	orrs	r3, r2
 8009582:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8009586:	4b68      	ldr	r3, [pc, #416]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 8009588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800958c:	4a66      	ldr	r2, [pc, #408]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 800958e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009592:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8009596:	f7fb ff73 	bl	8005480 <HAL_GetTick>
 800959a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800959c:	e008      	b.n	80095b0 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800959e:	f7fb ff6f 	bl	8005480 <HAL_GetTick>
 80095a2:	4602      	mov	r2, r0
 80095a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	2b02      	cmp	r3, #2
 80095aa:	d901      	bls.n	80095b0 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 80095ac:	2303      	movs	r3, #3
 80095ae:	e399      	b.n	8009ce4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80095b0:	4b5d      	ldr	r3, [pc, #372]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 80095b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80095b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d0ef      	beq.n	800959e <HAL_RCC_OscConfig+0x65a>
 80095be:	e01b      	b.n	80095f8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80095c0:	4b59      	ldr	r3, [pc, #356]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 80095c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80095c6:	4a58      	ldr	r2, [pc, #352]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 80095c8:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80095cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80095d0:	f7fb ff56 	bl	8005480 <HAL_GetTick>
 80095d4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80095d6:	e008      	b.n	80095ea <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80095d8:	f7fb ff52 	bl	8005480 <HAL_GetTick>
 80095dc:	4602      	mov	r2, r0
 80095de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d901      	bls.n	80095ea <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 80095e6:	2303      	movs	r3, #3
 80095e8:	e37c      	b.n	8009ce4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80095ea:	4b4f      	ldr	r3, [pc, #316]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 80095ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80095f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d1ef      	bne.n	80095d8 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80095f8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d107      	bne.n	8009610 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009600:	4b49      	ldr	r3, [pc, #292]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 8009602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009606:	4a48      	ldr	r2, [pc, #288]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 8009608:	f023 0304 	bic.w	r3, r3, #4
 800960c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f003 0304 	and.w	r3, r3, #4
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 8112 	beq.w	8009842 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 800961e:	2300      	movs	r3, #0
 8009620:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009624:	4b40      	ldr	r3, [pc, #256]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 8009626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800962a:	f003 0304 	and.w	r3, r3, #4
 800962e:	2b00      	cmp	r3, #0
 8009630:	d111      	bne.n	8009656 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009632:	4b3d      	ldr	r3, [pc, #244]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 8009634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009638:	4a3b      	ldr	r2, [pc, #236]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 800963a:	f043 0304 	orr.w	r3, r3, #4
 800963e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009642:	4b39      	ldr	r3, [pc, #228]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 8009644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009648:	f003 0304 	and.w	r3, r3, #4
 800964c:	613b      	str	r3, [r7, #16]
 800964e:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8009650:	2301      	movs	r3, #1
 8009652:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009656:	4b35      	ldr	r3, [pc, #212]	; (800972c <HAL_RCC_OscConfig+0x7e8>)
 8009658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800965a:	f003 0301 	and.w	r3, r3, #1
 800965e:	2b00      	cmp	r3, #0
 8009660:	d118      	bne.n	8009694 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009662:	4b32      	ldr	r3, [pc, #200]	; (800972c <HAL_RCC_OscConfig+0x7e8>)
 8009664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009666:	4a31      	ldr	r2, [pc, #196]	; (800972c <HAL_RCC_OscConfig+0x7e8>)
 8009668:	f043 0301 	orr.w	r3, r3, #1
 800966c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800966e:	f7fb ff07 	bl	8005480 <HAL_GetTick>
 8009672:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009674:	e008      	b.n	8009688 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009676:	f7fb ff03 	bl	8005480 <HAL_GetTick>
 800967a:	4602      	mov	r2, r0
 800967c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967e:	1ad3      	subs	r3, r2, r3
 8009680:	2b02      	cmp	r3, #2
 8009682:	d901      	bls.n	8009688 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8009684:	2303      	movs	r3, #3
 8009686:	e32d      	b.n	8009ce4 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009688:	4b28      	ldr	r3, [pc, #160]	; (800972c <HAL_RCC_OscConfig+0x7e8>)
 800968a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800968c:	f003 0301 	and.w	r3, r3, #1
 8009690:	2b00      	cmp	r3, #0
 8009692:	d0f0      	beq.n	8009676 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	f003 0301 	and.w	r3, r3, #1
 800969c:	2b00      	cmp	r3, #0
 800969e:	d01f      	beq.n	80096e0 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	f003 0304 	and.w	r3, r3, #4
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d010      	beq.n	80096ce <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80096ac:	4b1e      	ldr	r3, [pc, #120]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 80096ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80096b2:	4a1d      	ldr	r2, [pc, #116]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 80096b4:	f043 0304 	orr.w	r3, r3, #4
 80096b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80096bc:	4b1a      	ldr	r3, [pc, #104]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 80096be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80096c2:	4a19      	ldr	r2, [pc, #100]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 80096c4:	f043 0301 	orr.w	r3, r3, #1
 80096c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80096cc:	e018      	b.n	8009700 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80096ce:	4b16      	ldr	r3, [pc, #88]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 80096d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80096d4:	4a14      	ldr	r2, [pc, #80]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 80096d6:	f043 0301 	orr.w	r3, r3, #1
 80096da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80096de:	e00f      	b.n	8009700 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80096e0:	4b11      	ldr	r3, [pc, #68]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 80096e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80096e6:	4a10      	ldr	r2, [pc, #64]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 80096e8:	f023 0301 	bic.w	r3, r3, #1
 80096ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80096f0:	4b0d      	ldr	r3, [pc, #52]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 80096f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80096f6:	4a0c      	ldr	r2, [pc, #48]	; (8009728 <HAL_RCC_OscConfig+0x7e4>)
 80096f8:	f023 0304 	bic.w	r3, r3, #4
 80096fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d058      	beq.n	80097ba <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8009708:	f7fb feba 	bl	8005480 <HAL_GetTick>
 800970c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800970e:	e00f      	b.n	8009730 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009710:	f7fb feb6 	bl	8005480 <HAL_GetTick>
 8009714:	4602      	mov	r2, r0
 8009716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009718:	1ad3      	subs	r3, r2, r3
 800971a:	f241 3288 	movw	r2, #5000	; 0x1388
 800971e:	4293      	cmp	r3, r2
 8009720:	d906      	bls.n	8009730 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8009722:	2303      	movs	r3, #3
 8009724:	e2de      	b.n	8009ce4 <HAL_RCC_OscConfig+0xda0>
 8009726:	bf00      	nop
 8009728:	46020c00 	.word	0x46020c00
 800972c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009730:	4b9c      	ldr	r3, [pc, #624]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 8009732:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009736:	f003 0302 	and.w	r3, r3, #2
 800973a:	2b00      	cmp	r3, #0
 800973c:	d0e8      	beq.n	8009710 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009746:	2b00      	cmp	r3, #0
 8009748:	d01b      	beq.n	8009782 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800974a:	4b96      	ldr	r3, [pc, #600]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 800974c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009750:	4a94      	ldr	r2, [pc, #592]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 8009752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009756:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800975a:	e00a      	b.n	8009772 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800975c:	f7fb fe90 	bl	8005480 <HAL_GetTick>
 8009760:	4602      	mov	r2, r0
 8009762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009764:	1ad3      	subs	r3, r2, r3
 8009766:	f241 3288 	movw	r2, #5000	; 0x1388
 800976a:	4293      	cmp	r3, r2
 800976c:	d901      	bls.n	8009772 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 800976e:	2303      	movs	r3, #3
 8009770:	e2b8      	b.n	8009ce4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8009772:	4b8c      	ldr	r3, [pc, #560]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 8009774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800977c:	2b00      	cmp	r3, #0
 800977e:	d0ed      	beq.n	800975c <HAL_RCC_OscConfig+0x818>
 8009780:	e053      	b.n	800982a <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009782:	4b88      	ldr	r3, [pc, #544]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 8009784:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009788:	4a86      	ldr	r2, [pc, #536]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 800978a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800978e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009792:	e00a      	b.n	80097aa <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009794:	f7fb fe74 	bl	8005480 <HAL_GetTick>
 8009798:	4602      	mov	r2, r0
 800979a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979c:	1ad3      	subs	r3, r2, r3
 800979e:	f241 3288 	movw	r2, #5000	; 0x1388
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d901      	bls.n	80097aa <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 80097a6:	2303      	movs	r3, #3
 80097a8:	e29c      	b.n	8009ce4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80097aa:	4b7e      	ldr	r3, [pc, #504]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 80097ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80097b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d1ed      	bne.n	8009794 <HAL_RCC_OscConfig+0x850>
 80097b8:	e037      	b.n	800982a <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80097ba:	f7fb fe61 	bl	8005480 <HAL_GetTick>
 80097be:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80097c0:	e00a      	b.n	80097d8 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097c2:	f7fb fe5d 	bl	8005480 <HAL_GetTick>
 80097c6:	4602      	mov	r2, r0
 80097c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ca:	1ad3      	subs	r3, r2, r3
 80097cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d901      	bls.n	80097d8 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 80097d4:	2303      	movs	r3, #3
 80097d6:	e285      	b.n	8009ce4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80097d8:	4b72      	ldr	r3, [pc, #456]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 80097da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80097de:	f003 0302 	and.w	r3, r3, #2
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1ed      	bne.n	80097c2 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80097e6:	4b6f      	ldr	r3, [pc, #444]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 80097e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80097ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d01a      	beq.n	800982a <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80097f4:	4b6b      	ldr	r3, [pc, #428]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 80097f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80097fa:	4a6a      	ldr	r2, [pc, #424]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 80097fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009800:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009804:	e00a      	b.n	800981c <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009806:	f7fb fe3b 	bl	8005480 <HAL_GetTick>
 800980a:	4602      	mov	r2, r0
 800980c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980e:	1ad3      	subs	r3, r2, r3
 8009810:	f241 3288 	movw	r2, #5000	; 0x1388
 8009814:	4293      	cmp	r3, r2
 8009816:	d901      	bls.n	800981c <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8009818:	2303      	movs	r3, #3
 800981a:	e263      	b.n	8009ce4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800981c:	4b61      	ldr	r3, [pc, #388]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 800981e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1ed      	bne.n	8009806 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800982a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800982e:	2b01      	cmp	r3, #1
 8009830:	d107      	bne.n	8009842 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009832:	4b5c      	ldr	r3, [pc, #368]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 8009834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009838:	4a5a      	ldr	r2, [pc, #360]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 800983a:	f023 0304 	bic.w	r3, r3, #4
 800983e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f003 0320 	and.w	r3, r3, #32
 800984a:	2b00      	cmp	r3, #0
 800984c:	d036      	beq.n	80098bc <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009852:	2b00      	cmp	r3, #0
 8009854:	d019      	beq.n	800988a <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8009856:	4b53      	ldr	r3, [pc, #332]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a52      	ldr	r2, [pc, #328]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 800985c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009860:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009862:	f7fb fe0d 	bl	8005480 <HAL_GetTick>
 8009866:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009868:	e008      	b.n	800987c <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800986a:	f7fb fe09 	bl	8005480 <HAL_GetTick>
 800986e:	4602      	mov	r2, r0
 8009870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009872:	1ad3      	subs	r3, r2, r3
 8009874:	2b02      	cmp	r3, #2
 8009876:	d901      	bls.n	800987c <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8009878:	2303      	movs	r3, #3
 800987a:	e233      	b.n	8009ce4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800987c:	4b49      	ldr	r3, [pc, #292]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009884:	2b00      	cmp	r3, #0
 8009886:	d0f0      	beq.n	800986a <HAL_RCC_OscConfig+0x926>
 8009888:	e018      	b.n	80098bc <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800988a:	4b46      	ldr	r3, [pc, #280]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a45      	ldr	r2, [pc, #276]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 8009890:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009894:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009896:	f7fb fdf3 	bl	8005480 <HAL_GetTick>
 800989a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800989c:	e008      	b.n	80098b0 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800989e:	f7fb fdef 	bl	8005480 <HAL_GetTick>
 80098a2:	4602      	mov	r2, r0
 80098a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a6:	1ad3      	subs	r3, r2, r3
 80098a8:	2b02      	cmp	r3, #2
 80098aa:	d901      	bls.n	80098b0 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 80098ac:	2303      	movs	r3, #3
 80098ae:	e219      	b.n	8009ce4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80098b0:	4b3c      	ldr	r3, [pc, #240]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1f0      	bne.n	800989e <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d036      	beq.n	8009936 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d019      	beq.n	8009904 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80098d0:	4b34      	ldr	r3, [pc, #208]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a33      	ldr	r2, [pc, #204]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 80098d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80098da:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80098dc:	f7fb fdd0 	bl	8005480 <HAL_GetTick>
 80098e0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80098e2:	e008      	b.n	80098f6 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80098e4:	f7fb fdcc 	bl	8005480 <HAL_GetTick>
 80098e8:	4602      	mov	r2, r0
 80098ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ec:	1ad3      	subs	r3, r2, r3
 80098ee:	2b02      	cmp	r3, #2
 80098f0:	d901      	bls.n	80098f6 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 80098f2:	2303      	movs	r3, #3
 80098f4:	e1f6      	b.n	8009ce4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80098f6:	4b2b      	ldr	r3, [pc, #172]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d0f0      	beq.n	80098e4 <HAL_RCC_OscConfig+0x9a0>
 8009902:	e018      	b.n	8009936 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8009904:	4b27      	ldr	r3, [pc, #156]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a26      	ldr	r2, [pc, #152]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 800990a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800990e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009910:	f7fb fdb6 	bl	8005480 <HAL_GetTick>
 8009914:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8009916:	e008      	b.n	800992a <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8009918:	f7fb fdb2 	bl	8005480 <HAL_GetTick>
 800991c:	4602      	mov	r2, r0
 800991e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	2b02      	cmp	r3, #2
 8009924:	d901      	bls.n	800992a <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e1dc      	b.n	8009ce4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800992a:	4b1e      	ldr	r3, [pc, #120]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1f0      	bne.n	8009918 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800993e:	2b00      	cmp	r3, #0
 8009940:	d07f      	beq.n	8009a42 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009946:	2b00      	cmp	r3, #0
 8009948:	d062      	beq.n	8009a10 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800994a:	4b16      	ldr	r3, [pc, #88]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	4a15      	ldr	r2, [pc, #84]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 8009950:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009954:	6093      	str	r3, [r2, #8]
 8009956:	4b13      	ldr	r3, [pc, #76]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009962:	4910      	ldr	r1, [pc, #64]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 8009964:	4313      	orrs	r3, r2
 8009966:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8009970:	d309      	bcc.n	8009986 <HAL_RCC_OscConfig+0xa42>
 8009972:	4b0c      	ldr	r3, [pc, #48]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	f023 021f 	bic.w	r2, r3, #31
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a1b      	ldr	r3, [r3, #32]
 800997e:	4909      	ldr	r1, [pc, #36]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 8009980:	4313      	orrs	r3, r2
 8009982:	60cb      	str	r3, [r1, #12]
 8009984:	e02a      	b.n	80099dc <HAL_RCC_OscConfig+0xa98>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998a:	2b00      	cmp	r3, #0
 800998c:	da0c      	bge.n	80099a8 <HAL_RCC_OscConfig+0xa64>
 800998e:	4b05      	ldr	r3, [pc, #20]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a1b      	ldr	r3, [r3, #32]
 800999a:	015b      	lsls	r3, r3, #5
 800999c:	4901      	ldr	r1, [pc, #4]	; (80099a4 <HAL_RCC_OscConfig+0xa60>)
 800999e:	4313      	orrs	r3, r2
 80099a0:	60cb      	str	r3, [r1, #12]
 80099a2:	e01b      	b.n	80099dc <HAL_RCC_OscConfig+0xa98>
 80099a4:	46020c00 	.word	0x46020c00
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099b0:	d30a      	bcc.n	80099c8 <HAL_RCC_OscConfig+0xa84>
 80099b2:	4ba5      	ldr	r3, [pc, #660]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6a1b      	ldr	r3, [r3, #32]
 80099be:	029b      	lsls	r3, r3, #10
 80099c0:	49a1      	ldr	r1, [pc, #644]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 80099c2:	4313      	orrs	r3, r2
 80099c4:	60cb      	str	r3, [r1, #12]
 80099c6:	e009      	b.n	80099dc <HAL_RCC_OscConfig+0xa98>
 80099c8:	4b9f      	ldr	r3, [pc, #636]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a1b      	ldr	r3, [r3, #32]
 80099d4:	03db      	lsls	r3, r3, #15
 80099d6:	499c      	ldr	r1, [pc, #624]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 80099d8:	4313      	orrs	r3, r2
 80099da:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80099dc:	4b9a      	ldr	r3, [pc, #616]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a99      	ldr	r2, [pc, #612]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 80099e2:	f043 0310 	orr.w	r3, r3, #16
 80099e6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80099e8:	f7fb fd4a 	bl	8005480 <HAL_GetTick>
 80099ec:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80099ee:	e008      	b.n	8009a02 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80099f0:	f7fb fd46 	bl	8005480 <HAL_GetTick>
 80099f4:	4602      	mov	r2, r0
 80099f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d901      	bls.n	8009a02 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 80099fe:	2303      	movs	r3, #3
 8009a00:	e170      	b.n	8009ce4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8009a02:	4b91      	ldr	r3, [pc, #580]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 0320 	and.w	r3, r3, #32
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d0f0      	beq.n	80099f0 <HAL_RCC_OscConfig+0xaac>
 8009a0e:	e018      	b.n	8009a42 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8009a10:	4b8d      	ldr	r3, [pc, #564]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a8c      	ldr	r2, [pc, #560]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009a16:	f023 0310 	bic.w	r3, r3, #16
 8009a1a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009a1c:	f7fb fd30 	bl	8005480 <HAL_GetTick>
 8009a20:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8009a22:	e008      	b.n	8009a36 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8009a24:	f7fb fd2c 	bl	8005480 <HAL_GetTick>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2c:	1ad3      	subs	r3, r2, r3
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d901      	bls.n	8009a36 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8009a32:	2303      	movs	r3, #3
 8009a34:	e156      	b.n	8009ce4 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8009a36:	4b84      	ldr	r3, [pc, #528]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f003 0320 	and.w	r3, r3, #32
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1f0      	bne.n	8009a24 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f000 814b 	beq.w	8009ce2 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009a52:	4b7d      	ldr	r3, [pc, #500]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009a54:	69db      	ldr	r3, [r3, #28]
 8009a56:	f003 030c 	and.w	r3, r3, #12
 8009a5a:	2b0c      	cmp	r3, #12
 8009a5c:	f000 80fa 	beq.w	8009c54 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	f040 80cc 	bne.w	8009c02 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8009a6a:	4b77      	ldr	r3, [pc, #476]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a76      	ldr	r2, [pc, #472]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009a70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a74:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009a76:	f7fb fd03 	bl	8005480 <HAL_GetTick>
 8009a7a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009a7c:	e008      	b.n	8009a90 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a7e:	f7fb fcff 	bl	8005480 <HAL_GetTick>
 8009a82:	4602      	mov	r2, r0
 8009a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d901      	bls.n	8009a90 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	e129      	b.n	8009ce4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009a90:	4b6d      	ldr	r3, [pc, #436]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1f0      	bne.n	8009a7e <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a9c:	4b6a      	ldr	r3, [pc, #424]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009aa2:	f003 0304 	and.w	r3, r3, #4
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d111      	bne.n	8009ace <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8009aaa:	4b67      	ldr	r3, [pc, #412]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ab0:	4a65      	ldr	r2, [pc, #404]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009ab2:	f043 0304 	orr.w	r3, r3, #4
 8009ab6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009aba:	4b63      	ldr	r3, [pc, #396]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ac0:	f003 0304 	and.w	r3, r3, #4
 8009ac4:	60fb      	str	r3, [r7, #12]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8009ace:	4b5f      	ldr	r3, [pc, #380]	; (8009c4c <HAL_RCC_OscConfig+0xd08>)
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ad6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ada:	d102      	bne.n	8009ae2 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8009adc:	2301      	movs	r3, #1
 8009ade:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009ae2:	4b5a      	ldr	r3, [pc, #360]	; (8009c4c <HAL_RCC_OscConfig+0xd08>)
 8009ae4:	68db      	ldr	r3, [r3, #12]
 8009ae6:	4a59      	ldr	r2, [pc, #356]	; (8009c4c <HAL_RCC_OscConfig+0xd08>)
 8009ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009aec:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8009aee:	4b56      	ldr	r3, [pc, #344]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009af6:	f023 0303 	bic.w	r3, r3, #3
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009b02:	3a01      	subs	r2, #1
 8009b04:	0212      	lsls	r2, r2, #8
 8009b06:	4311      	orrs	r1, r2
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009b0c:	430a      	orrs	r2, r1
 8009b0e:	494e      	ldr	r1, [pc, #312]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009b10:	4313      	orrs	r3, r2
 8009b12:	628b      	str	r3, [r1, #40]	; 0x28
 8009b14:	4b4c      	ldr	r3, [pc, #304]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b18:	4b4d      	ldr	r3, [pc, #308]	; (8009c50 <HAL_RCC_OscConfig+0xd0c>)
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009b20:	3a01      	subs	r2, #1
 8009b22:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009b2a:	3a01      	subs	r2, #1
 8009b2c:	0252      	lsls	r2, r2, #9
 8009b2e:	b292      	uxth	r2, r2
 8009b30:	4311      	orrs	r1, r2
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009b36:	3a01      	subs	r2, #1
 8009b38:	0412      	lsls	r2, r2, #16
 8009b3a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8009b3e:	4311      	orrs	r1, r2
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009b44:	3a01      	subs	r2, #1
 8009b46:	0612      	lsls	r2, r2, #24
 8009b48:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009b4c:	430a      	orrs	r2, r1
 8009b4e:	493e      	ldr	r1, [pc, #248]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009b50:	4313      	orrs	r3, r2
 8009b52:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009b54:	4b3c      	ldr	r3, [pc, #240]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b58:	4a3b      	ldr	r2, [pc, #236]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009b5a:	f023 0310 	bic.w	r3, r3, #16
 8009b5e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8009b60:	4b39      	ldr	r3, [pc, #228]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b68:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009b70:	00d2      	lsls	r2, r2, #3
 8009b72:	4935      	ldr	r1, [pc, #212]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009b74:	4313      	orrs	r3, r2
 8009b76:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009b78:	4b33      	ldr	r3, [pc, #204]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b7c:	4a32      	ldr	r2, [pc, #200]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009b7e:	f043 0310 	orr.w	r3, r3, #16
 8009b82:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8009b84:	4b30      	ldr	r3, [pc, #192]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b88:	f023 020c 	bic.w	r2, r3, #12
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b90:	492d      	ldr	r1, [pc, #180]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009b92:	4313      	orrs	r3, r2
 8009b94:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8009b96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d105      	bne.n	8009baa <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009b9e:	4b2b      	ldr	r3, [pc, #172]	; (8009c4c <HAL_RCC_OscConfig+0xd08>)
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	4a2a      	ldr	r2, [pc, #168]	; (8009c4c <HAL_RCC_OscConfig+0xd08>)
 8009ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ba8:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8009baa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d107      	bne.n	8009bc2 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8009bb2:	4b25      	ldr	r3, [pc, #148]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009bb8:	4a23      	ldr	r2, [pc, #140]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009bba:	f023 0304 	bic.w	r3, r3, #4
 8009bbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009bc2:	4b21      	ldr	r3, [pc, #132]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc6:	4a20      	ldr	r2, [pc, #128]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009bcc:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8009bce:	4b1e      	ldr	r3, [pc, #120]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a1d      	ldr	r2, [pc, #116]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009bd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009bd8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009bda:	f7fb fc51 	bl	8005480 <HAL_GetTick>
 8009bde:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009be0:	e008      	b.n	8009bf4 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009be2:	f7fb fc4d 	bl	8005480 <HAL_GetTick>
 8009be6:	4602      	mov	r2, r0
 8009be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bea:	1ad3      	subs	r3, r2, r3
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d901      	bls.n	8009bf4 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8009bf0:	2303      	movs	r3, #3
 8009bf2:	e077      	b.n	8009ce4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009bf4:	4b14      	ldr	r3, [pc, #80]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d0f0      	beq.n	8009be2 <HAL_RCC_OscConfig+0xc9e>
 8009c00:	e06f      	b.n	8009ce2 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8009c02:	4b11      	ldr	r3, [pc, #68]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a10      	ldr	r2, [pc, #64]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009c08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c0c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009c0e:	f7fb fc37 	bl	8005480 <HAL_GetTick>
 8009c12:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009c14:	e008      	b.n	8009c28 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c16:	f7fb fc33 	bl	8005480 <HAL_GetTick>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1e:	1ad3      	subs	r3, r2, r3
 8009c20:	2b02      	cmp	r3, #2
 8009c22:	d901      	bls.n	8009c28 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8009c24:	2303      	movs	r3, #3
 8009c26:	e05d      	b.n	8009ce4 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009c28:	4b07      	ldr	r3, [pc, #28]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1f0      	bne.n	8009c16 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8009c34:	4b04      	ldr	r3, [pc, #16]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c38:	4a03      	ldr	r2, [pc, #12]	; (8009c48 <HAL_RCC_OscConfig+0xd04>)
 8009c3a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8009c3e:	f023 0303 	bic.w	r3, r3, #3
 8009c42:	6293      	str	r3, [r2, #40]	; 0x28
 8009c44:	e04d      	b.n	8009ce2 <HAL_RCC_OscConfig+0xd9e>
 8009c46:	bf00      	nop
 8009c48:	46020c00 	.word	0x46020c00
 8009c4c:	46020800 	.word	0x46020800
 8009c50:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8009c54:	4b25      	ldr	r3, [pc, #148]	; (8009cec <HAL_RCC_OscConfig+0xda8>)
 8009c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c58:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009c5a:	4b24      	ldr	r3, [pc, #144]	; (8009cec <HAL_RCC_OscConfig+0xda8>)
 8009c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c5e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d03a      	beq.n	8009cde <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	f003 0203 	and.w	r2, r3, #3
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d133      	bne.n	8009cde <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	0a1b      	lsrs	r3, r3, #8
 8009c7a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c82:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d12a      	bne.n	8009cde <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	0b1b      	lsrs	r3, r3, #12
 8009c8c:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d122      	bne.n	8009cde <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ca2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d11a      	bne.n	8009cde <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	0a5b      	lsrs	r3, r3, #9
 8009cac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cb4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d111      	bne.n	8009cde <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	0c1b      	lsrs	r3, r3, #16
 8009cbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cc6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d108      	bne.n	8009cde <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	0e1b      	lsrs	r3, r3, #24
 8009cd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cd8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d001      	beq.n	8009ce2 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e000      	b.n	8009ce4 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3738      	adds	r7, #56	; 0x38
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	46020c00 	.word	0x46020c00

08009cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d101      	bne.n	8009d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	e1d9      	b.n	800a0b8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009d04:	4b9b      	ldr	r3, [pc, #620]	; (8009f74 <HAL_RCC_ClockConfig+0x284>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f003 030f 	and.w	r3, r3, #15
 8009d0c:	683a      	ldr	r2, [r7, #0]
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d910      	bls.n	8009d34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d12:	4b98      	ldr	r3, [pc, #608]	; (8009f74 <HAL_RCC_ClockConfig+0x284>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f023 020f 	bic.w	r2, r3, #15
 8009d1a:	4996      	ldr	r1, [pc, #600]	; (8009f74 <HAL_RCC_ClockConfig+0x284>)
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d22:	4b94      	ldr	r3, [pc, #592]	; (8009f74 <HAL_RCC_ClockConfig+0x284>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 030f 	and.w	r3, r3, #15
 8009d2a:	683a      	ldr	r2, [r7, #0]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d001      	beq.n	8009d34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	e1c1      	b.n	800a0b8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f003 0310 	and.w	r3, r3, #16
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d010      	beq.n	8009d62 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	695a      	ldr	r2, [r3, #20]
 8009d44:	4b8c      	ldr	r3, [pc, #560]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d908      	bls.n	8009d62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8009d50:	4b89      	ldr	r3, [pc, #548]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	695b      	ldr	r3, [r3, #20]
 8009d5c:	4986      	ldr	r1, [pc, #536]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f003 0308 	and.w	r3, r3, #8
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d012      	beq.n	8009d94 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	691a      	ldr	r2, [r3, #16]
 8009d72:	4b81      	ldr	r3, [pc, #516]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009d74:	6a1b      	ldr	r3, [r3, #32]
 8009d76:	091b      	lsrs	r3, r3, #4
 8009d78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d909      	bls.n	8009d94 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8009d80:	4b7d      	ldr	r3, [pc, #500]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009d82:	6a1b      	ldr	r3, [r3, #32]
 8009d84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	691b      	ldr	r3, [r3, #16]
 8009d8c:	011b      	lsls	r3, r3, #4
 8009d8e:	497a      	ldr	r1, [pc, #488]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009d90:	4313      	orrs	r3, r2
 8009d92:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f003 0304 	and.w	r3, r3, #4
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d010      	beq.n	8009dc2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	68da      	ldr	r2, [r3, #12]
 8009da4:	4b74      	ldr	r3, [pc, #464]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009da6:	6a1b      	ldr	r3, [r3, #32]
 8009da8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d908      	bls.n	8009dc2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8009db0:	4b71      	ldr	r3, [pc, #452]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009db2:	6a1b      	ldr	r3, [r3, #32]
 8009db4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	496e      	ldr	r1, [pc, #440]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f003 0302 	and.w	r3, r3, #2
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d010      	beq.n	8009df0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	689a      	ldr	r2, [r3, #8]
 8009dd2:	4b69      	ldr	r3, [pc, #420]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009dd4:	6a1b      	ldr	r3, [r3, #32]
 8009dd6:	f003 030f 	and.w	r3, r3, #15
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d908      	bls.n	8009df0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8009dde:	4b66      	ldr	r3, [pc, #408]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009de0:	6a1b      	ldr	r3, [r3, #32]
 8009de2:	f023 020f 	bic.w	r2, r3, #15
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	4963      	ldr	r1, [pc, #396]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009dec:	4313      	orrs	r3, r2
 8009dee:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f003 0301 	and.w	r3, r3, #1
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 80d2 	beq.w	8009fa2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	2b03      	cmp	r3, #3
 8009e08:	d143      	bne.n	8009e92 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e0a:	4b5b      	ldr	r3, [pc, #364]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e10:	f003 0304 	and.w	r3, r3, #4
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d110      	bne.n	8009e3a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8009e18:	4b57      	ldr	r3, [pc, #348]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e1e:	4a56      	ldr	r2, [pc, #344]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009e20:	f043 0304 	orr.w	r3, r3, #4
 8009e24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009e28:	4b53      	ldr	r3, [pc, #332]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e2e:	f003 0304 	and.w	r3, r3, #4
 8009e32:	60bb      	str	r3, [r7, #8]
 8009e34:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8009e36:	2301      	movs	r3, #1
 8009e38:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8009e3a:	f7fb fb21 	bl	8005480 <HAL_GetTick>
 8009e3e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8009e40:	4b4e      	ldr	r3, [pc, #312]	; (8009f7c <HAL_RCC_ClockConfig+0x28c>)
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00f      	beq.n	8009e6c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8009e4c:	e008      	b.n	8009e60 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8009e4e:	f7fb fb17 	bl	8005480 <HAL_GetTick>
 8009e52:	4602      	mov	r2, r0
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	2b02      	cmp	r3, #2
 8009e5a:	d901      	bls.n	8009e60 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8009e5c:	2303      	movs	r3, #3
 8009e5e:	e12b      	b.n	800a0b8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8009e60:	4b46      	ldr	r3, [pc, #280]	; (8009f7c <HAL_RCC_ClockConfig+0x28c>)
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d0f0      	beq.n	8009e4e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8009e6c:	7dfb      	ldrb	r3, [r7, #23]
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d107      	bne.n	8009e82 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8009e72:	4b41      	ldr	r3, [pc, #260]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e78:	4a3f      	ldr	r2, [pc, #252]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009e7a:	f023 0304 	bic.w	r3, r3, #4
 8009e7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009e82:	4b3d      	ldr	r3, [pc, #244]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d121      	bne.n	8009ed2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e112      	b.n	800a0b8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	d107      	bne.n	8009eaa <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009e9a:	4b37      	ldr	r3, [pc, #220]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d115      	bne.n	8009ed2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	e106      	b.n	800a0b8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d107      	bne.n	8009ec2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009eb2:	4b31      	ldr	r3, [pc, #196]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f003 0304 	and.w	r3, r3, #4
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d109      	bne.n	8009ed2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e0fa      	b.n	800a0b8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009ec2:	4b2d      	ldr	r3, [pc, #180]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d101      	bne.n	8009ed2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e0f2      	b.n	800a0b8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8009ed2:	4b29      	ldr	r3, [pc, #164]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009ed4:	69db      	ldr	r3, [r3, #28]
 8009ed6:	f023 0203 	bic.w	r2, r3, #3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	4926      	ldr	r1, [pc, #152]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8009ee4:	f7fb facc 	bl	8005480 <HAL_GetTick>
 8009ee8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	2b03      	cmp	r3, #3
 8009ef0:	d112      	bne.n	8009f18 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009ef2:	e00a      	b.n	8009f0a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ef4:	f7fb fac4 	bl	8005480 <HAL_GetTick>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	1ad3      	subs	r3, r2, r3
 8009efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d901      	bls.n	8009f0a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8009f06:	2303      	movs	r3, #3
 8009f08:	e0d6      	b.n	800a0b8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009f0a:	4b1b      	ldr	r3, [pc, #108]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009f0c:	69db      	ldr	r3, [r3, #28]
 8009f0e:	f003 030c 	and.w	r3, r3, #12
 8009f12:	2b0c      	cmp	r3, #12
 8009f14:	d1ee      	bne.n	8009ef4 <HAL_RCC_ClockConfig+0x204>
 8009f16:	e044      	b.n	8009fa2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d112      	bne.n	8009f46 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009f20:	e00a      	b.n	8009f38 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f22:	f7fb faad 	bl	8005480 <HAL_GetTick>
 8009f26:	4602      	mov	r2, r0
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	1ad3      	subs	r3, r2, r3
 8009f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d901      	bls.n	8009f38 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009f34:	2303      	movs	r3, #3
 8009f36:	e0bf      	b.n	800a0b8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009f38:	4b0f      	ldr	r3, [pc, #60]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009f3a:	69db      	ldr	r3, [r3, #28]
 8009f3c:	f003 030c 	and.w	r3, r3, #12
 8009f40:	2b08      	cmp	r3, #8
 8009f42:	d1ee      	bne.n	8009f22 <HAL_RCC_ClockConfig+0x232>
 8009f44:	e02d      	b.n	8009fa2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d123      	bne.n	8009f96 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009f4e:	e00a      	b.n	8009f66 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f50:	f7fb fa96 	bl	8005480 <HAL_GetTick>
 8009f54:	4602      	mov	r2, r0
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	1ad3      	subs	r3, r2, r3
 8009f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d901      	bls.n	8009f66 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8009f62:	2303      	movs	r3, #3
 8009f64:	e0a8      	b.n	800a0b8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009f66:	4b04      	ldr	r3, [pc, #16]	; (8009f78 <HAL_RCC_ClockConfig+0x288>)
 8009f68:	69db      	ldr	r3, [r3, #28]
 8009f6a:	f003 030c 	and.w	r3, r3, #12
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1ee      	bne.n	8009f50 <HAL_RCC_ClockConfig+0x260>
 8009f72:	e016      	b.n	8009fa2 <HAL_RCC_ClockConfig+0x2b2>
 8009f74:	40022000 	.word	0x40022000
 8009f78:	46020c00 	.word	0x46020c00
 8009f7c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f80:	f7fb fa7e 	bl	8005480 <HAL_GetTick>
 8009f84:	4602      	mov	r2, r0
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	1ad3      	subs	r3, r2, r3
 8009f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d901      	bls.n	8009f96 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8009f92:	2303      	movs	r3, #3
 8009f94:	e090      	b.n	800a0b8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009f96:	4b4a      	ldr	r3, [pc, #296]	; (800a0c0 <HAL_RCC_ClockConfig+0x3d0>)
 8009f98:	69db      	ldr	r3, [r3, #28]
 8009f9a:	f003 030c 	and.w	r3, r3, #12
 8009f9e:	2b04      	cmp	r3, #4
 8009fa0:	d1ee      	bne.n	8009f80 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f003 0302 	and.w	r3, r3, #2
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d010      	beq.n	8009fd0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	689a      	ldr	r2, [r3, #8]
 8009fb2:	4b43      	ldr	r3, [pc, #268]	; (800a0c0 <HAL_RCC_ClockConfig+0x3d0>)
 8009fb4:	6a1b      	ldr	r3, [r3, #32]
 8009fb6:	f003 030f 	and.w	r3, r3, #15
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d208      	bcs.n	8009fd0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8009fbe:	4b40      	ldr	r3, [pc, #256]	; (800a0c0 <HAL_RCC_ClockConfig+0x3d0>)
 8009fc0:	6a1b      	ldr	r3, [r3, #32]
 8009fc2:	f023 020f 	bic.w	r2, r3, #15
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	493d      	ldr	r1, [pc, #244]	; (800a0c0 <HAL_RCC_ClockConfig+0x3d0>)
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009fd0:	4b3c      	ldr	r3, [pc, #240]	; (800a0c4 <HAL_RCC_ClockConfig+0x3d4>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 030f 	and.w	r3, r3, #15
 8009fd8:	683a      	ldr	r2, [r7, #0]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d210      	bcs.n	800a000 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fde:	4b39      	ldr	r3, [pc, #228]	; (800a0c4 <HAL_RCC_ClockConfig+0x3d4>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f023 020f 	bic.w	r2, r3, #15
 8009fe6:	4937      	ldr	r1, [pc, #220]	; (800a0c4 <HAL_RCC_ClockConfig+0x3d4>)
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fee:	4b35      	ldr	r3, [pc, #212]	; (800a0c4 <HAL_RCC_ClockConfig+0x3d4>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 030f 	and.w	r3, r3, #15
 8009ff6:	683a      	ldr	r2, [r7, #0]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d001      	beq.n	800a000 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e05b      	b.n	800a0b8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f003 0304 	and.w	r3, r3, #4
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d010      	beq.n	800a02e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	68da      	ldr	r2, [r3, #12]
 800a010:	4b2b      	ldr	r3, [pc, #172]	; (800a0c0 <HAL_RCC_ClockConfig+0x3d0>)
 800a012:	6a1b      	ldr	r3, [r3, #32]
 800a014:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a018:	429a      	cmp	r2, r3
 800a01a:	d208      	bcs.n	800a02e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a01c:	4b28      	ldr	r3, [pc, #160]	; (800a0c0 <HAL_RCC_ClockConfig+0x3d0>)
 800a01e:	6a1b      	ldr	r3, [r3, #32]
 800a020:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	4925      	ldr	r1, [pc, #148]	; (800a0c0 <HAL_RCC_ClockConfig+0x3d0>)
 800a02a:	4313      	orrs	r3, r2
 800a02c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f003 0308 	and.w	r3, r3, #8
 800a036:	2b00      	cmp	r3, #0
 800a038:	d012      	beq.n	800a060 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	691a      	ldr	r2, [r3, #16]
 800a03e:	4b20      	ldr	r3, [pc, #128]	; (800a0c0 <HAL_RCC_ClockConfig+0x3d0>)
 800a040:	6a1b      	ldr	r3, [r3, #32]
 800a042:	091b      	lsrs	r3, r3, #4
 800a044:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a048:	429a      	cmp	r2, r3
 800a04a:	d209      	bcs.n	800a060 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a04c:	4b1c      	ldr	r3, [pc, #112]	; (800a0c0 <HAL_RCC_ClockConfig+0x3d0>)
 800a04e:	6a1b      	ldr	r3, [r3, #32]
 800a050:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	011b      	lsls	r3, r3, #4
 800a05a:	4919      	ldr	r1, [pc, #100]	; (800a0c0 <HAL_RCC_ClockConfig+0x3d0>)
 800a05c:	4313      	orrs	r3, r2
 800a05e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f003 0310 	and.w	r3, r3, #16
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d010      	beq.n	800a08e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	695a      	ldr	r2, [r3, #20]
 800a070:	4b13      	ldr	r3, [pc, #76]	; (800a0c0 <HAL_RCC_ClockConfig+0x3d0>)
 800a072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a074:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a078:	429a      	cmp	r2, r3
 800a07a:	d208      	bcs.n	800a08e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800a07c:	4b10      	ldr	r3, [pc, #64]	; (800a0c0 <HAL_RCC_ClockConfig+0x3d0>)
 800a07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a080:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	695b      	ldr	r3, [r3, #20]
 800a088:	490d      	ldr	r1, [pc, #52]	; (800a0c0 <HAL_RCC_ClockConfig+0x3d0>)
 800a08a:	4313      	orrs	r3, r2
 800a08c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800a08e:	f000 f821 	bl	800a0d4 <HAL_RCC_GetSysClockFreq>
 800a092:	4602      	mov	r2, r0
 800a094:	4b0a      	ldr	r3, [pc, #40]	; (800a0c0 <HAL_RCC_ClockConfig+0x3d0>)
 800a096:	6a1b      	ldr	r3, [r3, #32]
 800a098:	f003 030f 	and.w	r3, r3, #15
 800a09c:	490a      	ldr	r1, [pc, #40]	; (800a0c8 <HAL_RCC_ClockConfig+0x3d8>)
 800a09e:	5ccb      	ldrb	r3, [r1, r3]
 800a0a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a0a4:	4a09      	ldr	r2, [pc, #36]	; (800a0cc <HAL_RCC_ClockConfig+0x3dc>)
 800a0a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a0a8:	4b09      	ldr	r3, [pc, #36]	; (800a0d0 <HAL_RCC_ClockConfig+0x3e0>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7fb fa6f 	bl	8005590 <HAL_InitTick>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	73fb      	strb	r3, [r7, #15]

  return status;
 800a0b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3718      	adds	r7, #24
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	46020c00 	.word	0x46020c00
 800a0c4:	40022000 	.word	0x40022000
 800a0c8:	08011d1c 	.word	0x08011d1c
 800a0cc:	20000020 	.word	0x20000020
 800a0d0:	20000028 	.word	0x20000028

0800a0d4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b08b      	sub	sp, #44	; 0x2c
 800a0d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0e2:	4b7b      	ldr	r3, [pc, #492]	; (800a2d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a0e4:	69db      	ldr	r3, [r3, #28]
 800a0e6:	f003 030c 	and.w	r3, r3, #12
 800a0ea:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a0ec:	4b78      	ldr	r3, [pc, #480]	; (800a2d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f0:	f003 0303 	and.w	r3, r3, #3
 800a0f4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d005      	beq.n	800a108 <HAL_RCC_GetSysClockFreq+0x34>
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	2b0c      	cmp	r3, #12
 800a100:	d121      	bne.n	800a146 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	2b01      	cmp	r3, #1
 800a106:	d11e      	bne.n	800a146 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800a108:	4b71      	ldr	r3, [pc, #452]	; (800a2d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a110:	2b00      	cmp	r3, #0
 800a112:	d107      	bne.n	800a124 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800a114:	4b6e      	ldr	r3, [pc, #440]	; (800a2d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a116:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a11a:	0b1b      	lsrs	r3, r3, #12
 800a11c:	f003 030f 	and.w	r3, r3, #15
 800a120:	627b      	str	r3, [r7, #36]	; 0x24
 800a122:	e005      	b.n	800a130 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800a124:	4b6a      	ldr	r3, [pc, #424]	; (800a2d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	0f1b      	lsrs	r3, r3, #28
 800a12a:	f003 030f 	and.w	r3, r3, #15
 800a12e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a130:	4a68      	ldr	r2, [pc, #416]	; (800a2d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a138:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d110      	bne.n	800a162 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a142:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a144:	e00d      	b.n	800a162 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a146:	4b62      	ldr	r3, [pc, #392]	; (800a2d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a148:	69db      	ldr	r3, [r3, #28]
 800a14a:	f003 030c 	and.w	r3, r3, #12
 800a14e:	2b04      	cmp	r3, #4
 800a150:	d102      	bne.n	800a158 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a152:	4b61      	ldr	r3, [pc, #388]	; (800a2d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800a154:	623b      	str	r3, [r7, #32]
 800a156:	e004      	b.n	800a162 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	2b08      	cmp	r3, #8
 800a15c:	d101      	bne.n	800a162 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a15e:	4b5e      	ldr	r3, [pc, #376]	; (800a2d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800a160:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	2b0c      	cmp	r3, #12
 800a166:	f040 80ac 	bne.w	800a2c2 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a16a:	4b59      	ldr	r3, [pc, #356]	; (800a2d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a16e:	f003 0303 	and.w	r3, r3, #3
 800a172:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800a174:	4b56      	ldr	r3, [pc, #344]	; (800a2d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a178:	0a1b      	lsrs	r3, r3, #8
 800a17a:	f003 030f 	and.w	r3, r3, #15
 800a17e:	3301      	adds	r3, #1
 800a180:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800a182:	4b53      	ldr	r3, [pc, #332]	; (800a2d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a186:	091b      	lsrs	r3, r3, #4
 800a188:	f003 0301 	and.w	r3, r3, #1
 800a18c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a18e:	4b50      	ldr	r3, [pc, #320]	; (800a2d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a192:	08db      	lsrs	r3, r3, #3
 800a194:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a198:	68ba      	ldr	r2, [r7, #8]
 800a19a:	fb02 f303 	mul.w	r3, r2, r3
 800a19e:	ee07 3a90 	vmov	s15, r3
 800a1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1a6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f000 8086 	beq.w	800a2be <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	2b02      	cmp	r3, #2
 800a1b6:	d003      	beq.n	800a1c0 <HAL_RCC_GetSysClockFreq+0xec>
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	2b03      	cmp	r3, #3
 800a1bc:	d022      	beq.n	800a204 <HAL_RCC_GetSysClockFreq+0x130>
 800a1be:	e043      	b.n	800a248 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	ee07 3a90 	vmov	s15, r3
 800a1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ca:	eddf 6a44 	vldr	s13, [pc, #272]	; 800a2dc <HAL_RCC_GetSysClockFreq+0x208>
 800a1ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1d2:	4b3f      	ldr	r3, [pc, #252]	; (800a2d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a1d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1da:	ee07 3a90 	vmov	s15, r3
 800a1de:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a1e2:	ed97 6a01 	vldr	s12, [r7, #4]
 800a1e6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a2e0 <HAL_RCC_GetSysClockFreq+0x20c>
 800a1ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a1ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a1f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a1fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1fe:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800a202:	e046      	b.n	800a292 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	ee07 3a90 	vmov	s15, r3
 800a20a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a20e:	eddf 6a33 	vldr	s13, [pc, #204]	; 800a2dc <HAL_RCC_GetSysClockFreq+0x208>
 800a212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a216:	4b2e      	ldr	r3, [pc, #184]	; (800a2d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a21a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a21e:	ee07 3a90 	vmov	s15, r3
 800a222:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a226:	ed97 6a01 	vldr	s12, [r7, #4]
 800a22a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800a2e0 <HAL_RCC_GetSysClockFreq+0x20c>
 800a22e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a232:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a23a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a23e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a242:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800a246:	e024      	b.n	800a292 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24a:	ee07 3a90 	vmov	s15, r3
 800a24e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	ee07 3a90 	vmov	s15, r3
 800a258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a25c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a260:	4b1b      	ldr	r3, [pc, #108]	; (800a2d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a268:	ee07 3a90 	vmov	s15, r3
 800a26c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a270:	ed97 6a01 	vldr	s12, [r7, #4]
 800a274:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800a2e0 <HAL_RCC_GetSysClockFreq+0x20c>
 800a278:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a27c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a280:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a284:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a28c:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800a290:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800a292:	4b0f      	ldr	r3, [pc, #60]	; (800a2d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a296:	0e1b      	lsrs	r3, r3, #24
 800a298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a29c:	3301      	adds	r3, #1
 800a29e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	ee07 3a90 	vmov	s15, r3
 800a2a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a2aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2b6:	ee17 3a90 	vmov	r3, s15
 800a2ba:	623b      	str	r3, [r7, #32]
 800a2bc:	e001      	b.n	800a2c2 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800a2c2:	6a3b      	ldr	r3, [r7, #32]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	372c      	adds	r7, #44	; 0x2c
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr
 800a2d0:	46020c00 	.word	0x46020c00
 800a2d4:	08011d34 	.word	0x08011d34
 800a2d8:	00f42400 	.word	0x00f42400
 800a2dc:	4b742400 	.word	0x4b742400
 800a2e0:	46000000 	.word	0x46000000

0800a2e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800a2e8:	f7ff fef4 	bl	800a0d4 <HAL_RCC_GetSysClockFreq>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	4b07      	ldr	r3, [pc, #28]	; (800a30c <HAL_RCC_GetHCLKFreq+0x28>)
 800a2f0:	6a1b      	ldr	r3, [r3, #32]
 800a2f2:	f003 030f 	and.w	r3, r3, #15
 800a2f6:	4906      	ldr	r1, [pc, #24]	; (800a310 <HAL_RCC_GetHCLKFreq+0x2c>)
 800a2f8:	5ccb      	ldrb	r3, [r1, r3]
 800a2fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a2fe:	4a05      	ldr	r2, [pc, #20]	; (800a314 <HAL_RCC_GetHCLKFreq+0x30>)
 800a300:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800a302:	4b04      	ldr	r3, [pc, #16]	; (800a314 <HAL_RCC_GetHCLKFreq+0x30>)
 800a304:	681b      	ldr	r3, [r3, #0]
}
 800a306:	4618      	mov	r0, r3
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	46020c00 	.word	0x46020c00
 800a310:	08011d1c 	.word	0x08011d1c
 800a314:	20000020 	.word	0x20000020

0800a318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800a31c:	f7ff ffe2 	bl	800a2e4 <HAL_RCC_GetHCLKFreq>
 800a320:	4602      	mov	r2, r0
 800a322:	4b05      	ldr	r3, [pc, #20]	; (800a338 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a324:	6a1b      	ldr	r3, [r3, #32]
 800a326:	091b      	lsrs	r3, r3, #4
 800a328:	f003 0307 	and.w	r3, r3, #7
 800a32c:	4903      	ldr	r1, [pc, #12]	; (800a33c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a32e:	5ccb      	ldrb	r3, [r1, r3]
 800a330:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a334:	4618      	mov	r0, r3
 800a336:	bd80      	pop	{r7, pc}
 800a338:	46020c00 	.word	0x46020c00
 800a33c:	08011d2c 	.word	0x08011d2c

0800a340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800a344:	f7ff ffce 	bl	800a2e4 <HAL_RCC_GetHCLKFreq>
 800a348:	4602      	mov	r2, r0
 800a34a:	4b05      	ldr	r3, [pc, #20]	; (800a360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	0a1b      	lsrs	r3, r3, #8
 800a350:	f003 0307 	and.w	r3, r3, #7
 800a354:	4903      	ldr	r1, [pc, #12]	; (800a364 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a356:	5ccb      	ldrb	r3, [r1, r3]
 800a358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	46020c00 	.word	0x46020c00
 800a364:	08011d2c 	.word	0x08011d2c

0800a368 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800a36c:	f7ff ffba 	bl	800a2e4 <HAL_RCC_GetHCLKFreq>
 800a370:	4602      	mov	r2, r0
 800a372:	4b05      	ldr	r3, [pc, #20]	; (800a388 <HAL_RCC_GetPCLK3Freq+0x20>)
 800a374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a376:	091b      	lsrs	r3, r3, #4
 800a378:	f003 0307 	and.w	r3, r3, #7
 800a37c:	4903      	ldr	r1, [pc, #12]	; (800a38c <HAL_RCC_GetPCLK3Freq+0x24>)
 800a37e:	5ccb      	ldrb	r3, [r1, r3]
 800a380:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a384:	4618      	mov	r0, r3
 800a386:	bd80      	pop	{r7, pc}
 800a388:	46020c00 	.word	0x46020c00
 800a38c:	08011d2c 	.word	0x08011d2c

0800a390 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a398:	4b3e      	ldr	r3, [pc, #248]	; (800a494 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a39a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a39e:	f003 0304 	and.w	r3, r3, #4
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d003      	beq.n	800a3ae <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a3a6:	f7fe fd3f 	bl	8008e28 <HAL_PWREx_GetVoltageRange>
 800a3aa:	6178      	str	r0, [r7, #20]
 800a3ac:	e019      	b.n	800a3e2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a3ae:	4b39      	ldr	r3, [pc, #228]	; (800a494 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a3b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3b4:	4a37      	ldr	r2, [pc, #220]	; (800a494 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a3b6:	f043 0304 	orr.w	r3, r3, #4
 800a3ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a3be:	4b35      	ldr	r3, [pc, #212]	; (800a494 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a3c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3c4:	f003 0304 	and.w	r3, r3, #4
 800a3c8:	60fb      	str	r3, [r7, #12]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a3cc:	f7fe fd2c 	bl	8008e28 <HAL_PWREx_GetVoltageRange>
 800a3d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a3d2:	4b30      	ldr	r3, [pc, #192]	; (800a494 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a3d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3d8:	4a2e      	ldr	r2, [pc, #184]	; (800a494 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a3da:	f023 0304 	bic.w	r3, r3, #4
 800a3de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a3e8:	d003      	beq.n	800a3f2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3f0:	d109      	bne.n	800a406 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3f8:	d202      	bcs.n	800a400 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800a3fe:	e033      	b.n	800a468 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800a400:	2300      	movs	r3, #0
 800a402:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800a404:	e030      	b.n	800a468 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a40c:	d208      	bcs.n	800a420 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a414:	d102      	bne.n	800a41c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800a416:	2303      	movs	r3, #3
 800a418:	613b      	str	r3, [r7, #16]
 800a41a:	e025      	b.n	800a468 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e035      	b.n	800a48c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a426:	d90f      	bls.n	800a448 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d109      	bne.n	800a442 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a434:	d902      	bls.n	800a43c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800a436:	2300      	movs	r3, #0
 800a438:	613b      	str	r3, [r7, #16]
 800a43a:	e015      	b.n	800a468 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800a43c:	2301      	movs	r3, #1
 800a43e:	613b      	str	r3, [r7, #16]
 800a440:	e012      	b.n	800a468 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800a442:	2300      	movs	r3, #0
 800a444:	613b      	str	r3, [r7, #16]
 800a446:	e00f      	b.n	800a468 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a44e:	d109      	bne.n	800a464 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a456:	d102      	bne.n	800a45e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800a458:	2301      	movs	r3, #1
 800a45a:	613b      	str	r3, [r7, #16]
 800a45c:	e004      	b.n	800a468 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800a45e:	2302      	movs	r3, #2
 800a460:	613b      	str	r3, [r7, #16]
 800a462:	e001      	b.n	800a468 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800a464:	2301      	movs	r3, #1
 800a466:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a468:	4b0b      	ldr	r3, [pc, #44]	; (800a498 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f023 020f 	bic.w	r2, r3, #15
 800a470:	4909      	ldr	r1, [pc, #36]	; (800a498 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	4313      	orrs	r3, r2
 800a476:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800a478:	4b07      	ldr	r3, [pc, #28]	; (800a498 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f003 030f 	and.w	r3, r3, #15
 800a480:	693a      	ldr	r2, [r7, #16]
 800a482:	429a      	cmp	r2, r3
 800a484:	d001      	beq.n	800a48a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	e000      	b.n	800a48c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800a48a:	2300      	movs	r3, #0
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3718      	adds	r7, #24
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	46020c00 	.word	0x46020c00
 800a498:	40022000 	.word	0x40022000

0800a49c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800a49c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4a0:	b0ba      	sub	sp, #232	; 0xe8
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a4b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4bc:	f002 0401 	and.w	r4, r2, #1
 800a4c0:	2500      	movs	r5, #0
 800a4c2:	ea54 0305 	orrs.w	r3, r4, r5
 800a4c6:	d00b      	beq.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800a4c8:	4bcb      	ldr	r3, [pc, #812]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4ce:	f023 0103 	bic.w	r1, r3, #3
 800a4d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a4d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4d8:	4ac7      	ldr	r2, [pc, #796]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4da:	430b      	orrs	r3, r1
 800a4dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a4e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e8:	f002 0802 	and.w	r8, r2, #2
 800a4ec:	f04f 0900 	mov.w	r9, #0
 800a4f0:	ea58 0309 	orrs.w	r3, r8, r9
 800a4f4:	d00b      	beq.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800a4f6:	4bc0      	ldr	r3, [pc, #768]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4fc:	f023 010c 	bic.w	r1, r3, #12
 800a500:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a506:	4abc      	ldr	r2, [pc, #752]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a508:	430b      	orrs	r3, r1
 800a50a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a50e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a516:	f002 0a04 	and.w	sl, r2, #4
 800a51a:	f04f 0b00 	mov.w	fp, #0
 800a51e:	ea5a 030b 	orrs.w	r3, sl, fp
 800a522:	d00b      	beq.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800a524:	4bb4      	ldr	r3, [pc, #720]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a52a:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a52e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a534:	4ab0      	ldr	r2, [pc, #704]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a536:	430b      	orrs	r3, r1
 800a538:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a53c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a544:	f002 0308 	and.w	r3, r2, #8
 800a548:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a54c:	2300      	movs	r3, #0
 800a54e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a552:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a556:	460b      	mov	r3, r1
 800a558:	4313      	orrs	r3, r2
 800a55a:	d00b      	beq.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800a55c:	4ba6      	ldr	r3, [pc, #664]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a55e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a562:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a56a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a56c:	4aa2      	ldr	r2, [pc, #648]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a56e:	430b      	orrs	r3, r1
 800a570:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a574:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57c:	f002 0310 	and.w	r3, r2, #16
 800a580:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a584:	2300      	movs	r3, #0
 800a586:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a58a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a58e:	460b      	mov	r3, r1
 800a590:	4313      	orrs	r3, r2
 800a592:	d00b      	beq.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800a594:	4b98      	ldr	r3, [pc, #608]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a59a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a59e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a5a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5a4:	4a94      	ldr	r2, [pc, #592]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5a6:	430b      	orrs	r3, r1
 800a5a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a5ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b4:	f002 0320 	and.w	r3, r2, #32
 800a5b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a5bc:	2300      	movs	r3, #0
 800a5be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a5c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	d00b      	beq.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800a5cc:	4b8a      	ldr	r3, [pc, #552]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a5d2:	f023 0107 	bic.w	r1, r3, #7
 800a5d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a5da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5dc:	4a86      	ldr	r2, [pc, #536]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5de:	430b      	orrs	r3, r1
 800a5e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a5e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ec:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a5f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a5fa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a5fe:	460b      	mov	r3, r1
 800a600:	4313      	orrs	r3, r2
 800a602:	d00b      	beq.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800a604:	4b7c      	ldr	r3, [pc, #496]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a60a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800a60e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a614:	4a78      	ldr	r2, [pc, #480]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a616:	430b      	orrs	r3, r1
 800a618:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a61c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a624:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a628:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a62c:	2300      	movs	r3, #0
 800a62e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a632:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a636:	460b      	mov	r3, r1
 800a638:	4313      	orrs	r3, r2
 800a63a:	d00b      	beq.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800a63c:	4b6e      	ldr	r3, [pc, #440]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a63e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a642:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a646:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a64a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a64c:	4a6a      	ldr	r2, [pc, #424]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a64e:	430b      	orrs	r3, r1
 800a650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a654:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65c:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800a660:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a664:	2300      	movs	r3, #0
 800a666:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a66a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a66e:	460b      	mov	r3, r1
 800a670:	4313      	orrs	r3, r2
 800a672:	d00b      	beq.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800a674:	4b60      	ldr	r3, [pc, #384]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a676:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a67a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a67e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a684:	4a5c      	ldr	r2, [pc, #368]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a686:	430b      	orrs	r3, r1
 800a688:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a68c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a694:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a69c:	2300      	movs	r3, #0
 800a69e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a6a2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	d00b      	beq.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800a6ac:	4b52      	ldr	r3, [pc, #328]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6b2:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800a6b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a6ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6bc:	4a4e      	ldr	r2, [pc, #312]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6be:	430b      	orrs	r3, r1
 800a6c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a6c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6cc:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800a6d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a6da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a6de:	460b      	mov	r3, r1
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	d00b      	beq.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800a6e4:	4b44      	ldr	r3, [pc, #272]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a6ea:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800a6ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a6f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a6f4:	4a40      	ldr	r2, [pc, #256]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6f6:	430b      	orrs	r3, r1
 800a6f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a6fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a704:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800a708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a70c:	2300      	movs	r3, #0
 800a70e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a712:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a716:	460b      	mov	r3, r1
 800a718:	4313      	orrs	r3, r2
 800a71a:	d00b      	beq.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800a71c:	4b36      	ldr	r3, [pc, #216]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a71e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a722:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800a726:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a72a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a72c:	4a32      	ldr	r2, [pc, #200]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a72e:	430b      	orrs	r3, r1
 800a730:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800a734:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a740:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a744:	2300      	movs	r3, #0
 800a746:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a74a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a74e:	460b      	mov	r3, r1
 800a750:	4313      	orrs	r3, r2
 800a752:	d00c      	beq.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800a754:	4b28      	ldr	r3, [pc, #160]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a756:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a75a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a75e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a766:	4a24      	ldr	r2, [pc, #144]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a768:	430b      	orrs	r3, r1
 800a76a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a76e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a776:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a77a:	67bb      	str	r3, [r7, #120]	; 0x78
 800a77c:	2300      	movs	r3, #0
 800a77e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a780:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a784:	460b      	mov	r3, r1
 800a786:	4313      	orrs	r3, r2
 800a788:	d04f      	beq.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800a78a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a78e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a792:	2b80      	cmp	r3, #128	; 0x80
 800a794:	d02d      	beq.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800a796:	2b80      	cmp	r3, #128	; 0x80
 800a798:	d827      	bhi.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a79a:	2b60      	cmp	r3, #96	; 0x60
 800a79c:	d02e      	beq.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a79e:	2b60      	cmp	r3, #96	; 0x60
 800a7a0:	d823      	bhi.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a7a2:	2b40      	cmp	r3, #64	; 0x40
 800a7a4:	d006      	beq.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800a7a6:	2b40      	cmp	r3, #64	; 0x40
 800a7a8:	d81f      	bhi.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d009      	beq.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800a7ae:	2b20      	cmp	r3, #32
 800a7b0:	d011      	beq.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800a7b2:	e01a      	b.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a7b4:	4b10      	ldr	r3, [pc, #64]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a7b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b8:	4a0f      	ldr	r2, [pc, #60]	; (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a7ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7be:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a7c0:	e01d      	b.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a7c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7c6:	3308      	adds	r3, #8
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f002 f981 	bl	800cad0 <RCCEx_PLL2_Config>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a7d4:	e013      	b.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a7d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7da:	332c      	adds	r3, #44	; 0x2c
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f002 fa0f 	bl	800cc00 <RCCEx_PLL3_Config>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a7e8:	e009      	b.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a7f0:	e005      	b.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800a7f2:	bf00      	nop
 800a7f4:	e003      	b.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x362>
 800a7f6:	bf00      	nop
 800a7f8:	46020c00 	.word	0x46020c00
        break;
 800a7fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a802:	2b00      	cmp	r3, #0
 800a804:	d10d      	bne.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800a806:	4bb6      	ldr	r3, [pc, #728]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a808:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a80c:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800a810:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a818:	4ab1      	ldr	r2, [pc, #708]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a81a:	430b      	orrs	r3, r1
 800a81c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800a820:	e003      	b.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a822:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a826:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a82a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a832:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a836:	673b      	str	r3, [r7, #112]	; 0x70
 800a838:	2300      	movs	r3, #0
 800a83a:	677b      	str	r3, [r7, #116]	; 0x74
 800a83c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a840:	460b      	mov	r3, r1
 800a842:	4313      	orrs	r3, r2
 800a844:	d053      	beq.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800a846:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a84a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a84e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a852:	d033      	beq.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a858:	d82c      	bhi.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800a85a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a85e:	d02f      	beq.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800a860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a864:	d826      	bhi.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800a866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a86a:	d008      	beq.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800a86c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a870:	d820      	bhi.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00a      	beq.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800a876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a87a:	d011      	beq.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800a87c:	e01a      	b.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a87e:	4b98      	ldr	r3, [pc, #608]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a882:	4a97      	ldr	r2, [pc, #604]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a888:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800a88a:	e01a      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a88c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a890:	3308      	adds	r3, #8
 800a892:	4618      	mov	r0, r3
 800a894:	f002 f91c 	bl	800cad0 <RCCEx_PLL2_Config>
 800a898:	4603      	mov	r3, r0
 800a89a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800a89e:	e010      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a8a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8a4:	332c      	adds	r3, #44	; 0x2c
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f002 f9aa 	bl	800cc00 <RCCEx_PLL3_Config>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800a8b2:	e006      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a8ba:	e002      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800a8bc:	bf00      	nop
 800a8be:	e000      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800a8c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d10d      	bne.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800a8ca:	4b85      	ldr	r3, [pc, #532]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a8cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a8d0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800a8d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8dc:	4a80      	ldr	r2, [pc, #512]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a8de:	430b      	orrs	r3, r1
 800a8e0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800a8e4:	e003      	b.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a8ea:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800a8ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f6:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a8fa:	66bb      	str	r3, [r7, #104]	; 0x68
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a900:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a904:	460b      	mov	r3, r1
 800a906:	4313      	orrs	r3, r2
 800a908:	d046      	beq.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800a90a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a90e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a912:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a916:	d028      	beq.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800a918:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a91c:	d821      	bhi.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800a91e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a922:	d022      	beq.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800a924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a928:	d81b      	bhi.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800a92a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a92e:	d01c      	beq.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800a930:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a934:	d815      	bhi.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800a936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a93a:	d008      	beq.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800a93c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a940:	d80f      	bhi.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800a942:	2b00      	cmp	r3, #0
 800a944:	d011      	beq.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800a946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a94a:	d00e      	beq.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800a94c:	e009      	b.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a94e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a952:	3308      	adds	r3, #8
 800a954:	4618      	mov	r0, r3
 800a956:	f002 f8bb 	bl	800cad0 <RCCEx_PLL2_Config>
 800a95a:	4603      	mov	r3, r0
 800a95c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a960:	e004      	b.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a962:	2301      	movs	r3, #1
 800a964:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a968:	e000      	b.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800a96a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a96c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10d      	bne.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800a974:	4b5a      	ldr	r3, [pc, #360]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a976:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a97a:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a97e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a982:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a986:	4a56      	ldr	r2, [pc, #344]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a988:	430b      	orrs	r3, r1
 800a98a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a98e:	e003      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a990:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a994:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800a998:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a0:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a9a4:	663b      	str	r3, [r7, #96]	; 0x60
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	667b      	str	r3, [r7, #100]	; 0x64
 800a9aa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	d03f      	beq.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800a9b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a9b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9bc:	2b04      	cmp	r3, #4
 800a9be:	d81e      	bhi.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x562>
 800a9c0:	a201      	add	r2, pc, #4	; (adr r2, 800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800a9c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c6:	bf00      	nop
 800a9c8:	0800aa07 	.word	0x0800aa07
 800a9cc:	0800a9dd 	.word	0x0800a9dd
 800a9d0:	0800a9eb 	.word	0x0800a9eb
 800a9d4:	0800aa07 	.word	0x0800aa07
 800a9d8:	0800aa07 	.word	0x0800aa07
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a9dc:	4b40      	ldr	r3, [pc, #256]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a9de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9e0:	4a3f      	ldr	r2, [pc, #252]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a9e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9e6:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800a9e8:	e00e      	b.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a9ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a9ee:	332c      	adds	r3, #44	; 0x2c
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f002 f905 	bl	800cc00 <RCCEx_PLL3_Config>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a9fc:	e004      	b.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800aa04:	e000      	b.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800aa06:	bf00      	nop
    }
    if (ret == HAL_OK)
 800aa08:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d10d      	bne.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800aa10:	4b33      	ldr	r3, [pc, #204]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800aa12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800aa16:	f023 0107 	bic.w	r1, r3, #7
 800aa1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa22:	4a2f      	ldr	r2, [pc, #188]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800aa24:	430b      	orrs	r3, r1
 800aa26:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800aa2a:	e003      	b.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa2c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800aa30:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800aa34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3c:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800aa40:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa42:	2300      	movs	r3, #0
 800aa44:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa46:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	d04d      	beq.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800aa50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aa5c:	d028      	beq.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800aa5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aa62:	d821      	bhi.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800aa64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aa68:	d024      	beq.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800aa6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aa6e:	d81b      	bhi.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800aa70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa74:	d00e      	beq.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800aa76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa7a:	d815      	bhi.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d01b      	beq.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800aa80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa84:	d110      	bne.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aa86:	4b16      	ldr	r3, [pc, #88]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800aa88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa8a:	4a15      	ldr	r2, [pc, #84]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800aa8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa90:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800aa92:	e012      	b.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800aa94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa98:	332c      	adds	r3, #44	; 0x2c
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f002 f8b0 	bl	800cc00 <RCCEx_PLL3_Config>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800aaa6:	e008      	b.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800aaae:	e004      	b.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800aab0:	bf00      	nop
 800aab2:	e002      	b.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800aab4:	bf00      	nop
 800aab6:	e000      	b.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800aab8:	bf00      	nop
    }
    if (ret == HAL_OK)
 800aaba:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d110      	bne.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800aac2:	4b07      	ldr	r3, [pc, #28]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800aac4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aac8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800aacc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aad4:	4a02      	ldr	r2, [pc, #8]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800aad6:	430b      	orrs	r3, r1
 800aad8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800aadc:	e006      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x650>
 800aade:	bf00      	nop
 800aae0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aae4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800aae8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aaec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf4:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800aaf8:	653b      	str	r3, [r7, #80]	; 0x50
 800aafa:	2300      	movs	r3, #0
 800aafc:	657b      	str	r3, [r7, #84]	; 0x54
 800aafe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ab02:	460b      	mov	r3, r1
 800ab04:	4313      	orrs	r3, r2
 800ab06:	f000 80b5 	beq.w	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ab10:	4b9d      	ldr	r3, [pc, #628]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ab12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab16:	f003 0304 	and.w	r3, r3, #4
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d113      	bne.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab1e:	4b9a      	ldr	r3, [pc, #616]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ab20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab24:	4a98      	ldr	r2, [pc, #608]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ab26:	f043 0304 	orr.w	r3, r3, #4
 800ab2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800ab2e:	4b96      	ldr	r3, [pc, #600]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ab30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab34:	f003 0304 	and.w	r3, r3, #4
 800ab38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ab3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 800ab40:	2301      	movs	r3, #1
 800ab42:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800ab46:	4b91      	ldr	r3, [pc, #580]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800ab48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab4a:	4a90      	ldr	r2, [pc, #576]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800ab4c:	f043 0301 	orr.w	r3, r3, #1
 800ab50:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ab52:	f7fa fc95 	bl	8005480 <HAL_GetTick>
 800ab56:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800ab5a:	e00b      	b.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab5c:	f7fa fc90 	bl	8005480 <HAL_GetTick>
 800ab60:	4602      	mov	r2, r0
 800ab62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	d903      	bls.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800ab72:	e005      	b.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800ab74:	4b85      	ldr	r3, [pc, #532]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800ab76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab78:	f003 0301 	and.w	r3, r3, #1
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d0ed      	beq.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800ab80:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d165      	bne.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ab88:	4b7f      	ldr	r3, [pc, #508]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ab8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ab8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800ab96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d023      	beq.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800ab9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aba2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800aba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abaa:	4293      	cmp	r3, r2
 800abac:	d01b      	beq.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800abae:	4b76      	ldr	r3, [pc, #472]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800abb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800abb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800abbc:	4b72      	ldr	r3, [pc, #456]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800abbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800abc2:	4a71      	ldr	r2, [pc, #452]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800abc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abc8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800abcc:	4b6e      	ldr	r3, [pc, #440]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800abce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800abd2:	4a6d      	ldr	r2, [pc, #436]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800abd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abd8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800abdc:	4a6a      	ldr	r2, [pc, #424]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800abde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abe2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800abe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abea:	f003 0301 	and.w	r3, r3, #1
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d019      	beq.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abf2:	f7fa fc45 	bl	8005480 <HAL_GetTick>
 800abf6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800abfa:	e00d      	b.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abfc:	f7fa fc40 	bl	8005480 <HAL_GetTick>
 800ac00:	4602      	mov	r2, r0
 800ac02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac06:	1ad2      	subs	r2, r2, r3
 800ac08:	f241 3388 	movw	r3, #5000	; 0x1388
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d903      	bls.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800ac10:	2303      	movs	r3, #3
 800ac12:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800ac16:	e006      	b.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ac18:	4b5b      	ldr	r3, [pc, #364]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ac1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ac1e:	f003 0302 	and.w	r3, r3, #2
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d0ea      	beq.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800ac26:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10d      	bne.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800ac2e:	4b56      	ldr	r3, [pc, #344]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ac30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ac34:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ac38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ac3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ac40:	4a51      	ldr	r2, [pc, #324]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ac42:	430b      	orrs	r3, r1
 800ac44:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800ac48:	e008      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ac4a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ac4e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800ac52:	e003      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac54:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ac58:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ac5c:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d107      	bne.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac64:	4b48      	ldr	r3, [pc, #288]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ac66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac6a:	4a47      	ldr	r2, [pc, #284]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ac6c:	f023 0304 	bic.w	r3, r3, #4
 800ac70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800ac74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ac78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ac80:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac82:	2300      	movs	r3, #0
 800ac84:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac86:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	d042      	beq.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800ac90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ac94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ac98:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ac9c:	d022      	beq.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800ac9e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800aca2:	d81b      	bhi.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x840>
 800aca4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aca8:	d011      	beq.n	800acce <HAL_RCCEx_PeriphCLKConfig+0x832>
 800acaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acae:	d815      	bhi.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x840>
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d019      	beq.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800acb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800acb8:	d110      	bne.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800acba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800acbe:	3308      	adds	r3, #8
 800acc0:	4618      	mov	r0, r3
 800acc2:	f001 ff05 	bl	800cad0 <RCCEx_PLL2_Config>
 800acc6:	4603      	mov	r3, r0
 800acc8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800accc:	e00d      	b.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acce:	4b2e      	ldr	r3, [pc, #184]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800acd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd2:	4a2d      	ldr	r2, [pc, #180]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800acd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acd8:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800acda:	e006      	b.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800acdc:	2301      	movs	r3, #1
 800acde:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800ace2:	e002      	b.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800ace4:	bf00      	nop
 800ace6:	e000      	b.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800ace8:	bf00      	nop
    }
    if (ret == HAL_OK)
 800acea:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d10d      	bne.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800acf2:	4b25      	ldr	r3, [pc, #148]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800acf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800acf8:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800acfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ad00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ad04:	4a20      	ldr	r2, [pc, #128]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ad06:	430b      	orrs	r3, r1
 800ad08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ad0c:	e003      	b.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad0e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ad12:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ad16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ad1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800ad22:	643b      	str	r3, [r7, #64]	; 0x40
 800ad24:	2300      	movs	r3, #0
 800ad26:	647b      	str	r3, [r7, #68]	; 0x44
 800ad28:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	d032      	beq.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800ad32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ad36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad3e:	d00b      	beq.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800ad40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad44:	d804      	bhi.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d008      	beq.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800ad4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad4e:	d007      	beq.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800ad50:	2301      	movs	r3, #1
 800ad52:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800ad56:	e004      	b.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800ad58:	bf00      	nop
 800ad5a:	e002      	b.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800ad5c:	bf00      	nop
 800ad5e:	e000      	b.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800ad60:	bf00      	nop
    }
    if (ret == HAL_OK)
 800ad62:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d112      	bne.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800ad6a:	4b07      	ldr	r3, [pc, #28]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ad6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ad70:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ad74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ad78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad7c:	4a02      	ldr	r2, [pc, #8]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ad7e:	430b      	orrs	r3, r1
 800ad80:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800ad84:	e008      	b.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800ad86:	bf00      	nop
 800ad88:	46020c00 	.word	0x46020c00
 800ad8c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad90:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ad94:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800ad98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ad9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada0:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ada4:	63bb      	str	r3, [r7, #56]	; 0x38
 800ada6:	2300      	movs	r3, #0
 800ada8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adaa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800adae:	460b      	mov	r3, r1
 800adb0:	4313      	orrs	r3, r2
 800adb2:	d00c      	beq.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800adb4:	4b98      	ldr	r3, [pc, #608]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800adb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800adba:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800adbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800adc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800adc6:	4a94      	ldr	r2, [pc, #592]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800adc8:	430b      	orrs	r3, r1
 800adca:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800adce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800add2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800adda:	633b      	str	r3, [r7, #48]	; 0x30
 800addc:	2300      	movs	r3, #0
 800adde:	637b      	str	r3, [r7, #52]	; 0x34
 800ade0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ade4:	460b      	mov	r3, r1
 800ade6:	4313      	orrs	r3, r2
 800ade8:	d019      	beq.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800adea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800adee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800adf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800adf6:	d105      	bne.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800adf8:	4b87      	ldr	r3, [pc, #540]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800adfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adfc:	4a86      	ldr	r2, [pc, #536]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800adfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae02:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800ae04:	4b84      	ldr	r3, [pc, #528]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800ae06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ae0a:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800ae0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ae12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ae16:	4a80      	ldr	r2, [pc, #512]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800ae18:	430b      	orrs	r3, r1
 800ae1a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800ae1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ae22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae26:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ae2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae30:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ae34:	460b      	mov	r3, r1
 800ae36:	4313      	orrs	r3, r2
 800ae38:	d00c      	beq.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800ae3a:	4b77      	ldr	r3, [pc, #476]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800ae3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ae44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ae48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ae4c:	4972      	ldr	r1, [pc, #456]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800ae54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ae58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800ae60:	623b      	str	r3, [r7, #32]
 800ae62:	2300      	movs	r3, #0
 800ae64:	627b      	str	r3, [r7, #36]	; 0x24
 800ae66:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ae6a:	460b      	mov	r3, r1
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	d00c      	beq.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800ae70:	4b69      	ldr	r3, [pc, #420]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800ae72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ae7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ae7e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ae82:	4965      	ldr	r1, [pc, #404]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800ae84:	4313      	orrs	r3, r2
 800ae86:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800ae8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ae8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae92:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ae96:	61bb      	str	r3, [r7, #24]
 800ae98:	2300      	movs	r3, #0
 800ae9a:	61fb      	str	r3, [r7, #28]
 800ae9c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800aea0:	460b      	mov	r3, r1
 800aea2:	4313      	orrs	r3, r2
 800aea4:	d00c      	beq.n	800aec0 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800aea6:	4b5c      	ldr	r3, [pc, #368]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800aea8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aeac:	f023 0218 	bic.w	r2, r3, #24
 800aeb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aeb4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800aeb8:	4957      	ldr	r1, [pc, #348]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800aeba:	4313      	orrs	r3, r2
 800aebc:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800aec0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec8:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800aecc:	613b      	str	r3, [r7, #16]
 800aece:	2300      	movs	r3, #0
 800aed0:	617b      	str	r3, [r7, #20]
 800aed2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800aed6:	460b      	mov	r3, r1
 800aed8:	4313      	orrs	r3, r2
 800aeda:	d032      	beq.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800aedc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aee0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aee4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aee8:	d105      	bne.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aeea:	4b4b      	ldr	r3, [pc, #300]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800aeec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeee:	4a4a      	ldr	r2, [pc, #296]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800aef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aef4:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800aef6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aefa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aefe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af02:	d108      	bne.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800af04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af08:	3308      	adds	r3, #8
 800af0a:	4618      	mov	r0, r3
 800af0c:	f001 fde0 	bl	800cad0 <RCCEx_PLL2_Config>
 800af10:	4603      	mov	r3, r0
 800af12:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800af16:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d10d      	bne.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800af1e:	4b3e      	ldr	r3, [pc, #248]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800af20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800af24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800af28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af30:	4939      	ldr	r1, [pc, #228]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800af32:	4313      	orrs	r3, r2
 800af34:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800af38:	e003      	b.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af3a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800af3e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800af42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4a:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800af4e:	60bb      	str	r3, [r7, #8]
 800af50:	2300      	movs	r3, #0
 800af52:	60fb      	str	r3, [r7, #12]
 800af54:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800af58:	460b      	mov	r3, r1
 800af5a:	4313      	orrs	r3, r2
 800af5c:	d03a      	beq.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800af5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af6a:	d00e      	beq.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800af6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af70:	d815      	bhi.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800af72:	2b00      	cmp	r3, #0
 800af74:	d017      	beq.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800af76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800af7a:	d110      	bne.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af7c:	4b26      	ldr	r3, [pc, #152]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800af7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af80:	4a25      	ldr	r2, [pc, #148]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800af82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af86:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800af88:	e00e      	b.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800af8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af8e:	3308      	adds	r3, #8
 800af90:	4618      	mov	r0, r3
 800af92:	f001 fd9d 	bl	800cad0 <RCCEx_PLL2_Config>
 800af96:	4603      	mov	r3, r0
 800af98:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800af9c:	e004      	b.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800af9e:	2301      	movs	r3, #1
 800afa0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800afa4:	e000      	b.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800afa6:	bf00      	nop
    }
    if (ret == HAL_OK)
 800afa8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800afac:	2b00      	cmp	r3, #0
 800afae:	d10d      	bne.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800afb0:	4b19      	ldr	r3, [pc, #100]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800afb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800afb6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800afba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800afbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afc2:	4915      	ldr	r1, [pc, #84]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800afc4:	4313      	orrs	r3, r2
 800afc6:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800afca:	e003      	b.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afcc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800afd0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800afd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800afd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afdc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800afe0:	603b      	str	r3, [r7, #0]
 800afe2:	2300      	movs	r3, #0
 800afe4:	607b      	str	r3, [r7, #4]
 800afe6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800afea:	460b      	mov	r3, r1
 800afec:	4313      	orrs	r3, r2
 800afee:	d00c      	beq.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800aff0:	4b09      	ldr	r3, [pc, #36]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800aff2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aff6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800affa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800affe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b002:	4905      	ldr	r1, [pc, #20]	; (800b018 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800b004:	4313      	orrs	r3, r2
 800b006:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800b00a:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800b00e:	4618      	mov	r0, r3
 800b010:	37e8      	adds	r7, #232	; 0xe8
 800b012:	46bd      	mov	sp, r7
 800b014:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b018:	46020c00 	.word	0x46020c00

0800b01c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b089      	sub	sp, #36	; 0x24
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800b024:	4bac      	ldr	r3, [pc, #688]	; (800b2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800b026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b02c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800b02e:	4baa      	ldr	r3, [pc, #680]	; (800b2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800b030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b032:	f003 0303 	and.w	r3, r3, #3
 800b036:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800b038:	4ba7      	ldr	r3, [pc, #668]	; (800b2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800b03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b03c:	0a1b      	lsrs	r3, r3, #8
 800b03e:	f003 030f 	and.w	r3, r3, #15
 800b042:	3301      	adds	r3, #1
 800b044:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800b046:	4ba4      	ldr	r3, [pc, #656]	; (800b2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800b048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b04a:	f003 0310 	and.w	r3, r3, #16
 800b04e:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800b050:	4ba1      	ldr	r3, [pc, #644]	; (800b2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800b052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b054:	08db      	lsrs	r3, r3, #3
 800b056:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b05a:	68fa      	ldr	r2, [r7, #12]
 800b05c:	fb02 f303 	mul.w	r3, r2, r3
 800b060:	ee07 3a90 	vmov	s15, r3
 800b064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b068:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	f000 8123 	beq.w	800b2ba <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	2b03      	cmp	r3, #3
 800b078:	d062      	beq.n	800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	2b03      	cmp	r3, #3
 800b07e:	f200 8081 	bhi.w	800b184 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	2b01      	cmp	r3, #1
 800b086:	d024      	beq.n	800b0d2 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	2b02      	cmp	r3, #2
 800b08c:	d17a      	bne.n	800b184 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	ee07 3a90 	vmov	s15, r3
 800b094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b098:	eddf 6a90 	vldr	s13, [pc, #576]	; 800b2dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800b09c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0a0:	4b8d      	ldr	r3, [pc, #564]	; (800b2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800b0a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0a8:	ee07 3a90 	vmov	s15, r3
 800b0ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0b0:	ed97 6a02 	vldr	s12, [r7, #8]
 800b0b4:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800b2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800b0b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b0bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b0c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0d0:	e08f      	b.n	800b1f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b0d2:	4b81      	ldr	r3, [pc, #516]	; (800b2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d005      	beq.n	800b0ea <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 800b0de:	4b7e      	ldr	r3, [pc, #504]	; (800b2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	0f1b      	lsrs	r3, r3, #28
 800b0e4:	f003 030f 	and.w	r3, r3, #15
 800b0e8:	e006      	b.n	800b0f8 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 800b0ea:	4b7b      	ldr	r3, [pc, #492]	; (800b2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800b0ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b0f0:	041b      	lsls	r3, r3, #16
 800b0f2:	0f1b      	lsrs	r3, r3, #28
 800b0f4:	f003 030f 	and.w	r3, r3, #15
 800b0f8:	4a7a      	ldr	r2, [pc, #488]	; (800b2e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800b0fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0fe:	ee07 3a90 	vmov	s15, r3
 800b102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	ee07 3a90 	vmov	s15, r3
 800b10c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b110:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b114:	69bb      	ldr	r3, [r7, #24]
 800b116:	ee07 3a90 	vmov	s15, r3
 800b11a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b11e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b122:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800b2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800b126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b12a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b12e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b132:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b13a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b13e:	e058      	b.n	800b1f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	ee07 3a90 	vmov	s15, r3
 800b146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b14a:	eddf 6a64 	vldr	s13, [pc, #400]	; 800b2dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800b14e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b152:	4b61      	ldr	r3, [pc, #388]	; (800b2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800b154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b15a:	ee07 3a90 	vmov	s15, r3
 800b15e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800b162:	ed97 6a02 	vldr	s12, [r7, #8]
 800b166:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800b2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800b16a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b16e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800b172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b176:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b17a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b17e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b182:	e036      	b.n	800b1f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b184:	4b54      	ldr	r3, [pc, #336]	; (800b2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800b186:	689b      	ldr	r3, [r3, #8]
 800b188:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d005      	beq.n	800b19c <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 800b190:	4b51      	ldr	r3, [pc, #324]	; (800b2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	0f1b      	lsrs	r3, r3, #28
 800b196:	f003 030f 	and.w	r3, r3, #15
 800b19a:	e006      	b.n	800b1aa <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 800b19c:	4b4e      	ldr	r3, [pc, #312]	; (800b2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800b19e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b1a2:	041b      	lsls	r3, r3, #16
 800b1a4:	0f1b      	lsrs	r3, r3, #28
 800b1a6:	f003 030f 	and.w	r3, r3, #15
 800b1aa:	4a4e      	ldr	r2, [pc, #312]	; (800b2e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800b1ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1b0:	ee07 3a90 	vmov	s15, r3
 800b1b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	ee07 3a90 	vmov	s15, r3
 800b1be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	ee07 3a90 	vmov	s15, r3
 800b1cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1d0:	ed97 6a02 	vldr	s12, [r7, #8]
 800b1d4:	eddf 5a42 	vldr	s11, [pc, #264]	; 800b2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800b1d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b1e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1f0:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800b1f2:	4b39      	ldr	r3, [pc, #228]	; (800b2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800b1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d017      	beq.n	800b22e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b1fe:	4b36      	ldr	r3, [pc, #216]	; (800b2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800b200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b202:	0a5b      	lsrs	r3, r3, #9
 800b204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b208:	ee07 3a90 	vmov	s15, r3
 800b20c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800b210:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b214:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b218:	edd7 6a07 	vldr	s13, [r7, #28]
 800b21c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b224:	ee17 2a90 	vmov	r2, s15
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	601a      	str	r2, [r3, #0]
 800b22c:	e002      	b.n	800b234 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2200      	movs	r2, #0
 800b232:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800b234:	4b28      	ldr	r3, [pc, #160]	; (800b2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800b236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d017      	beq.n	800b270 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b240:	4b25      	ldr	r3, [pc, #148]	; (800b2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800b242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b244:	0c1b      	lsrs	r3, r3, #16
 800b246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b24a:	ee07 3a90 	vmov	s15, r3
 800b24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800b252:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b256:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b25a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b25e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b266:	ee17 2a90 	vmov	r2, s15
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	605a      	str	r2, [r3, #4]
 800b26e:	e002      	b.n	800b276 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800b276:	4b18      	ldr	r3, [pc, #96]	; (800b2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800b278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b27a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d017      	beq.n	800b2b2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b282:	4b15      	ldr	r3, [pc, #84]	; (800b2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800b284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b286:	0e1b      	lsrs	r3, r3, #24
 800b288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b28c:	ee07 3a90 	vmov	s15, r3
 800b290:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800b294:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b298:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b29c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2a8:	ee17 2a90 	vmov	r2, s15
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b2b0:	e00c      	b.n	800b2cc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	609a      	str	r2, [r3, #8]
}
 800b2b8:	e008      	b.n	800b2cc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	609a      	str	r2, [r3, #8]
}
 800b2cc:	bf00      	nop
 800b2ce:	3724      	adds	r7, #36	; 0x24
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr
 800b2d8:	46020c00 	.word	0x46020c00
 800b2dc:	4b742400 	.word	0x4b742400
 800b2e0:	46000000 	.word	0x46000000
 800b2e4:	08011d34 	.word	0x08011d34

0800b2e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b089      	sub	sp, #36	; 0x24
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800b2f0:	4bac      	ldr	r3, [pc, #688]	; (800b5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b2f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2f8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800b2fa:	4baa      	ldr	r3, [pc, #680]	; (800b5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2fe:	f003 0303 	and.w	r3, r3, #3
 800b302:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800b304:	4ba7      	ldr	r3, [pc, #668]	; (800b5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b308:	0a1b      	lsrs	r3, r3, #8
 800b30a:	f003 030f 	and.w	r3, r3, #15
 800b30e:	3301      	adds	r3, #1
 800b310:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800b312:	4ba4      	ldr	r3, [pc, #656]	; (800b5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b316:	f003 0310 	and.w	r3, r3, #16
 800b31a:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800b31c:	4ba1      	ldr	r3, [pc, #644]	; (800b5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b320:	08db      	lsrs	r3, r3, #3
 800b322:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b326:	68fa      	ldr	r2, [r7, #12]
 800b328:	fb02 f303 	mul.w	r3, r2, r3
 800b32c:	ee07 3a90 	vmov	s15, r3
 800b330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b334:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	f000 8123 	beq.w	800b586 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	2b03      	cmp	r3, #3
 800b344:	d062      	beq.n	800b40c <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	2b03      	cmp	r3, #3
 800b34a:	f200 8081 	bhi.w	800b450 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	2b01      	cmp	r3, #1
 800b352:	d024      	beq.n	800b39e <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	2b02      	cmp	r3, #2
 800b358:	d17a      	bne.n	800b450 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	ee07 3a90 	vmov	s15, r3
 800b360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b364:	eddf 6a90 	vldr	s13, [pc, #576]	; 800b5a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800b368:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b36c:	4b8d      	ldr	r3, [pc, #564]	; (800b5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b36e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b374:	ee07 3a90 	vmov	s15, r3
 800b378:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800b37c:	ed97 6a02 	vldr	s12, [r7, #8]
 800b380:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800b384:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b388:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800b38c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b390:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b394:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b398:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b39c:	e08f      	b.n	800b4be <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800b39e:	4b81      	ldr	r3, [pc, #516]	; (800b5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d005      	beq.n	800b3b6 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 800b3aa:	4b7e      	ldr	r3, [pc, #504]	; (800b5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	0f1b      	lsrs	r3, r3, #28
 800b3b0:	f003 030f 	and.w	r3, r3, #15
 800b3b4:	e006      	b.n	800b3c4 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 800b3b6:	4b7b      	ldr	r3, [pc, #492]	; (800b5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b3b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b3bc:	041b      	lsls	r3, r3, #16
 800b3be:	0f1b      	lsrs	r3, r3, #28
 800b3c0:	f003 030f 	and.w	r3, r3, #15
 800b3c4:	4a7a      	ldr	r2, [pc, #488]	; (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800b3c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3ca:	ee07 3a90 	vmov	s15, r3
 800b3ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	ee07 3a90 	vmov	s15, r3
 800b3d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3e0:	69bb      	ldr	r3, [r7, #24]
 800b3e2:	ee07 3a90 	vmov	s15, r3
 800b3e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3ee:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800b3f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800b402:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b40a:	e058      	b.n	800b4be <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	ee07 3a90 	vmov	s15, r3
 800b412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b416:	eddf 6a64 	vldr	s13, [pc, #400]	; 800b5a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800b41a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b41e:	4b61      	ldr	r3, [pc, #388]	; (800b5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b426:	ee07 3a90 	vmov	s15, r3
 800b42a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800b42e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b432:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800b436:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b43a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800b43e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b442:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b44a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b44e:	e036      	b.n	800b4be <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800b450:	4b54      	ldr	r3, [pc, #336]	; (800b5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d005      	beq.n	800b468 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 800b45c:	4b51      	ldr	r3, [pc, #324]	; (800b5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b45e:	689b      	ldr	r3, [r3, #8]
 800b460:	0f1b      	lsrs	r3, r3, #28
 800b462:	f003 030f 	and.w	r3, r3, #15
 800b466:	e006      	b.n	800b476 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 800b468:	4b4e      	ldr	r3, [pc, #312]	; (800b5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b46a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b46e:	041b      	lsls	r3, r3, #16
 800b470:	0f1b      	lsrs	r3, r3, #28
 800b472:	f003 030f 	and.w	r3, r3, #15
 800b476:	4a4e      	ldr	r2, [pc, #312]	; (800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800b478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b47c:	ee07 3a90 	vmov	s15, r3
 800b480:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	ee07 3a90 	vmov	s15, r3
 800b48a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b48e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b492:	69bb      	ldr	r3, [r7, #24]
 800b494:	ee07 3a90 	vmov	s15, r3
 800b498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b49c:	ed97 6a02 	vldr	s12, [r7, #8]
 800b4a0:	eddf 5a42 	vldr	s11, [pc, #264]	; 800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800b4a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800b4b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4bc:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800b4be:	4b39      	ldr	r3, [pc, #228]	; (800b5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d017      	beq.n	800b4fa <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b4ca:	4b36      	ldr	r3, [pc, #216]	; (800b5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4ce:	0a5b      	lsrs	r3, r3, #9
 800b4d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4d4:	ee07 3a90 	vmov	s15, r3
 800b4d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800b4dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b4e0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b4e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4f0:	ee17 2a90 	vmov	r2, s15
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	601a      	str	r2, [r3, #0]
 800b4f8:	e002      	b.n	800b500 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800b500:	4b28      	ldr	r3, [pc, #160]	; (800b5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d017      	beq.n	800b53c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b50c:	4b25      	ldr	r3, [pc, #148]	; (800b5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b50e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b510:	0c1b      	lsrs	r3, r3, #16
 800b512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b516:	ee07 3a90 	vmov	s15, r3
 800b51a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800b51e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b522:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b526:	edd7 6a07 	vldr	s13, [r7, #28]
 800b52a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b52e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b532:	ee17 2a90 	vmov	r2, s15
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	605a      	str	r2, [r3, #4]
 800b53a:	e002      	b.n	800b542 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2200      	movs	r2, #0
 800b540:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800b542:	4b18      	ldr	r3, [pc, #96]	; (800b5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d017      	beq.n	800b57e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b54e:	4b15      	ldr	r3, [pc, #84]	; (800b5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b552:	0e1b      	lsrs	r3, r3, #24
 800b554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b558:	ee07 3a90 	vmov	s15, r3
 800b55c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800b560:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b564:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b568:	edd7 6a07 	vldr	s13, [r7, #28]
 800b56c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b574:	ee17 2a90 	vmov	r2, s15
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b57c:	e00c      	b.n	800b598 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	609a      	str	r2, [r3, #8]
}
 800b584:	e008      	b.n	800b598 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2200      	movs	r2, #0
 800b58a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2200      	movs	r2, #0
 800b590:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2200      	movs	r2, #0
 800b596:	609a      	str	r2, [r3, #8]
}
 800b598:	bf00      	nop
 800b59a:	3724      	adds	r7, #36	; 0x24
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr
 800b5a4:	46020c00 	.word	0x46020c00
 800b5a8:	4b742400 	.word	0x4b742400
 800b5ac:	46000000 	.word	0x46000000
 800b5b0:	08011d34 	.word	0x08011d34

0800b5b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b089      	sub	sp, #36	; 0x24
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800b5bc:	4bac      	ldr	r3, [pc, #688]	; (800b870 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b5be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5c4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800b5c6:	4baa      	ldr	r3, [pc, #680]	; (800b870 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b5c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ca:	f003 0303 	and.w	r3, r3, #3
 800b5ce:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800b5d0:	4ba7      	ldr	r3, [pc, #668]	; (800b870 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b5d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5d4:	0a1b      	lsrs	r3, r3, #8
 800b5d6:	f003 030f 	and.w	r3, r3, #15
 800b5da:	3301      	adds	r3, #1
 800b5dc:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800b5de:	4ba4      	ldr	r3, [pc, #656]	; (800b870 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5e2:	f003 0310 	and.w	r3, r3, #16
 800b5e6:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800b5e8:	4ba1      	ldr	r3, [pc, #644]	; (800b870 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b5ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5ec:	08db      	lsrs	r3, r3, #3
 800b5ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b5f2:	68fa      	ldr	r2, [r7, #12]
 800b5f4:	fb02 f303 	mul.w	r3, r2, r3
 800b5f8:	ee07 3a90 	vmov	s15, r3
 800b5fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b600:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	2b00      	cmp	r3, #0
 800b608:	f000 8123 	beq.w	800b852 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	2b03      	cmp	r3, #3
 800b610:	d062      	beq.n	800b6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	2b03      	cmp	r3, #3
 800b616:	f200 8081 	bhi.w	800b71c <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d024      	beq.n	800b66a <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	2b02      	cmp	r3, #2
 800b624:	d17a      	bne.n	800b71c <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	ee07 3a90 	vmov	s15, r3
 800b62c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b630:	eddf 6a90 	vldr	s13, [pc, #576]	; 800b874 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800b634:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b638:	4b8d      	ldr	r3, [pc, #564]	; (800b870 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b63a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b63c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b640:	ee07 3a90 	vmov	s15, r3
 800b644:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800b648:	ed97 6a02 	vldr	s12, [r7, #8]
 800b64c:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800b878 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800b650:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b654:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800b658:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b65c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b660:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b664:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800b668:	e08f      	b.n	800b78a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800b66a:	4b81      	ldr	r3, [pc, #516]	; (800b870 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b672:	2b00      	cmp	r3, #0
 800b674:	d005      	beq.n	800b682 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 800b676:	4b7e      	ldr	r3, [pc, #504]	; (800b870 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b678:	689b      	ldr	r3, [r3, #8]
 800b67a:	0f1b      	lsrs	r3, r3, #28
 800b67c:	f003 030f 	and.w	r3, r3, #15
 800b680:	e006      	b.n	800b690 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 800b682:	4b7b      	ldr	r3, [pc, #492]	; (800b870 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b684:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b688:	041b      	lsls	r3, r3, #16
 800b68a:	0f1b      	lsrs	r3, r3, #28
 800b68c:	f003 030f 	and.w	r3, r3, #15
 800b690:	4a7a      	ldr	r2, [pc, #488]	; (800b87c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800b692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b696:	ee07 3a90 	vmov	s15, r3
 800b69a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	ee07 3a90 	vmov	s15, r3
 800b6a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b6ac:	69bb      	ldr	r3, [r7, #24]
 800b6ae:	ee07 3a90 	vmov	s15, r3
 800b6b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6ba:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800b878 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800b6be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800b6ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6d6:	e058      	b.n	800b78a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	ee07 3a90 	vmov	s15, r3
 800b6de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6e2:	eddf 6a64 	vldr	s13, [pc, #400]	; 800b874 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800b6e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6ea:	4b61      	ldr	r3, [pc, #388]	; (800b870 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b6ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6f2:	ee07 3a90 	vmov	s15, r3
 800b6f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800b6fa:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6fe:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800b878 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800b702:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b706:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800b70a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b70e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b712:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b71a:	e036      	b.n	800b78a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800b71c:	4b54      	ldr	r3, [pc, #336]	; (800b870 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b71e:	689b      	ldr	r3, [r3, #8]
 800b720:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b724:	2b00      	cmp	r3, #0
 800b726:	d005      	beq.n	800b734 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 800b728:	4b51      	ldr	r3, [pc, #324]	; (800b870 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b72a:	689b      	ldr	r3, [r3, #8]
 800b72c:	0f1b      	lsrs	r3, r3, #28
 800b72e:	f003 030f 	and.w	r3, r3, #15
 800b732:	e006      	b.n	800b742 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 800b734:	4b4e      	ldr	r3, [pc, #312]	; (800b870 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b736:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b73a:	041b      	lsls	r3, r3, #16
 800b73c:	0f1b      	lsrs	r3, r3, #28
 800b73e:	f003 030f 	and.w	r3, r3, #15
 800b742:	4a4e      	ldr	r2, [pc, #312]	; (800b87c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800b744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b748:	ee07 3a90 	vmov	s15, r3
 800b74c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	ee07 3a90 	vmov	s15, r3
 800b756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b75a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b75e:	69bb      	ldr	r3, [r7, #24]
 800b760:	ee07 3a90 	vmov	s15, r3
 800b764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b768:	ed97 6a02 	vldr	s12, [r7, #8]
 800b76c:	eddf 5a42 	vldr	s11, [pc, #264]	; 800b878 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800b770:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b774:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b778:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b77c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800b780:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b784:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b788:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800b78a:	4b39      	ldr	r3, [pc, #228]	; (800b870 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b78e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b792:	2b00      	cmp	r3, #0
 800b794:	d017      	beq.n	800b7c6 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b796:	4b36      	ldr	r3, [pc, #216]	; (800b870 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b79a:	0a5b      	lsrs	r3, r3, #9
 800b79c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7a0:	ee07 3a90 	vmov	s15, r3
 800b7a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800b7a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7ac:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b7b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7bc:	ee17 2a90 	vmov	r2, s15
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	601a      	str	r2, [r3, #0]
 800b7c4:	e002      	b.n	800b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800b7cc:	4b28      	ldr	r3, [pc, #160]	; (800b870 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b7ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d017      	beq.n	800b808 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b7d8:	4b25      	ldr	r3, [pc, #148]	; (800b870 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b7da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7dc:	0c1b      	lsrs	r3, r3, #16
 800b7de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7e2:	ee07 3a90 	vmov	s15, r3
 800b7e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800b7ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7ee:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b7f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7fe:	ee17 2a90 	vmov	r2, s15
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	605a      	str	r2, [r3, #4]
 800b806:	e002      	b.n	800b80e <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2200      	movs	r2, #0
 800b80c:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800b80e:	4b18      	ldr	r3, [pc, #96]	; (800b870 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b816:	2b00      	cmp	r3, #0
 800b818:	d017      	beq.n	800b84a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b81a:	4b15      	ldr	r3, [pc, #84]	; (800b870 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b81c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b81e:	0e1b      	lsrs	r3, r3, #24
 800b820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b824:	ee07 3a90 	vmov	s15, r3
 800b828:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800b82c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b830:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b834:	edd7 6a07 	vldr	s13, [r7, #28]
 800b838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b83c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b840:	ee17 2a90 	vmov	r2, s15
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800b848:	e00c      	b.n	800b864 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	609a      	str	r2, [r3, #8]
}
 800b850:	e008      	b.n	800b864 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2200      	movs	r2, #0
 800b856:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2200      	movs	r2, #0
 800b85c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2200      	movs	r2, #0
 800b862:	609a      	str	r2, [r3, #8]
}
 800b864:	bf00      	nop
 800b866:	3724      	adds	r7, #36	; 0x24
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr
 800b870:	46020c00 	.word	0x46020c00
 800b874:	4b742400 	.word	0x4b742400
 800b878:	46000000 	.word	0x46000000
 800b87c:	08011d34 	.word	0x08011d34

0800b880 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b08e      	sub	sp, #56	; 0x38
 800b884:	af00      	add	r7, sp, #0
 800b886:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800b88a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b88e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800b892:	430b      	orrs	r3, r1
 800b894:	d145      	bne.n	800b922 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800b896:	4ba7      	ldr	r3, [pc, #668]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b89c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8a0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800b8a2:	4ba4      	ldr	r3, [pc, #656]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b8a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b8a8:	f003 0302 	and.w	r3, r3, #2
 800b8ac:	2b02      	cmp	r3, #2
 800b8ae:	d108      	bne.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800b8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8b6:	d104      	bne.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800b8b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8bc:	637b      	str	r3, [r7, #52]	; 0x34
 800b8be:	f001 b8fc 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800b8c2:	4b9c      	ldr	r3, [pc, #624]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b8c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b8c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8d0:	d114      	bne.n	800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800b8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8d8:	d110      	bne.n	800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b8da:	4b96      	ldr	r3, [pc, #600]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b8dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b8e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8e8:	d103      	bne.n	800b8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800b8ea:	23fa      	movs	r3, #250	; 0xfa
 800b8ec:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b8ee:	f001 b8e4 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800b8f2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b8f6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b8f8:	f001 b8df 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800b8fc:	4b8d      	ldr	r3, [pc, #564]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b908:	d107      	bne.n	800b91a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800b90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b90c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b910:	d103      	bne.n	800b91a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800b912:	4b89      	ldr	r3, [pc, #548]	; (800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800b914:	637b      	str	r3, [r7, #52]	; 0x34
 800b916:	f001 b8d0 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800b91a:	2300      	movs	r3, #0
 800b91c:	637b      	str	r3, [r7, #52]	; 0x34
 800b91e:	f001 b8cc 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b922:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b926:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b92a:	430b      	orrs	r3, r1
 800b92c:	d151      	bne.n	800b9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800b92e:	4b81      	ldr	r3, [pc, #516]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b930:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b934:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800b938:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93c:	2b80      	cmp	r3, #128	; 0x80
 800b93e:	d035      	beq.n	800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800b940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b942:	2b80      	cmp	r3, #128	; 0x80
 800b944:	d841      	bhi.n	800b9ca <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800b946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b948:	2b60      	cmp	r3, #96	; 0x60
 800b94a:	d02a      	beq.n	800b9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800b94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94e:	2b60      	cmp	r3, #96	; 0x60
 800b950:	d83b      	bhi.n	800b9ca <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800b952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b954:	2b40      	cmp	r3, #64	; 0x40
 800b956:	d009      	beq.n	800b96c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95a:	2b40      	cmp	r3, #64	; 0x40
 800b95c:	d835      	bhi.n	800b9ca <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800b95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b960:	2b00      	cmp	r3, #0
 800b962:	d00c      	beq.n	800b97e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800b964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b966:	2b20      	cmp	r3, #32
 800b968:	d012      	beq.n	800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b96a:	e02e      	b.n	800b9ca <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b96c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b970:	4618      	mov	r0, r3
 800b972:	f7ff fb53 	bl	800b01c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b978:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b97a:	f001 b89e 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b97e:	f107 0318 	add.w	r3, r7, #24
 800b982:	4618      	mov	r0, r3
 800b984:	f7ff fcb0 	bl	800b2e8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800b988:	69bb      	ldr	r3, [r7, #24]
 800b98a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b98c:	f001 b895 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b990:	f107 030c 	add.w	r3, r7, #12
 800b994:	4618      	mov	r0, r3
 800b996:	f7ff fe0d 	bl	800b5b4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b99e:	f001 b88c 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b9a2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b9a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b9a8:	f001 b887 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b9ac:	4b61      	ldr	r3, [pc, #388]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b9b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9b8:	d103      	bne.n	800b9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800b9ba:	4b60      	ldr	r3, [pc, #384]	; (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b9bc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b9be:	f001 b87c 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b9c6:	f001 b878 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b9ce:	f001 b874 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b9d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9d6:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b9da:	430b      	orrs	r3, r1
 800b9dc:	d158      	bne.n	800ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b9de:	4b55      	ldr	r3, [pc, #340]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b9e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b9e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b9e8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9f0:	d03b      	beq.n	800ba6a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800b9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9f8:	d846      	bhi.n	800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba00:	d02e      	beq.n	800ba60 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800ba02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba08:	d83e      	bhi.n	800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ba0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba10:	d00b      	beq.n	800ba2a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800ba12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba18:	d836      	bhi.n	800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ba1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d00d      	beq.n	800ba3c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800ba20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba26:	d012      	beq.n	800ba4e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800ba28:	e02e      	b.n	800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7ff faf4 	bl	800b01c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ba34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba38:	f001 b83f 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba3c:	f107 0318 	add.w	r3, r7, #24
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7ff fc51 	bl	800b2e8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800ba46:	69bb      	ldr	r3, [r7, #24]
 800ba48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba4a:	f001 b836 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba4e:	f107 030c 	add.w	r3, r7, #12
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7ff fdae 	bl	800b5b4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba5c:	f001 b82d 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ba60:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ba64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba66:	f001 b828 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ba6a:	4b32      	ldr	r3, [pc, #200]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba76:	d103      	bne.n	800ba80 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800ba78:	4b30      	ldr	r3, [pc, #192]	; (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ba7a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ba7c:	f001 b81d 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800ba80:	2300      	movs	r3, #0
 800ba82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba84:	f001 b819 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba8c:	f001 b815 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800ba90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba94:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800ba98:	430b      	orrs	r3, r1
 800ba9a:	d126      	bne.n	800baea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800ba9c:	4b25      	ldr	r3, [pc, #148]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ba9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800baa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800baa6:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800baa8:	4b22      	ldr	r3, [pc, #136]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bab4:	d106      	bne.n	800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800bab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d103      	bne.n	800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800babc:	4b1f      	ldr	r3, [pc, #124]	; (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800babe:	637b      	str	r3, [r7, #52]	; 0x34
 800bac0:	f000 bffb 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800bac4:	4b1b      	ldr	r3, [pc, #108]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bacc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bad0:	d107      	bne.n	800bae2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800bad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bad8:	d103      	bne.n	800bae2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800bada:	4b19      	ldr	r3, [pc, #100]	; (800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800badc:	637b      	str	r3, [r7, #52]	; 0x34
 800bade:	f000 bfec 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800bae2:	2300      	movs	r3, #0
 800bae4:	637b      	str	r3, [r7, #52]	; 0x34
 800bae6:	f000 bfe8 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800baea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800baee:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800baf2:	430b      	orrs	r3, r1
 800baf4:	d164      	bne.n	800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800baf6:	4b0f      	ldr	r3, [pc, #60]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800baf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bafc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800bb00:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800bb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb04:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bb08:	d03d      	beq.n	800bb86 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800bb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bb10:	d852      	bhi.n	800bbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800bb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb18:	d014      	beq.n	800bb44 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800bb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb20:	d84a      	bhi.n	800bbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800bb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d01f      	beq.n	800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800bb28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bb2e:	d012      	beq.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800bb30:	e042      	b.n	800bbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800bb32:	bf00      	nop
 800bb34:	46020c00 	.word	0x46020c00
 800bb38:	0007a120 	.word	0x0007a120
 800bb3c:	00f42400 	.word	0x00f42400
 800bb40:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7ff fa67 	bl	800b01c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb52:	f000 bfb2 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb56:	f107 0318 	add.w	r3, r7, #24
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7ff fbc4 	bl	800b2e8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb64:	f000 bfa9 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800bb68:	4bab      	ldr	r3, [pc, #684]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bb70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb74:	d103      	bne.n	800bb7e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800bb76:	4ba9      	ldr	r3, [pc, #676]	; (800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800bb78:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bb7a:	f000 bf9e 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb82:	f000 bf9a 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bb86:	4ba4      	ldr	r3, [pc, #656]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800bb88:	689b      	ldr	r3, [r3, #8]
 800bb8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d005      	beq.n	800bb9e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800bb92:	4ba1      	ldr	r3, [pc, #644]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800bb94:	689b      	ldr	r3, [r3, #8]
 800bb96:	0e1b      	lsrs	r3, r3, #24
 800bb98:	f003 030f 	and.w	r3, r3, #15
 800bb9c:	e006      	b.n	800bbac <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 800bb9e:	4b9e      	ldr	r3, [pc, #632]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800bba0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bba4:	041b      	lsls	r3, r3, #16
 800bba6:	0e1b      	lsrs	r3, r3, #24
 800bba8:	f003 030f 	and.w	r3, r3, #15
 800bbac:	4a9c      	ldr	r2, [pc, #624]	; (800be20 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800bbae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bbb4:	f000 bf81 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bbbc:	f000 bf7d 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bbc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbc4:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800bbc8:	430b      	orrs	r3, r1
 800bbca:	d175      	bne.n	800bcb8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800bbcc:	4b92      	ldr	r3, [pc, #584]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800bbce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bbd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bbd6:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800bbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d15b      	bne.n	800bc96 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800bbde:	4b8e      	ldr	r3, [pc, #568]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800bbe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bbe4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800bbe8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800bbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bbf0:	d034      	beq.n	800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bbf8:	d849      	bhi.n	800bc8e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800bbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc00:	d00b      	beq.n	800bc1a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800bc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc08:	d841      	bhi.n	800bc8e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800bc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d016      	beq.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800bc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bc16:	d009      	beq.n	800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 800bc18:	e039      	b.n	800bc8e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7ff f9fc 	bl	800b01c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc26:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800bc28:	f000 bf47 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc2c:	f107 0318 	add.w	r3, r7, #24
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7ff fb59 	bl	800b2e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bc36:	69fb      	ldr	r3, [r7, #28]
 800bc38:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800bc3a:	f000 bf3e 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800bc3e:	4b76      	ldr	r3, [pc, #472]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc4a:	d103      	bne.n	800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 800bc4c:	4b73      	ldr	r3, [pc, #460]	; (800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800bc4e:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800bc50:	f000 bf33 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 800bc54:	2300      	movs	r3, #0
 800bc56:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800bc58:	f000 bf2f 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bc5c:	4b6e      	ldr	r3, [pc, #440]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800bc5e:	689b      	ldr	r3, [r3, #8]
 800bc60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d005      	beq.n	800bc74 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 800bc68:	4b6b      	ldr	r3, [pc, #428]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	0e1b      	lsrs	r3, r3, #24
 800bc6e:	f003 030f 	and.w	r3, r3, #15
 800bc72:	e006      	b.n	800bc82 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 800bc74:	4b68      	ldr	r3, [pc, #416]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800bc76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bc7a:	041b      	lsls	r3, r3, #16
 800bc7c:	0e1b      	lsrs	r3, r3, #24
 800bc7e:	f003 030f 	and.w	r3, r3, #15
 800bc82:	4a67      	ldr	r2, [pc, #412]	; (800be20 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800bc84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc88:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800bc8a:	f000 bf16 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800bc92:	f000 bf12 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800bc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc9c:	d108      	bne.n	800bcb0 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7ff f9ba 	bl	800b01c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800bca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcaa:	637b      	str	r3, [r7, #52]	; 0x34
 800bcac:	f000 bf05 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	637b      	str	r3, [r7, #52]	; 0x34
 800bcb4:	f000 bf01 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800bcb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcbc:	1e51      	subs	r1, r2, #1
 800bcbe:	430b      	orrs	r3, r1
 800bcc0:	d136      	bne.n	800bd30 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800bcc2:	4b55      	ldr	r3, [pc, #340]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800bcc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bcc8:	f003 0303 	and.w	r3, r3, #3
 800bccc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800bcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d104      	bne.n	800bcde <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800bcd4:	f7fe fb34 	bl	800a340 <HAL_RCC_GetPCLK2Freq>
 800bcd8:	6378      	str	r0, [r7, #52]	; 0x34
 800bcda:	f000 beee 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800bcde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d104      	bne.n	800bcee <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bce4:	f7fe f9f6 	bl	800a0d4 <HAL_RCC_GetSysClockFreq>
 800bce8:	6378      	str	r0, [r7, #52]	; 0x34
 800bcea:	f000 bee6 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800bcee:	4b4a      	ldr	r3, [pc, #296]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bcf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcfa:	d106      	bne.n	800bd0a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800bcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfe:	2b02      	cmp	r3, #2
 800bd00:	d103      	bne.n	800bd0a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 800bd02:	4b48      	ldr	r3, [pc, #288]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800bd04:	637b      	str	r3, [r7, #52]	; 0x34
 800bd06:	f000 bed8 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800bd0a:	4b43      	ldr	r3, [pc, #268]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800bd0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bd10:	f003 0302 	and.w	r3, r3, #2
 800bd14:	2b02      	cmp	r3, #2
 800bd16:	d107      	bne.n	800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 800bd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1a:	2b03      	cmp	r3, #3
 800bd1c:	d104      	bne.n	800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 800bd1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd22:	637b      	str	r3, [r7, #52]	; 0x34
 800bd24:	f000 bec9 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	637b      	str	r3, [r7, #52]	; 0x34
 800bd2c:	f000 bec5 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800bd30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd34:	1e91      	subs	r1, r2, #2
 800bd36:	430b      	orrs	r3, r1
 800bd38:	d136      	bne.n	800bda8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800bd3a:	4b37      	ldr	r3, [pc, #220]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800bd3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd40:	f003 030c 	and.w	r3, r3, #12
 800bd44:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800bd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d104      	bne.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bd4c:	f7fe fae4 	bl	800a318 <HAL_RCC_GetPCLK1Freq>
 800bd50:	6378      	str	r0, [r7, #52]	; 0x34
 800bd52:	f000 beb2 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800bd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd58:	2b04      	cmp	r3, #4
 800bd5a:	d104      	bne.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bd5c:	f7fe f9ba 	bl	800a0d4 <HAL_RCC_GetSysClockFreq>
 800bd60:	6378      	str	r0, [r7, #52]	; 0x34
 800bd62:	f000 beaa 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800bd66:	4b2c      	ldr	r3, [pc, #176]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd72:	d106      	bne.n	800bd82 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 800bd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd76:	2b08      	cmp	r3, #8
 800bd78:	d103      	bne.n	800bd82 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 800bd7a:	4b2a      	ldr	r3, [pc, #168]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800bd7c:	637b      	str	r3, [r7, #52]	; 0x34
 800bd7e:	f000 be9c 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800bd82:	4b25      	ldr	r3, [pc, #148]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800bd84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bd88:	f003 0302 	and.w	r3, r3, #2
 800bd8c:	2b02      	cmp	r3, #2
 800bd8e:	d107      	bne.n	800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 800bd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd92:	2b0c      	cmp	r3, #12
 800bd94:	d104      	bne.n	800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 800bd96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd9a:	637b      	str	r3, [r7, #52]	; 0x34
 800bd9c:	f000 be8d 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800bda0:	2300      	movs	r3, #0
 800bda2:	637b      	str	r3, [r7, #52]	; 0x34
 800bda4:	f000 be89 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800bda8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdac:	1f11      	subs	r1, r2, #4
 800bdae:	430b      	orrs	r3, r1
 800bdb0:	d13e      	bne.n	800be30 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800bdb2:	4b19      	ldr	r3, [pc, #100]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800bdb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bdb8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bdbc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800bdbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d104      	bne.n	800bdce <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bdc4:	f7fe faa8 	bl	800a318 <HAL_RCC_GetPCLK1Freq>
 800bdc8:	6378      	str	r0, [r7, #52]	; 0x34
 800bdca:	f000 be76 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800bdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd0:	2b10      	cmp	r3, #16
 800bdd2:	d104      	bne.n	800bdde <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bdd4:	f7fe f97e 	bl	800a0d4 <HAL_RCC_GetSysClockFreq>
 800bdd8:	6378      	str	r0, [r7, #52]	; 0x34
 800bdda:	f000 be6e 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800bdde:	4b0e      	ldr	r3, [pc, #56]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bde6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdea:	d106      	bne.n	800bdfa <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800bdec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdee:	2b20      	cmp	r3, #32
 800bdf0:	d103      	bne.n	800bdfa <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 800bdf2:	4b0c      	ldr	r3, [pc, #48]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800bdf4:	637b      	str	r3, [r7, #52]	; 0x34
 800bdf6:	f000 be60 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800bdfa:	4b07      	ldr	r3, [pc, #28]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800bdfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800be00:	f003 0302 	and.w	r3, r3, #2
 800be04:	2b02      	cmp	r3, #2
 800be06:	d10f      	bne.n	800be28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800be08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0a:	2b30      	cmp	r3, #48	; 0x30
 800be0c:	d10c      	bne.n	800be28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 800be0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be12:	637b      	str	r3, [r7, #52]	; 0x34
 800be14:	f000 be51 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800be18:	46020c00 	.word	0x46020c00
 800be1c:	02dc6c00 	.word	0x02dc6c00
 800be20:	08011d34 	.word	0x08011d34
 800be24:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800be28:	2300      	movs	r3, #0
 800be2a:	637b      	str	r3, [r7, #52]	; 0x34
 800be2c:	f000 be45 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800be30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be34:	f1a2 0108 	sub.w	r1, r2, #8
 800be38:	430b      	orrs	r3, r1
 800be3a:	d136      	bne.n	800beaa <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800be3c:	4b9f      	ldr	r3, [pc, #636]	; (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800be3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800be46:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800be48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d104      	bne.n	800be58 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800be4e:	f7fe fa63 	bl	800a318 <HAL_RCC_GetPCLK1Freq>
 800be52:	6378      	str	r0, [r7, #52]	; 0x34
 800be54:	f000 be31 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800be58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5a:	2b40      	cmp	r3, #64	; 0x40
 800be5c:	d104      	bne.n	800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800be5e:	f7fe f939 	bl	800a0d4 <HAL_RCC_GetSysClockFreq>
 800be62:	6378      	str	r0, [r7, #52]	; 0x34
 800be64:	f000 be29 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800be68:	4b94      	ldr	r3, [pc, #592]	; (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be74:	d106      	bne.n	800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 800be76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be78:	2b80      	cmp	r3, #128	; 0x80
 800be7a:	d103      	bne.n	800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 800be7c:	4b90      	ldr	r3, [pc, #576]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800be7e:	637b      	str	r3, [r7, #52]	; 0x34
 800be80:	f000 be1b 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800be84:	4b8d      	ldr	r3, [pc, #564]	; (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800be86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800be8a:	f003 0302 	and.w	r3, r3, #2
 800be8e:	2b02      	cmp	r3, #2
 800be90:	d107      	bne.n	800bea2 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 800be92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be94:	2bc0      	cmp	r3, #192	; 0xc0
 800be96:	d104      	bne.n	800bea2 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 800be98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be9c:	637b      	str	r3, [r7, #52]	; 0x34
 800be9e:	f000 be0c 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800bea2:	2300      	movs	r3, #0
 800bea4:	637b      	str	r3, [r7, #52]	; 0x34
 800bea6:	f000 be08 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800beaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800beae:	f1a2 0110 	sub.w	r1, r2, #16
 800beb2:	430b      	orrs	r3, r1
 800beb4:	d139      	bne.n	800bf2a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800beb6:	4b81      	ldr	r3, [pc, #516]	; (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800beb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bec0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800bec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d104      	bne.n	800bed2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bec8:	f7fe fa26 	bl	800a318 <HAL_RCC_GetPCLK1Freq>
 800becc:	6378      	str	r0, [r7, #52]	; 0x34
 800bece:	f000 bdf4 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800bed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bed8:	d104      	bne.n	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800beda:	f7fe f8fb 	bl	800a0d4 <HAL_RCC_GetSysClockFreq>
 800bede:	6378      	str	r0, [r7, #52]	; 0x34
 800bee0:	f000 bdeb 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800bee4:	4b75      	ldr	r3, [pc, #468]	; (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800beec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bef0:	d107      	bne.n	800bf02 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800bef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bef8:	d103      	bne.n	800bf02 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 800befa:	4b71      	ldr	r3, [pc, #452]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800befc:	637b      	str	r3, [r7, #52]	; 0x34
 800befe:	f000 bddc 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800bf02:	4b6e      	ldr	r3, [pc, #440]	; (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800bf04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bf08:	f003 0302 	and.w	r3, r3, #2
 800bf0c:	2b02      	cmp	r3, #2
 800bf0e:	d108      	bne.n	800bf22 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 800bf10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf16:	d104      	bne.n	800bf22 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 800bf18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf1c:	637b      	str	r3, [r7, #52]	; 0x34
 800bf1e:	f000 bdcc 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800bf22:	2300      	movs	r3, #0
 800bf24:	637b      	str	r3, [r7, #52]	; 0x34
 800bf26:	f000 bdc8 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800bf2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf2e:	f1a2 0120 	sub.w	r1, r2, #32
 800bf32:	430b      	orrs	r3, r1
 800bf34:	d158      	bne.n	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800bf36:	4b61      	ldr	r3, [pc, #388]	; (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800bf38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bf3c:	f003 0307 	and.w	r3, r3, #7
 800bf40:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800bf42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d104      	bne.n	800bf52 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800bf48:	f7fe fa0e 	bl	800a368 <HAL_RCC_GetPCLK3Freq>
 800bf4c:	6378      	str	r0, [r7, #52]	; 0x34
 800bf4e:	f000 bdb4 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800bf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d104      	bne.n	800bf62 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bf58:	f7fe f8bc 	bl	800a0d4 <HAL_RCC_GetSysClockFreq>
 800bf5c:	6378      	str	r0, [r7, #52]	; 0x34
 800bf5e:	f000 bdac 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800bf62:	4b56      	ldr	r3, [pc, #344]	; (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf6e:	d106      	bne.n	800bf7e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 800bf70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf72:	2b02      	cmp	r3, #2
 800bf74:	d103      	bne.n	800bf7e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 800bf76:	4b52      	ldr	r3, [pc, #328]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800bf78:	637b      	str	r3, [r7, #52]	; 0x34
 800bf7a:	f000 bd9e 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800bf7e:	4b4f      	ldr	r3, [pc, #316]	; (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800bf80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bf84:	f003 0302 	and.w	r3, r3, #2
 800bf88:	2b02      	cmp	r3, #2
 800bf8a:	d107      	bne.n	800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 800bf8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8e:	2b03      	cmp	r3, #3
 800bf90:	d104      	bne.n	800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 800bf92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf96:	637b      	str	r3, [r7, #52]	; 0x34
 800bf98:	f000 bd8f 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800bf9c:	4b47      	ldr	r3, [pc, #284]	; (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f003 0320 	and.w	r3, r3, #32
 800bfa4:	2b20      	cmp	r3, #32
 800bfa6:	d11b      	bne.n	800bfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800bfa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfaa:	2b04      	cmp	r3, #4
 800bfac:	d118      	bne.n	800bfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bfae:	4b43      	ldr	r3, [pc, #268]	; (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d005      	beq.n	800bfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800bfba:	4b40      	ldr	r3, [pc, #256]	; (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	0e1b      	lsrs	r3, r3, #24
 800bfc0:	f003 030f 	and.w	r3, r3, #15
 800bfc4:	e006      	b.n	800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 800bfc6:	4b3d      	ldr	r3, [pc, #244]	; (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800bfc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bfcc:	041b      	lsls	r3, r3, #16
 800bfce:	0e1b      	lsrs	r3, r3, #24
 800bfd0:	f003 030f 	and.w	r3, r3, #15
 800bfd4:	4a3b      	ldr	r2, [pc, #236]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800bfd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfda:	637b      	str	r3, [r7, #52]	; 0x34
 800bfdc:	f000 bd6d 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	637b      	str	r3, [r7, #52]	; 0x34
 800bfe4:	f000 bd69 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800bfe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfec:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800bff0:	430b      	orrs	r3, r1
 800bff2:	d169      	bne.n	800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800bff4:	4b31      	ldr	r3, [pc, #196]	; (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800bff6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bffa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bffe:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800c000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c006:	d104      	bne.n	800c012 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c008:	f7fe f864 	bl	800a0d4 <HAL_RCC_GetSysClockFreq>
 800c00c:	6378      	str	r0, [r7, #52]	; 0x34
 800c00e:	f000 bd54 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800c012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c018:	d108      	bne.n	800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c01a:	f107 0318 	add.w	r3, r7, #24
 800c01e:	4618      	mov	r0, r3
 800c020:	f7ff f962 	bl	800b2e8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800c024:	6a3b      	ldr	r3, [r7, #32]
 800c026:	637b      	str	r3, [r7, #52]	; 0x34
 800c028:	f000 bd47 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800c02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d104      	bne.n	800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800c032:	f7fe f957 	bl	800a2e4 <HAL_RCC_GetHCLKFreq>
 800c036:	6378      	str	r0, [r7, #52]	; 0x34
 800c038:	f000 bd3f 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800c03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c042:	d118      	bne.n	800c076 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800c044:	4b1d      	ldr	r3, [pc, #116]	; (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d005      	beq.n	800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 800c050:	4b1a      	ldr	r3, [pc, #104]	; (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c052:	689b      	ldr	r3, [r3, #8]
 800c054:	0f1b      	lsrs	r3, r3, #28
 800c056:	f003 030f 	and.w	r3, r3, #15
 800c05a:	e006      	b.n	800c06a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 800c05c:	4b17      	ldr	r3, [pc, #92]	; (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c05e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c062:	041b      	lsls	r3, r3, #16
 800c064:	0f1b      	lsrs	r3, r3, #28
 800c066:	f003 030f 	and.w	r3, r3, #15
 800c06a:	4a16      	ldr	r2, [pc, #88]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800c06c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c070:	637b      	str	r3, [r7, #52]	; 0x34
 800c072:	f000 bd22 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800c076:	4b11      	ldr	r3, [pc, #68]	; (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c07e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c082:	d107      	bne.n	800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 800c084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c086:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c08a:	d103      	bne.n	800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 800c08c:	4b0c      	ldr	r3, [pc, #48]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c08e:	637b      	str	r3, [r7, #52]	; 0x34
 800c090:	f000 bd13 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800c094:	4b09      	ldr	r3, [pc, #36]	; (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c09c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0a0:	d107      	bne.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800c0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c0a8:	d103      	bne.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 800c0aa:	4b05      	ldr	r3, [pc, #20]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c0ac:	637b      	str	r3, [r7, #52]	; 0x34
 800c0ae:	f000 bd04 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	637b      	str	r3, [r7, #52]	; 0x34
 800c0b6:	f000 bd00 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800c0ba:	bf00      	nop
 800c0bc:	46020c00 	.word	0x46020c00
 800c0c0:	00f42400 	.word	0x00f42400
 800c0c4:	08011d34 	.word	0x08011d34
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800c0c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0cc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c0d0:	430b      	orrs	r3, r1
 800c0d2:	d14e      	bne.n	800c172 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800c0d4:	4ba8      	ldr	r3, [pc, #672]	; (800c378 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c0d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c0da:	f003 0307 	and.w	r3, r3, #7
 800c0de:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800c0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e2:	2b04      	cmp	r3, #4
 800c0e4:	d841      	bhi.n	800c16a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800c0e6:	a201      	add	r2, pc, #4	; (adr r2, 800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 800c0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ec:	0800c125 	.word	0x0800c125
 800c0f0:	0800c101 	.word	0x0800c101
 800c0f4:	0800c113 	.word	0x0800c113
 800c0f8:	0800c12f 	.word	0x0800c12f
 800c0fc:	0800c139 	.word	0x0800c139
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c104:	4618      	mov	r0, r3
 800c106:	f7fe ff89 	bl	800b01c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c10e:	f000 bcd4 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c112:	f107 030c 	add.w	r3, r7, #12
 800c116:	4618      	mov	r0, r3
 800c118:	f7ff fa4c 	bl	800b5b4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c120:	f000 bccb 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800c124:	f7fe f8de 	bl	800a2e4 <HAL_RCC_GetHCLKFreq>
 800c128:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c12a:	f000 bcc6 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c12e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c132:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c134:	f000 bcc1 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c138:	4b8f      	ldr	r3, [pc, #572]	; (800c378 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c140:	2b00      	cmp	r3, #0
 800c142:	d005      	beq.n	800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 800c144:	4b8c      	ldr	r3, [pc, #560]	; (800c378 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c146:	689b      	ldr	r3, [r3, #8]
 800c148:	0e1b      	lsrs	r3, r3, #24
 800c14a:	f003 030f 	and.w	r3, r3, #15
 800c14e:	e006      	b.n	800c15e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800c150:	4b89      	ldr	r3, [pc, #548]	; (800c378 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c152:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c156:	041b      	lsls	r3, r3, #16
 800c158:	0e1b      	lsrs	r3, r3, #24
 800c15a:	f003 030f 	and.w	r3, r3, #15
 800c15e:	4a87      	ldr	r2, [pc, #540]	; (800c37c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c164:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c166:	f000 bca8 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800c16a:	2300      	movs	r3, #0
 800c16c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c16e:	f000 bca4 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800c172:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c176:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800c17a:	430b      	orrs	r3, r1
 800c17c:	d15d      	bne.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800c17e:	4b7e      	ldr	r3, [pc, #504]	; (800c378 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c180:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c184:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c188:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800c18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c190:	d036      	beq.n	800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c194:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c198:	d84b      	bhi.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800c19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c1a0:	d029      	beq.n	800c1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800c1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c1a8:	d843      	bhi.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800c1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1b0:	d013      	beq.n	800c1da <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800c1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1b8:	d83b      	bhi.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800c1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d015      	beq.n	800c1ec <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 800c1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1c6:	d134      	bne.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f7fe ff25 	bl	800b01c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c1d6:	f000 bc70 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1da:	f107 030c 	add.w	r3, r7, #12
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7ff f9e8 	bl	800b5b4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c1e8:	f000 bc67 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800c1ec:	f7fe f87a 	bl	800a2e4 <HAL_RCC_GetHCLKFreq>
 800c1f0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c1f2:	f000 bc62 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c1f6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c1fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c1fc:	f000 bc5d 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c200:	4b5d      	ldr	r3, [pc, #372]	; (800c378 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c202:	689b      	ldr	r3, [r3, #8]
 800c204:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d005      	beq.n	800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800c20c:	4b5a      	ldr	r3, [pc, #360]	; (800c378 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c20e:	689b      	ldr	r3, [r3, #8]
 800c210:	0e1b      	lsrs	r3, r3, #24
 800c212:	f003 030f 	and.w	r3, r3, #15
 800c216:	e006      	b.n	800c226 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800c218:	4b57      	ldr	r3, [pc, #348]	; (800c378 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c21a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c21e:	041b      	lsls	r3, r3, #16
 800c220:	0e1b      	lsrs	r3, r3, #24
 800c222:	f003 030f 	and.w	r3, r3, #15
 800c226:	4a55      	ldr	r2, [pc, #340]	; (800c37c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c22c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c22e:	f000 bc44 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800c232:	2300      	movs	r3, #0
 800c234:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c236:	f000 bc40 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800c23a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c23e:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800c242:	430b      	orrs	r3, r1
 800c244:	d14a      	bne.n	800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800c246:	4b4c      	ldr	r3, [pc, #304]	; (800c378 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c24c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c250:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800c252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c254:	2b00      	cmp	r3, #0
 800c256:	d104      	bne.n	800c262 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c258:	f7fe f85e 	bl	800a318 <HAL_RCC_GetPCLK1Freq>
 800c25c:	6378      	str	r0, [r7, #52]	; 0x34
 800c25e:	f000 bc2c 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800c262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c268:	d104      	bne.n	800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c26a:	f7fd ff33 	bl	800a0d4 <HAL_RCC_GetSysClockFreq>
 800c26e:	6378      	str	r0, [r7, #52]	; 0x34
 800c270:	f000 bc23 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800c274:	4b40      	ldr	r3, [pc, #256]	; (800c378 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c27c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c280:	d107      	bne.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 800c282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c288:	d103      	bne.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 800c28a:	4b3d      	ldr	r3, [pc, #244]	; (800c380 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800c28c:	637b      	str	r3, [r7, #52]	; 0x34
 800c28e:	f000 bc14 	b.w	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800c292:	4b39      	ldr	r3, [pc, #228]	; (800c378 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f003 0320 	and.w	r3, r3, #32
 800c29a:	2b20      	cmp	r3, #32
 800c29c:	d11b      	bne.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 800c29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c2a4:	d117      	bne.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c2a6:	4b34      	ldr	r3, [pc, #208]	; (800c378 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c2a8:	689b      	ldr	r3, [r3, #8]
 800c2aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d005      	beq.n	800c2be <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 800c2b2:	4b31      	ldr	r3, [pc, #196]	; (800c378 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c2b4:	689b      	ldr	r3, [r3, #8]
 800c2b6:	0e1b      	lsrs	r3, r3, #24
 800c2b8:	f003 030f 	and.w	r3, r3, #15
 800c2bc:	e006      	b.n	800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800c2be:	4b2e      	ldr	r3, [pc, #184]	; (800c378 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c2c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c2c4:	041b      	lsls	r3, r3, #16
 800c2c6:	0e1b      	lsrs	r3, r3, #24
 800c2c8:	f003 030f 	and.w	r3, r3, #15
 800c2cc:	4a2b      	ldr	r2, [pc, #172]	; (800c37c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c2ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2d2:	637b      	str	r3, [r7, #52]	; 0x34
 800c2d4:	e3f1      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	637b      	str	r3, [r7, #52]	; 0x34
 800c2da:	e3ee      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800c2dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2e0:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800c2e4:	430b      	orrs	r3, r1
 800c2e6:	d14d      	bne.n	800c384 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800c2e8:	4b23      	ldr	r3, [pc, #140]	; (800c378 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c2ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c2f2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800c2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d103      	bne.n	800c302 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c2fa:	f7fe f80d 	bl	800a318 <HAL_RCC_GetPCLK1Freq>
 800c2fe:	6378      	str	r0, [r7, #52]	; 0x34
 800c300:	e3db      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800c302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c308:	d103      	bne.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c30a:	f7fd fee3 	bl	800a0d4 <HAL_RCC_GetSysClockFreq>
 800c30e:	6378      	str	r0, [r7, #52]	; 0x34
 800c310:	e3d3      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800c312:	4b19      	ldr	r3, [pc, #100]	; (800c378 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c31a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c31e:	d106      	bne.n	800c32e <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 800c320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c326:	d102      	bne.n	800c32e <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 800c328:	4b15      	ldr	r3, [pc, #84]	; (800c380 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800c32a:	637b      	str	r3, [r7, #52]	; 0x34
 800c32c:	e3c5      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800c32e:	4b12      	ldr	r3, [pc, #72]	; (800c378 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f003 0320 	and.w	r3, r3, #32
 800c336:	2b20      	cmp	r3, #32
 800c338:	d11b      	bne.n	800c372 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 800c33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c340:	d117      	bne.n	800c372 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c342:	4b0d      	ldr	r3, [pc, #52]	; (800c378 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c344:	689b      	ldr	r3, [r3, #8]
 800c346:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d005      	beq.n	800c35a <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 800c34e:	4b0a      	ldr	r3, [pc, #40]	; (800c378 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c350:	689b      	ldr	r3, [r3, #8]
 800c352:	0e1b      	lsrs	r3, r3, #24
 800c354:	f003 030f 	and.w	r3, r3, #15
 800c358:	e006      	b.n	800c368 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800c35a:	4b07      	ldr	r3, [pc, #28]	; (800c378 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c35c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c360:	041b      	lsls	r3, r3, #16
 800c362:	0e1b      	lsrs	r3, r3, #24
 800c364:	f003 030f 	and.w	r3, r3, #15
 800c368:	4a04      	ldr	r2, [pc, #16]	; (800c37c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c36a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c36e:	637b      	str	r3, [r7, #52]	; 0x34
 800c370:	e3a3      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800c372:	2300      	movs	r3, #0
 800c374:	637b      	str	r3, [r7, #52]	; 0x34
 800c376:	e3a0      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800c378:	46020c00 	.word	0x46020c00
 800c37c:	08011d34 	.word	0x08011d34
 800c380:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800c384:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c388:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c38c:	430b      	orrs	r3, r1
 800c38e:	d148      	bne.n	800c422 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800c390:	4b9d      	ldr	r3, [pc, #628]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c392:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c396:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c39a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800c39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39e:	2bc0      	cmp	r3, #192	; 0xc0
 800c3a0:	d024      	beq.n	800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800c3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a4:	2bc0      	cmp	r3, #192	; 0xc0
 800c3a6:	d839      	bhi.n	800c41c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 800c3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3aa:	2b80      	cmp	r3, #128	; 0x80
 800c3ac:	d00d      	beq.n	800c3ca <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800c3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b0:	2b80      	cmp	r3, #128	; 0x80
 800c3b2:	d833      	bhi.n	800c41c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 800c3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d003      	beq.n	800c3c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 800c3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3bc:	2b40      	cmp	r3, #64	; 0x40
 800c3be:	d011      	beq.n	800c3e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800c3c0:	e02c      	b.n	800c41c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800c3c2:	f7fd ffd1 	bl	800a368 <HAL_RCC_GetPCLK3Freq>
 800c3c6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c3c8:	e377      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c3ca:	4b8f      	ldr	r3, [pc, #572]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c3d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3d6:	d102      	bne.n	800c3de <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 800c3d8:	4b8c      	ldr	r3, [pc, #560]	; (800c60c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800c3da:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c3dc:	e36d      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c3e2:	e36a      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800c3e4:	f7fd fe76 	bl	800a0d4 <HAL_RCC_GetSysClockFreq>
 800c3e8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c3ea:	e366      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800c3ec:	4b86      	ldr	r3, [pc, #536]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d005      	beq.n	800c404 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 800c3f8:	4b83      	ldr	r3, [pc, #524]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c3fa:	689b      	ldr	r3, [r3, #8]
 800c3fc:	0f1b      	lsrs	r3, r3, #28
 800c3fe:	f003 030f 	and.w	r3, r3, #15
 800c402:	e006      	b.n	800c412 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 800c404:	4b80      	ldr	r3, [pc, #512]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c406:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c40a:	041b      	lsls	r3, r3, #16
 800c40c:	0f1b      	lsrs	r3, r3, #28
 800c40e:	f003 030f 	and.w	r3, r3, #15
 800c412:	4a7f      	ldr	r2, [pc, #508]	; (800c610 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800c414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c418:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c41a:	e34e      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 800c41c:	2300      	movs	r3, #0
 800c41e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c420:	e34b      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800c422:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c426:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800c42a:	430b      	orrs	r3, r1
 800c42c:	d147      	bne.n	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800c42e:	4b76      	ldr	r3, [pc, #472]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c434:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c438:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800c43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d103      	bne.n	800c448 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c440:	f7fd ff6a 	bl	800a318 <HAL_RCC_GetPCLK1Freq>
 800c444:	6378      	str	r0, [r7, #52]	; 0x34
 800c446:	e338      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800c448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c44e:	d103      	bne.n	800c458 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c450:	f7fd fe40 	bl	800a0d4 <HAL_RCC_GetSysClockFreq>
 800c454:	6378      	str	r0, [r7, #52]	; 0x34
 800c456:	e330      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800c458:	4b6b      	ldr	r3, [pc, #428]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c464:	d106      	bne.n	800c474 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800c466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c46c:	d102      	bne.n	800c474 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 800c46e:	4b67      	ldr	r3, [pc, #412]	; (800c60c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800c470:	637b      	str	r3, [r7, #52]	; 0x34
 800c472:	e322      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800c474:	4b64      	ldr	r3, [pc, #400]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f003 0320 	and.w	r3, r3, #32
 800c47c:	2b20      	cmp	r3, #32
 800c47e:	d11b      	bne.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 800c480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c482:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c486:	d117      	bne.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c488:	4b5f      	ldr	r3, [pc, #380]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c490:	2b00      	cmp	r3, #0
 800c492:	d005      	beq.n	800c4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 800c494:	4b5c      	ldr	r3, [pc, #368]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	0e1b      	lsrs	r3, r3, #24
 800c49a:	f003 030f 	and.w	r3, r3, #15
 800c49e:	e006      	b.n	800c4ae <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 800c4a0:	4b59      	ldr	r3, [pc, #356]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c4a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c4a6:	041b      	lsls	r3, r3, #16
 800c4a8:	0e1b      	lsrs	r3, r3, #24
 800c4aa:	f003 030f 	and.w	r3, r3, #15
 800c4ae:	4a58      	ldr	r2, [pc, #352]	; (800c610 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800c4b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4b4:	637b      	str	r3, [r7, #52]	; 0x34
 800c4b6:	e300      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	637b      	str	r3, [r7, #52]	; 0x34
 800c4bc:	e2fd      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800c4be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4c2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c4c6:	430b      	orrs	r3, r1
 800c4c8:	d15b      	bne.n	800c582 <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800c4ca:	4b4f      	ldr	r3, [pc, #316]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c4cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c4d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4d4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800c4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d117      	bne.n	800c50c <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c4dc:	4b4a      	ldr	r3, [pc, #296]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c4de:	689b      	ldr	r3, [r3, #8]
 800c4e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d005      	beq.n	800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 800c4e8:	4b47      	ldr	r3, [pc, #284]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c4ea:	689b      	ldr	r3, [r3, #8]
 800c4ec:	0e1b      	lsrs	r3, r3, #24
 800c4ee:	f003 030f 	and.w	r3, r3, #15
 800c4f2:	e006      	b.n	800c502 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 800c4f4:	4b44      	ldr	r3, [pc, #272]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c4f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c4fa:	041b      	lsls	r3, r3, #16
 800c4fc:	0e1b      	lsrs	r3, r3, #24
 800c4fe:	f003 030f 	and.w	r3, r3, #15
 800c502:	4a43      	ldr	r2, [pc, #268]	; (800c610 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800c504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c508:	637b      	str	r3, [r7, #52]	; 0x34
 800c50a:	e2d6      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800c50c:	4b3e      	ldr	r3, [pc, #248]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c50e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c512:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c516:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c51a:	d112      	bne.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 800c51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c522:	d10e      	bne.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c524:	4b38      	ldr	r3, [pc, #224]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c526:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c52a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c52e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c532:	d102      	bne.n	800c53a <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 800c534:	23fa      	movs	r3, #250	; 0xfa
 800c536:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c538:	e2bf      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800c53a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c53e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c540:	e2bb      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800c542:	4b31      	ldr	r3, [pc, #196]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c54a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c54e:	d106      	bne.n	800c55e <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 800c550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c552:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c556:	d102      	bne.n	800c55e <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 800c558:	4b2c      	ldr	r3, [pc, #176]	; (800c60c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800c55a:	637b      	str	r3, [r7, #52]	; 0x34
 800c55c:	e2ad      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800c55e:	4b2a      	ldr	r3, [pc, #168]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c560:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c564:	f003 0302 	and.w	r3, r3, #2
 800c568:	2b02      	cmp	r3, #2
 800c56a:	d107      	bne.n	800c57c <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 800c56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c56e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c572:	d103      	bne.n	800c57c <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 800c574:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c578:	637b      	str	r3, [r7, #52]	; 0x34
 800c57a:	e29e      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800c57c:	2300      	movs	r3, #0
 800c57e:	637b      	str	r3, [r7, #52]	; 0x34
 800c580:	e29b      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800c582:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c586:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c58a:	430b      	orrs	r3, r1
 800c58c:	d162      	bne.n	800c654 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800c58e:	4b1e      	ldr	r3, [pc, #120]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c590:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c594:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c598:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800c59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d117      	bne.n	800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c5a0:	4b19      	ldr	r3, [pc, #100]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c5a2:	689b      	ldr	r3, [r3, #8]
 800c5a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d005      	beq.n	800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800c5ac:	4b16      	ldr	r3, [pc, #88]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c5ae:	689b      	ldr	r3, [r3, #8]
 800c5b0:	0e1b      	lsrs	r3, r3, #24
 800c5b2:	f003 030f 	and.w	r3, r3, #15
 800c5b6:	e006      	b.n	800c5c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800c5b8:	4b13      	ldr	r3, [pc, #76]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c5ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c5be:	041b      	lsls	r3, r3, #16
 800c5c0:	0e1b      	lsrs	r3, r3, #24
 800c5c2:	f003 030f 	and.w	r3, r3, #15
 800c5c6:	4a12      	ldr	r2, [pc, #72]	; (800c610 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800c5c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5cc:	637b      	str	r3, [r7, #52]	; 0x34
 800c5ce:	e274      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800c5d0:	4b0d      	ldr	r3, [pc, #52]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c5d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c5d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5de:	d119      	bne.n	800c614 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 800c5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5e6:	d115      	bne.n	800c614 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c5e8:	4b07      	ldr	r3, [pc, #28]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800c5ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c5ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5f6:	d102      	bne.n	800c5fe <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 800c5f8:	23fa      	movs	r3, #250	; 0xfa
 800c5fa:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c5fc:	e25d      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800c5fe:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c602:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c604:	e259      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800c606:	bf00      	nop
 800c608:	46020c00 	.word	0x46020c00
 800c60c:	00f42400 	.word	0x00f42400
 800c610:	08011d34 	.word	0x08011d34
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800c614:	4b9d      	ldr	r3, [pc, #628]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c61c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c620:	d106      	bne.n	800c630 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800c622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c628:	d102      	bne.n	800c630 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 800c62a:	4b99      	ldr	r3, [pc, #612]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800c62c:	637b      	str	r3, [r7, #52]	; 0x34
 800c62e:	e244      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800c630:	4b96      	ldr	r3, [pc, #600]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800c632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c636:	f003 0302 	and.w	r3, r3, #2
 800c63a:	2b02      	cmp	r3, #2
 800c63c:	d107      	bne.n	800c64e <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 800c63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c640:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c644:	d103      	bne.n	800c64e <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 800c646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c64a:	637b      	str	r3, [r7, #52]	; 0x34
 800c64c:	e235      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800c64e:	2300      	movs	r3, #0
 800c650:	637b      	str	r3, [r7, #52]	; 0x34
 800c652:	e232      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800c654:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c658:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c65c:	430b      	orrs	r3, r1
 800c65e:	d147      	bne.n	800c6f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800c660:	4b8a      	ldr	r3, [pc, #552]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800c662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c666:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800c66a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800c66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d103      	bne.n	800c67a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c672:	f7fd fe51 	bl	800a318 <HAL_RCC_GetPCLK1Freq>
 800c676:	6378      	str	r0, [r7, #52]	; 0x34
 800c678:	e21f      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800c67a:	4b84      	ldr	r3, [pc, #528]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800c67c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c684:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c688:	d112      	bne.n	800c6b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800c68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c68c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c690:	d10e      	bne.n	800c6b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c692:	4b7e      	ldr	r3, [pc, #504]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800c694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c69c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6a0:	d102      	bne.n	800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 800c6a2:	23fa      	movs	r3, #250	; 0xfa
 800c6a4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c6a6:	e208      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800c6a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c6ac:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c6ae:	e204      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800c6b0:	4b76      	ldr	r3, [pc, #472]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6bc:	d106      	bne.n	800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 800c6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c6c4:	d102      	bne.n	800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 800c6c6:	4b72      	ldr	r3, [pc, #456]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800c6c8:	637b      	str	r3, [r7, #52]	; 0x34
 800c6ca:	e1f6      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800c6cc:	4b6f      	ldr	r3, [pc, #444]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800c6ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c6d2:	f003 0302 	and.w	r3, r3, #2
 800c6d6:	2b02      	cmp	r3, #2
 800c6d8:	d107      	bne.n	800c6ea <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800c6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6dc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c6e0:	d103      	bne.n	800c6ea <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 800c6e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c6e6:	637b      	str	r3, [r7, #52]	; 0x34
 800c6e8:	e1e7      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	637b      	str	r3, [r7, #52]	; 0x34
 800c6ee:	e1e4      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800c6f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6f4:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800c6f8:	430b      	orrs	r3, r1
 800c6fa:	d12d      	bne.n	800c758 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800c6fc:	4b63      	ldr	r3, [pc, #396]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800c6fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c702:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800c706:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800c708:	4b60      	ldr	r3, [pc, #384]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c710:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c714:	d105      	bne.n	800c722 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 800c716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d102      	bne.n	800c722 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 800c71c:	4b5c      	ldr	r3, [pc, #368]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800c71e:	637b      	str	r3, [r7, #52]	; 0x34
 800c720:	e1cb      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800c722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c728:	d107      	bne.n	800c73a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c72a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c72e:	4618      	mov	r0, r3
 800c730:	f7fe fc74 	bl	800b01c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800c734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c736:	637b      	str	r3, [r7, #52]	; 0x34
 800c738:	e1bf      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800c73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c73c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c740:	d107      	bne.n	800c752 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c742:	f107 0318 	add.w	r3, r7, #24
 800c746:	4618      	mov	r0, r3
 800c748:	f7fe fdce 	bl	800b2e8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800c74c:	69bb      	ldr	r3, [r7, #24]
 800c74e:	637b      	str	r3, [r7, #52]	; 0x34
 800c750:	e1b3      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800c752:	2300      	movs	r3, #0
 800c754:	637b      	str	r3, [r7, #52]	; 0x34
 800c756:	e1b0      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800c758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c75c:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800c760:	430b      	orrs	r3, r1
 800c762:	d14d      	bne.n	800c800 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800c764:	4b49      	ldr	r3, [pc, #292]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800c766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c76a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c76e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800c770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c772:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c776:	d028      	beq.n	800c7ca <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800c778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c77e:	d83c      	bhi.n	800c7fa <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800c780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c782:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c786:	d013      	beq.n	800c7b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 800c788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c78e:	d834      	bhi.n	800c7fa <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800c790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c792:	2b00      	cmp	r3, #0
 800c794:	d004      	beq.n	800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800c796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c798:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c79c:	d004      	beq.n	800c7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800c79e:	e02c      	b.n	800c7fa <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800c7a0:	f7fd fdce 	bl	800a340 <HAL_RCC_GetPCLK2Freq>
 800c7a4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c7a6:	e188      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c7a8:	f7fd fc94 	bl	800a0d4 <HAL_RCC_GetSysClockFreq>
 800c7ac:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c7ae:	e184      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c7b0:	4b36      	ldr	r3, [pc, #216]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c7b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7bc:	d102      	bne.n	800c7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 800c7be:	4b34      	ldr	r3, [pc, #208]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800c7c0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c7c2:	e17a      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c7c8:	e177      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c7ca:	4b30      	ldr	r3, [pc, #192]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800c7cc:	689b      	ldr	r3, [r3, #8]
 800c7ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d005      	beq.n	800c7e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 800c7d6:	4b2d      	ldr	r3, [pc, #180]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800c7d8:	689b      	ldr	r3, [r3, #8]
 800c7da:	0e1b      	lsrs	r3, r3, #24
 800c7dc:	f003 030f 	and.w	r3, r3, #15
 800c7e0:	e006      	b.n	800c7f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800c7e2:	4b2a      	ldr	r3, [pc, #168]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800c7e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c7e8:	041b      	lsls	r3, r3, #16
 800c7ea:	0e1b      	lsrs	r3, r3, #24
 800c7ec:	f003 030f 	and.w	r3, r3, #15
 800c7f0:	4a28      	ldr	r2, [pc, #160]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 800c7f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c7f8:	e15f      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c7fe:	e15c      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800c800:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c804:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800c808:	430b      	orrs	r3, r1
 800c80a:	d154      	bne.n	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800c80c:	4b1f      	ldr	r3, [pc, #124]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800c80e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c812:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c816:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800c818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c81e:	d028      	beq.n	800c872 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 800c820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c822:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c826:	d843      	bhi.n	800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800c828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c82e:	d013      	beq.n	800c858 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800c830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c832:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c836:	d83b      	bhi.n	800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800c838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d004      	beq.n	800c848 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800c83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c844:	d004      	beq.n	800c850 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800c846:	e033      	b.n	800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800c848:	f7fd fd66 	bl	800a318 <HAL_RCC_GetPCLK1Freq>
 800c84c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c84e:	e134      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c850:	f7fd fc40 	bl	800a0d4 <HAL_RCC_GetSysClockFreq>
 800c854:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c856:	e130      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c858:	4b0c      	ldr	r3, [pc, #48]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c864:	d102      	bne.n	800c86c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800c866:	4b0a      	ldr	r3, [pc, #40]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800c868:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c86a:	e126      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800c86c:	2300      	movs	r3, #0
 800c86e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c870:	e123      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c872:	4b06      	ldr	r3, [pc, #24]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800c874:	689b      	ldr	r3, [r3, #8]
 800c876:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d00c      	beq.n	800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 800c87e:	4b03      	ldr	r3, [pc, #12]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800c880:	689b      	ldr	r3, [r3, #8]
 800c882:	0e1b      	lsrs	r3, r3, #24
 800c884:	f003 030f 	and.w	r3, r3, #15
 800c888:	e00d      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 800c88a:	bf00      	nop
 800c88c:	46020c00 	.word	0x46020c00
 800c890:	00f42400 	.word	0x00f42400
 800c894:	08011d34 	.word	0x08011d34
 800c898:	4b8a      	ldr	r3, [pc, #552]	; (800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800c89a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c89e:	041b      	lsls	r3, r3, #16
 800c8a0:	0e1b      	lsrs	r3, r3, #24
 800c8a2:	f003 030f 	and.w	r3, r3, #15
 800c8a6:	4a88      	ldr	r2, [pc, #544]	; (800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800c8a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c8ae:	e104      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c8b4:	e101      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800c8b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8ba:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800c8be:	430b      	orrs	r3, r1
 800c8c0:	d16e      	bne.n	800c9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800c8c2:	4b80      	ldr	r3, [pc, #512]	; (800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800c8c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c8c8:	f003 0318 	and.w	r3, r3, #24
 800c8cc:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800c8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d0:	2b18      	cmp	r3, #24
 800c8d2:	d862      	bhi.n	800c99a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 800c8d4:	a201      	add	r2, pc, #4	; (adr r2, 800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800c8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8da:	bf00      	nop
 800c8dc:	0800c941 	.word	0x0800c941
 800c8e0:	0800c99b 	.word	0x0800c99b
 800c8e4:	0800c99b 	.word	0x0800c99b
 800c8e8:	0800c99b 	.word	0x0800c99b
 800c8ec:	0800c99b 	.word	0x0800c99b
 800c8f0:	0800c99b 	.word	0x0800c99b
 800c8f4:	0800c99b 	.word	0x0800c99b
 800c8f8:	0800c99b 	.word	0x0800c99b
 800c8fc:	0800c949 	.word	0x0800c949
 800c900:	0800c99b 	.word	0x0800c99b
 800c904:	0800c99b 	.word	0x0800c99b
 800c908:	0800c99b 	.word	0x0800c99b
 800c90c:	0800c99b 	.word	0x0800c99b
 800c910:	0800c99b 	.word	0x0800c99b
 800c914:	0800c99b 	.word	0x0800c99b
 800c918:	0800c99b 	.word	0x0800c99b
 800c91c:	0800c951 	.word	0x0800c951
 800c920:	0800c99b 	.word	0x0800c99b
 800c924:	0800c99b 	.word	0x0800c99b
 800c928:	0800c99b 	.word	0x0800c99b
 800c92c:	0800c99b 	.word	0x0800c99b
 800c930:	0800c99b 	.word	0x0800c99b
 800c934:	0800c99b 	.word	0x0800c99b
 800c938:	0800c99b 	.word	0x0800c99b
 800c93c:	0800c96b 	.word	0x0800c96b
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800c940:	f7fd fd12 	bl	800a368 <HAL_RCC_GetPCLK3Freq>
 800c944:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c946:	e0b8      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c948:	f7fd fbc4 	bl	800a0d4 <HAL_RCC_GetSysClockFreq>
 800c94c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c94e:	e0b4      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c950:	4b5c      	ldr	r3, [pc, #368]	; (800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c95c:	d102      	bne.n	800c964 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 800c95e:	4b5b      	ldr	r3, [pc, #364]	; (800cacc <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 800c960:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c962:	e0aa      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800c964:	2300      	movs	r3, #0
 800c966:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c968:	e0a7      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c96a:	4b56      	ldr	r3, [pc, #344]	; (800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800c96c:	689b      	ldr	r3, [r3, #8]
 800c96e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c972:	2b00      	cmp	r3, #0
 800c974:	d005      	beq.n	800c982 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800c976:	4b53      	ldr	r3, [pc, #332]	; (800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800c978:	689b      	ldr	r3, [r3, #8]
 800c97a:	0e1b      	lsrs	r3, r3, #24
 800c97c:	f003 030f 	and.w	r3, r3, #15
 800c980:	e006      	b.n	800c990 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 800c982:	4b50      	ldr	r3, [pc, #320]	; (800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800c984:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c988:	041b      	lsls	r3, r3, #16
 800c98a:	0e1b      	lsrs	r3, r3, #24
 800c98c:	f003 030f 	and.w	r3, r3, #15
 800c990:	4a4d      	ldr	r2, [pc, #308]	; (800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800c992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c996:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c998:	e08f      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800c99a:	2300      	movs	r3, #0
 800c99c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c99e:	e08c      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800c9a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9a4:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800c9a8:	430b      	orrs	r3, r1
 800c9aa:	d14c      	bne.n	800ca46 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800c9ac:	4b45      	ldr	r3, [pc, #276]	; (800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800c9ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c9b2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c9b6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800c9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c9be:	d013      	beq.n	800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 800c9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c9c6:	d83b      	bhi.n	800ca40 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800c9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c9ce:	d013      	beq.n	800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 800c9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c9d6:	d833      	bhi.n	800ca40 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800c9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d014      	beq.n	800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 800c9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c9e4:	d014      	beq.n	800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800c9e6:	e02b      	b.n	800ca40 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9e8:	f107 0318 	add.w	r3, r7, #24
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7fe fc7b 	bl	800b2e8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c9f2:	69fb      	ldr	r3, [r7, #28]
 800c9f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c9f6:	e060      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c9f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f7fe fb0d 	bl	800b01c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ca06:	e058      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ca08:	f7fd fb64 	bl	800a0d4 <HAL_RCC_GetSysClockFreq>
 800ca0c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ca0e:	e054      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ca10:	4b2c      	ldr	r3, [pc, #176]	; (800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d005      	beq.n	800ca28 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 800ca1c:	4b29      	ldr	r3, [pc, #164]	; (800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ca1e:	689b      	ldr	r3, [r3, #8]
 800ca20:	0e1b      	lsrs	r3, r3, #24
 800ca22:	f003 030f 	and.w	r3, r3, #15
 800ca26:	e006      	b.n	800ca36 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 800ca28:	4b26      	ldr	r3, [pc, #152]	; (800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ca2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ca2e:	041b      	lsls	r3, r3, #16
 800ca30:	0e1b      	lsrs	r3, r3, #24
 800ca32:	f003 030f 	and.w	r3, r3, #15
 800ca36:	4a24      	ldr	r2, [pc, #144]	; (800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800ca38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ca3e:	e03c      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800ca40:	2300      	movs	r3, #0
 800ca42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ca44:	e039      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800ca46:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca4a:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800ca4e:	430b      	orrs	r3, r1
 800ca50:	d131      	bne.n	800cab6 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800ca52:	4b1c      	ldr	r3, [pc, #112]	; (800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ca54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ca58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca5c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800ca5e:	4b19      	ldr	r3, [pc, #100]	; (800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ca60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca64:	f003 0302 	and.w	r3, r3, #2
 800ca68:	2b02      	cmp	r3, #2
 800ca6a:	d106      	bne.n	800ca7a <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 800ca6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d103      	bne.n	800ca7a <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 800ca72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca76:	637b      	str	r3, [r7, #52]	; 0x34
 800ca78:	e01f      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800ca7a:	4b12      	ldr	r3, [pc, #72]	; (800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ca7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca88:	d112      	bne.n	800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 800ca8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca90:	d10e      	bne.n	800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ca92:	4b0c      	ldr	r3, [pc, #48]	; (800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ca94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800caa0:	d102      	bne.n	800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 800caa2:	23fa      	movs	r3, #250	; 0xfa
 800caa4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800caa6:	e008      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800caa8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800caac:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800caae:	e004      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800cab0:	2300      	movs	r3, #0
 800cab2:	637b      	str	r3, [r7, #52]	; 0x34
 800cab4:	e001      	b.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 800cab6:	2300      	movs	r3, #0
 800cab8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800caba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3738      	adds	r7, #56	; 0x38
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	46020c00 	.word	0x46020c00
 800cac8:	08011d34 	.word	0x08011d34
 800cacc:	00f42400 	.word	0x00f42400

0800cad0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b084      	sub	sp, #16
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800cad8:	4b47      	ldr	r3, [pc, #284]	; (800cbf8 <RCCEx_PLL2_Config+0x128>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4a46      	ldr	r2, [pc, #280]	; (800cbf8 <RCCEx_PLL2_Config+0x128>)
 800cade:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cae2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cae4:	f7f8 fccc 	bl	8005480 <HAL_GetTick>
 800cae8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800caea:	e008      	b.n	800cafe <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800caec:	f7f8 fcc8 	bl	8005480 <HAL_GetTick>
 800caf0:	4602      	mov	r2, r0
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	1ad3      	subs	r3, r2, r3
 800caf6:	2b02      	cmp	r3, #2
 800caf8:	d901      	bls.n	800cafe <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800cafa:	2303      	movs	r3, #3
 800cafc:	e077      	b.n	800cbee <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cafe:	4b3e      	ldr	r3, [pc, #248]	; (800cbf8 <RCCEx_PLL2_Config+0x128>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d1f0      	bne.n	800caec <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800cb0a:	4b3b      	ldr	r3, [pc, #236]	; (800cbf8 <RCCEx_PLL2_Config+0x128>)
 800cb0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb0e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800cb12:	f023 0303 	bic.w	r3, r3, #3
 800cb16:	687a      	ldr	r2, [r7, #4]
 800cb18:	6811      	ldr	r1, [r2, #0]
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	6852      	ldr	r2, [r2, #4]
 800cb1e:	3a01      	subs	r2, #1
 800cb20:	0212      	lsls	r2, r2, #8
 800cb22:	430a      	orrs	r2, r1
 800cb24:	4934      	ldr	r1, [pc, #208]	; (800cbf8 <RCCEx_PLL2_Config+0x128>)
 800cb26:	4313      	orrs	r3, r2
 800cb28:	62cb      	str	r3, [r1, #44]	; 0x2c
 800cb2a:	4b33      	ldr	r3, [pc, #204]	; (800cbf8 <RCCEx_PLL2_Config+0x128>)
 800cb2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb2e:	4b33      	ldr	r3, [pc, #204]	; (800cbfc <RCCEx_PLL2_Config+0x12c>)
 800cb30:	4013      	ands	r3, r2
 800cb32:	687a      	ldr	r2, [r7, #4]
 800cb34:	6892      	ldr	r2, [r2, #8]
 800cb36:	3a01      	subs	r2, #1
 800cb38:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	68d2      	ldr	r2, [r2, #12]
 800cb40:	3a01      	subs	r2, #1
 800cb42:	0252      	lsls	r2, r2, #9
 800cb44:	b292      	uxth	r2, r2
 800cb46:	4311      	orrs	r1, r2
 800cb48:	687a      	ldr	r2, [r7, #4]
 800cb4a:	6912      	ldr	r2, [r2, #16]
 800cb4c:	3a01      	subs	r2, #1
 800cb4e:	0412      	lsls	r2, r2, #16
 800cb50:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800cb54:	4311      	orrs	r1, r2
 800cb56:	687a      	ldr	r2, [r7, #4]
 800cb58:	6952      	ldr	r2, [r2, #20]
 800cb5a:	3a01      	subs	r2, #1
 800cb5c:	0612      	lsls	r2, r2, #24
 800cb5e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800cb62:	430a      	orrs	r2, r1
 800cb64:	4924      	ldr	r1, [pc, #144]	; (800cbf8 <RCCEx_PLL2_Config+0x128>)
 800cb66:	4313      	orrs	r3, r2
 800cb68:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800cb6a:	4b23      	ldr	r3, [pc, #140]	; (800cbf8 <RCCEx_PLL2_Config+0x128>)
 800cb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb6e:	f023 020c 	bic.w	r2, r3, #12
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	699b      	ldr	r3, [r3, #24]
 800cb76:	4920      	ldr	r1, [pc, #128]	; (800cbf8 <RCCEx_PLL2_Config+0x128>)
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800cb7c:	4b1e      	ldr	r3, [pc, #120]	; (800cbf8 <RCCEx_PLL2_Config+0x128>)
 800cb7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6a1b      	ldr	r3, [r3, #32]
 800cb84:	491c      	ldr	r1, [pc, #112]	; (800cbf8 <RCCEx_PLL2_Config+0x128>)
 800cb86:	4313      	orrs	r3, r2
 800cb88:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800cb8a:	4b1b      	ldr	r3, [pc, #108]	; (800cbf8 <RCCEx_PLL2_Config+0x128>)
 800cb8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb8e:	4a1a      	ldr	r2, [pc, #104]	; (800cbf8 <RCCEx_PLL2_Config+0x128>)
 800cb90:	f023 0310 	bic.w	r3, r3, #16
 800cb94:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cb96:	4b18      	ldr	r3, [pc, #96]	; (800cbf8 <RCCEx_PLL2_Config+0x128>)
 800cb98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cb9e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	69d2      	ldr	r2, [r2, #28]
 800cba6:	00d2      	lsls	r2, r2, #3
 800cba8:	4913      	ldr	r1, [pc, #76]	; (800cbf8 <RCCEx_PLL2_Config+0x128>)
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800cbae:	4b12      	ldr	r3, [pc, #72]	; (800cbf8 <RCCEx_PLL2_Config+0x128>)
 800cbb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb2:	4a11      	ldr	r2, [pc, #68]	; (800cbf8 <RCCEx_PLL2_Config+0x128>)
 800cbb4:	f043 0310 	orr.w	r3, r3, #16
 800cbb8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800cbba:	4b0f      	ldr	r3, [pc, #60]	; (800cbf8 <RCCEx_PLL2_Config+0x128>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	4a0e      	ldr	r2, [pc, #56]	; (800cbf8 <RCCEx_PLL2_Config+0x128>)
 800cbc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cbc4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cbc6:	f7f8 fc5b 	bl	8005480 <HAL_GetTick>
 800cbca:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cbcc:	e008      	b.n	800cbe0 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cbce:	f7f8 fc57 	bl	8005480 <HAL_GetTick>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	1ad3      	subs	r3, r2, r3
 800cbd8:	2b02      	cmp	r3, #2
 800cbda:	d901      	bls.n	800cbe0 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800cbdc:	2303      	movs	r3, #3
 800cbde:	e006      	b.n	800cbee <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cbe0:	4b05      	ldr	r3, [pc, #20]	; (800cbf8 <RCCEx_PLL2_Config+0x128>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d0f0      	beq.n	800cbce <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800cbec:	2300      	movs	r3, #0

}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3710      	adds	r7, #16
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	46020c00 	.word	0x46020c00
 800cbfc:	80800000 	.word	0x80800000

0800cc00 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800cc08:	4b47      	ldr	r3, [pc, #284]	; (800cd28 <RCCEx_PLL3_Config+0x128>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a46      	ldr	r2, [pc, #280]	; (800cd28 <RCCEx_PLL3_Config+0x128>)
 800cc0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cc12:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cc14:	f7f8 fc34 	bl	8005480 <HAL_GetTick>
 800cc18:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cc1a:	e008      	b.n	800cc2e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cc1c:	f7f8 fc30 	bl	8005480 <HAL_GetTick>
 800cc20:	4602      	mov	r2, r0
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	1ad3      	subs	r3, r2, r3
 800cc26:	2b02      	cmp	r3, #2
 800cc28:	d901      	bls.n	800cc2e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800cc2a:	2303      	movs	r3, #3
 800cc2c:	e077      	b.n	800cd1e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cc2e:	4b3e      	ldr	r3, [pc, #248]	; (800cd28 <RCCEx_PLL3_Config+0x128>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d1f0      	bne.n	800cc1c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800cc3a:	4b3b      	ldr	r3, [pc, #236]	; (800cd28 <RCCEx_PLL3_Config+0x128>)
 800cc3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800cc42:	f023 0303 	bic.w	r3, r3, #3
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	6811      	ldr	r1, [r2, #0]
 800cc4a:	687a      	ldr	r2, [r7, #4]
 800cc4c:	6852      	ldr	r2, [r2, #4]
 800cc4e:	3a01      	subs	r2, #1
 800cc50:	0212      	lsls	r2, r2, #8
 800cc52:	430a      	orrs	r2, r1
 800cc54:	4934      	ldr	r1, [pc, #208]	; (800cd28 <RCCEx_PLL3_Config+0x128>)
 800cc56:	4313      	orrs	r3, r2
 800cc58:	630b      	str	r3, [r1, #48]	; 0x30
 800cc5a:	4b33      	ldr	r3, [pc, #204]	; (800cd28 <RCCEx_PLL3_Config+0x128>)
 800cc5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc5e:	4b33      	ldr	r3, [pc, #204]	; (800cd2c <RCCEx_PLL3_Config+0x12c>)
 800cc60:	4013      	ands	r3, r2
 800cc62:	687a      	ldr	r2, [r7, #4]
 800cc64:	6892      	ldr	r2, [r2, #8]
 800cc66:	3a01      	subs	r2, #1
 800cc68:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	68d2      	ldr	r2, [r2, #12]
 800cc70:	3a01      	subs	r2, #1
 800cc72:	0252      	lsls	r2, r2, #9
 800cc74:	b292      	uxth	r2, r2
 800cc76:	4311      	orrs	r1, r2
 800cc78:	687a      	ldr	r2, [r7, #4]
 800cc7a:	6912      	ldr	r2, [r2, #16]
 800cc7c:	3a01      	subs	r2, #1
 800cc7e:	0412      	lsls	r2, r2, #16
 800cc80:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800cc84:	4311      	orrs	r1, r2
 800cc86:	687a      	ldr	r2, [r7, #4]
 800cc88:	6952      	ldr	r2, [r2, #20]
 800cc8a:	3a01      	subs	r2, #1
 800cc8c:	0612      	lsls	r2, r2, #24
 800cc8e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800cc92:	430a      	orrs	r2, r1
 800cc94:	4924      	ldr	r1, [pc, #144]	; (800cd28 <RCCEx_PLL3_Config+0x128>)
 800cc96:	4313      	orrs	r3, r2
 800cc98:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800cc9a:	4b23      	ldr	r3, [pc, #140]	; (800cd28 <RCCEx_PLL3_Config+0x128>)
 800cc9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc9e:	f023 020c 	bic.w	r2, r3, #12
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	699b      	ldr	r3, [r3, #24]
 800cca6:	4920      	ldr	r1, [pc, #128]	; (800cd28 <RCCEx_PLL3_Config+0x128>)
 800cca8:	4313      	orrs	r3, r2
 800ccaa:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800ccac:	4b1e      	ldr	r3, [pc, #120]	; (800cd28 <RCCEx_PLL3_Config+0x128>)
 800ccae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6a1b      	ldr	r3, [r3, #32]
 800ccb4:	491c      	ldr	r1, [pc, #112]	; (800cd28 <RCCEx_PLL3_Config+0x128>)
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800ccba:	4b1b      	ldr	r3, [pc, #108]	; (800cd28 <RCCEx_PLL3_Config+0x128>)
 800ccbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccbe:	4a1a      	ldr	r2, [pc, #104]	; (800cd28 <RCCEx_PLL3_Config+0x128>)
 800ccc0:	f023 0310 	bic.w	r3, r3, #16
 800ccc4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ccc6:	4b18      	ldr	r3, [pc, #96]	; (800cd28 <RCCEx_PLL3_Config+0x128>)
 800ccc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ccca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ccce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	69d2      	ldr	r2, [r2, #28]
 800ccd6:	00d2      	lsls	r2, r2, #3
 800ccd8:	4913      	ldr	r1, [pc, #76]	; (800cd28 <RCCEx_PLL3_Config+0x128>)
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800ccde:	4b12      	ldr	r3, [pc, #72]	; (800cd28 <RCCEx_PLL3_Config+0x128>)
 800cce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cce2:	4a11      	ldr	r2, [pc, #68]	; (800cd28 <RCCEx_PLL3_Config+0x128>)
 800cce4:	f043 0310 	orr.w	r3, r3, #16
 800cce8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800ccea:	4b0f      	ldr	r3, [pc, #60]	; (800cd28 <RCCEx_PLL3_Config+0x128>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	4a0e      	ldr	r2, [pc, #56]	; (800cd28 <RCCEx_PLL3_Config+0x128>)
 800ccf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccf4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ccf6:	f7f8 fbc3 	bl	8005480 <HAL_GetTick>
 800ccfa:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ccfc:	e008      	b.n	800cd10 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ccfe:	f7f8 fbbf 	bl	8005480 <HAL_GetTick>
 800cd02:	4602      	mov	r2, r0
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	1ad3      	subs	r3, r2, r3
 800cd08:	2b02      	cmp	r3, #2
 800cd0a:	d901      	bls.n	800cd10 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800cd0c:	2303      	movs	r3, #3
 800cd0e:	e006      	b.n	800cd1e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cd10:	4b05      	ldr	r3, [pc, #20]	; (800cd28 <RCCEx_PLL3_Config+0x128>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d0f0      	beq.n	800ccfe <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800cd1c:	2300      	movs	r3, #0
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3710      	adds	r7, #16
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	46020c00 	.word	0x46020c00
 800cd2c:	80800000 	.word	0x80800000

0800cd30 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cd38:	2301      	movs	r3, #1
 800cd3a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d068      	beq.n	800ce14 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d106      	bne.n	800cd5c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2200      	movs	r2, #0
 800cd52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f7f7 fe66 	bl	8004a28 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2202      	movs	r2, #2
 800cd60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cd64:	4b2e      	ldr	r3, [pc, #184]	; (800ce20 <HAL_RTC_Init+0xf0>)
 800cd66:	22ca      	movs	r2, #202	; 0xca
 800cd68:	625a      	str	r2, [r3, #36]	; 0x24
 800cd6a:	4b2d      	ldr	r3, [pc, #180]	; (800ce20 <HAL_RTC_Init+0xf0>)
 800cd6c:	2253      	movs	r2, #83	; 0x53
 800cd6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f000 fa4f 	bl	800d214 <RTC_EnterInitMode>
 800cd76:	4603      	mov	r3, r0
 800cd78:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800cd7a:	7bfb      	ldrb	r3, [r7, #15]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d13f      	bne.n	800ce00 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800cd80:	4b27      	ldr	r3, [pc, #156]	; (800ce20 <HAL_RTC_Init+0xf0>)
 800cd82:	699b      	ldr	r3, [r3, #24]
 800cd84:	4a26      	ldr	r2, [pc, #152]	; (800ce20 <HAL_RTC_Init+0xf0>)
 800cd86:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800cd8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd8e:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800cd90:	4b23      	ldr	r3, [pc, #140]	; (800ce20 <HAL_RTC_Init+0xf0>)
 800cd92:	699a      	ldr	r2, [r3, #24]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6859      	ldr	r1, [r3, #4]
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	691b      	ldr	r3, [r3, #16]
 800cd9c:	4319      	orrs	r1, r3
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	699b      	ldr	r3, [r3, #24]
 800cda2:	430b      	orrs	r3, r1
 800cda4:	491e      	ldr	r1, [pc, #120]	; (800ce20 <HAL_RTC_Init+0xf0>)
 800cda6:	4313      	orrs	r3, r2
 800cda8:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	68da      	ldr	r2, [r3, #12]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	689b      	ldr	r3, [r3, #8]
 800cdb2:	041b      	lsls	r3, r3, #16
 800cdb4:	491a      	ldr	r1, [pc, #104]	; (800ce20 <HAL_RTC_Init+0xf0>)
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800cdba:	4b19      	ldr	r3, [pc, #100]	; (800ce20 <HAL_RTC_Init+0xf0>)
 800cdbc:	68db      	ldr	r3, [r3, #12]
 800cdbe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdca:	430b      	orrs	r3, r1
 800cdcc:	4914      	ldr	r1, [pc, #80]	; (800ce20 <HAL_RTC_Init+0xf0>)
 800cdce:	4313      	orrs	r3, r2
 800cdd0:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f000 fa52 	bl	800d27c <RTC_ExitInitMode>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800cddc:	7bfb      	ldrb	r3, [r7, #15]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d10e      	bne.n	800ce00 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 800cde2:	4b0f      	ldr	r3, [pc, #60]	; (800ce20 <HAL_RTC_Init+0xf0>)
 800cde4:	699b      	ldr	r3, [r3, #24]
 800cde6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6a19      	ldr	r1, [r3, #32]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	69db      	ldr	r3, [r3, #28]
 800cdf2:	4319      	orrs	r1, r3
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	695b      	ldr	r3, [r3, #20]
 800cdf8:	430b      	orrs	r3, r1
 800cdfa:	4909      	ldr	r1, [pc, #36]	; (800ce20 <HAL_RTC_Init+0xf0>)
 800cdfc:	4313      	orrs	r3, r2
 800cdfe:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce00:	4b07      	ldr	r3, [pc, #28]	; (800ce20 <HAL_RTC_Init+0xf0>)
 800ce02:	22ff      	movs	r2, #255	; 0xff
 800ce04:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800ce06:	7bfb      	ldrb	r3, [r7, #15]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d103      	bne.n	800ce14 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2201      	movs	r2, #1
 800ce10:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800ce14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3710      	adds	r7, #16
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	46007800 	.word	0x46007800

0800ce24 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ce24:	b590      	push	{r4, r7, lr}
 800ce26:	b087      	sub	sp, #28
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ce36:	2b01      	cmp	r3, #1
 800ce38:	d101      	bne.n	800ce3e <HAL_RTC_SetTime+0x1a>
 800ce3a:	2302      	movs	r3, #2
 800ce3c:	e088      	b.n	800cf50 <HAL_RTC_SetTime+0x12c>
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2201      	movs	r2, #1
 800ce42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	2202      	movs	r2, #2
 800ce4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ce4e:	4b42      	ldr	r3, [pc, #264]	; (800cf58 <HAL_RTC_SetTime+0x134>)
 800ce50:	22ca      	movs	r2, #202	; 0xca
 800ce52:	625a      	str	r2, [r3, #36]	; 0x24
 800ce54:	4b40      	ldr	r3, [pc, #256]	; (800cf58 <HAL_RTC_SetTime+0x134>)
 800ce56:	2253      	movs	r2, #83	; 0x53
 800ce58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ce5a:	68f8      	ldr	r0, [r7, #12]
 800ce5c:	f000 f9da 	bl	800d214 <RTC_EnterInitMode>
 800ce60:	4603      	mov	r3, r0
 800ce62:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800ce64:	7cfb      	ldrb	r3, [r7, #19]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d163      	bne.n	800cf32 <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800ce6a:	4b3b      	ldr	r3, [pc, #236]	; (800cf58 <HAL_RTC_SetTime+0x134>)
 800ce6c:	68db      	ldr	r3, [r3, #12]
 800ce6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce76:	d057      	beq.n	800cf28 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d125      	bne.n	800ceca <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800ce7e:	4b36      	ldr	r3, [pc, #216]	; (800cf58 <HAL_RTC_SetTime+0x134>)
 800ce80:	699b      	ldr	r3, [r3, #24]
 800ce82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d102      	bne.n	800ce90 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	781b      	ldrb	r3, [r3, #0]
 800ce94:	4618      	mov	r0, r3
 800ce96:	f000 fa2f 	bl	800d2f8 <RTC_ByteToBcd2>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	785b      	ldrb	r3, [r3, #1]
 800cea2:	4618      	mov	r0, r3
 800cea4:	f000 fa28 	bl	800d2f8 <RTC_ByteToBcd2>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ceac:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	789b      	ldrb	r3, [r3, #2]
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f000 fa20 	bl	800d2f8 <RTC_ByteToBcd2>
 800ceb8:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ceba:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	78db      	ldrb	r3, [r3, #3]
 800cec2:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800cec4:	4313      	orrs	r3, r2
 800cec6:	617b      	str	r3, [r7, #20]
 800cec8:	e017      	b.n	800cefa <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800ceca:	4b23      	ldr	r3, [pc, #140]	; (800cf58 <HAL_RTC_SetTime+0x134>)
 800cecc:	699b      	ldr	r3, [r3, #24]
 800cece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d102      	bne.n	800cedc <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	2200      	movs	r2, #0
 800ceda:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	785b      	ldrb	r3, [r3, #1]
 800cee6:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800cee8:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800ceea:	68ba      	ldr	r2, [r7, #8]
 800ceec:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ceee:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	78db      	ldrb	r3, [r3, #3]
 800cef4:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800cef6:	4313      	orrs	r3, r2
 800cef8:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800cefa:	4a17      	ldr	r2, [pc, #92]	; (800cf58 <HAL_RTC_SetTime+0x134>)
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800cf02:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800cf06:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800cf08:	4b13      	ldr	r3, [pc, #76]	; (800cf58 <HAL_RTC_SetTime+0x134>)
 800cf0a:	699b      	ldr	r3, [r3, #24]
 800cf0c:	4a12      	ldr	r2, [pc, #72]	; (800cf58 <HAL_RTC_SetTime+0x134>)
 800cf0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cf12:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800cf14:	4b10      	ldr	r3, [pc, #64]	; (800cf58 <HAL_RTC_SetTime+0x134>)
 800cf16:	699a      	ldr	r2, [r3, #24]
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	68d9      	ldr	r1, [r3, #12]
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	691b      	ldr	r3, [r3, #16]
 800cf20:	430b      	orrs	r3, r1
 800cf22:	490d      	ldr	r1, [pc, #52]	; (800cf58 <HAL_RTC_SetTime+0x134>)
 800cf24:	4313      	orrs	r3, r2
 800cf26:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cf28:	68f8      	ldr	r0, [r7, #12]
 800cf2a:	f000 f9a7 	bl	800d27c <RTC_ExitInitMode>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cf32:	4b09      	ldr	r3, [pc, #36]	; (800cf58 <HAL_RTC_SetTime+0x134>)
 800cf34:	22ff      	movs	r2, #255	; 0xff
 800cf36:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800cf38:	7cfb      	ldrb	r3, [r7, #19]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d103      	bne.n	800cf46 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2201      	movs	r2, #1
 800cf42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800cf4e:	7cfb      	ldrb	r3, [r7, #19]
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	371c      	adds	r7, #28
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd90      	pop	{r4, r7, pc}
 800cf58:	46007800 	.word	0x46007800

0800cf5c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b086      	sub	sp, #24
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800cf68:	4b2c      	ldr	r3, [pc, #176]	; (800d01c <HAL_RTC_GetTime+0xc0>)
 800cf6a:	689a      	ldr	r2, [r3, #8]
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800cf70:	4b2a      	ldr	r3, [pc, #168]	; (800d01c <HAL_RTC_GetTime+0xc0>)
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf7c:	d049      	beq.n	800d012 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800cf7e:	4b27      	ldr	r3, [pc, #156]	; (800d01c <HAL_RTC_GetTime+0xc0>)
 800cf80:	691b      	ldr	r3, [r3, #16]
 800cf82:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800cf8a:	4b24      	ldr	r3, [pc, #144]	; (800d01c <HAL_RTC_GetTime+0xc0>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800cf92:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800cf96:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	0c1b      	lsrs	r3, r3, #16
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cfa2:	b2da      	uxtb	r2, r3
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	0a1b      	lsrs	r3, r3, #8
 800cfac:	b2db      	uxtb	r3, r3
 800cfae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfb2:	b2da      	uxtb	r2, r3
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfc0:	b2da      	uxtb	r2, r3
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	0d9b      	lsrs	r3, r3, #22
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	f003 0301 	and.w	r3, r3, #1
 800cfd0:	b2da      	uxtb	r2, r3
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d11a      	bne.n	800d012 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f000 f9a9 	bl	800d338 <RTC_Bcd2ToByte>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	461a      	mov	r2, r3
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	785b      	ldrb	r3, [r3, #1]
 800cff2:	4618      	mov	r0, r3
 800cff4:	f000 f9a0 	bl	800d338 <RTC_Bcd2ToByte>
 800cff8:	4603      	mov	r3, r0
 800cffa:	461a      	mov	r2, r3
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	789b      	ldrb	r3, [r3, #2]
 800d004:	4618      	mov	r0, r3
 800d006:	f000 f997 	bl	800d338 <RTC_Bcd2ToByte>
 800d00a:	4603      	mov	r3, r0
 800d00c:	461a      	mov	r2, r3
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 800d012:	2300      	movs	r3, #0
}
 800d014:	4618      	mov	r0, r3
 800d016:	3718      	adds	r7, #24
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}
 800d01c:	46007800 	.word	0x46007800

0800d020 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d020:	b590      	push	{r4, r7, lr}
 800d022:	b087      	sub	sp, #28
 800d024:	af00      	add	r7, sp, #0
 800d026:	60f8      	str	r0, [r7, #12]
 800d028:	60b9      	str	r1, [r7, #8]
 800d02a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d032:	2b01      	cmp	r3, #1
 800d034:	d101      	bne.n	800d03a <HAL_RTC_SetDate+0x1a>
 800d036:	2302      	movs	r3, #2
 800d038:	e071      	b.n	800d11e <HAL_RTC_SetDate+0xfe>
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2201      	movs	r2, #1
 800d03e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	2202      	movs	r2, #2
 800d046:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d10e      	bne.n	800d06e <HAL_RTC_SetDate+0x4e>
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	785b      	ldrb	r3, [r3, #1]
 800d054:	f003 0310 	and.w	r3, r3, #16
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d008      	beq.n	800d06e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	785b      	ldrb	r3, [r3, #1]
 800d060:	f023 0310 	bic.w	r3, r3, #16
 800d064:	b2db      	uxtb	r3, r3
 800d066:	330a      	adds	r3, #10
 800d068:	b2da      	uxtb	r2, r3
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d11c      	bne.n	800d0ae <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	78db      	ldrb	r3, [r3, #3]
 800d078:	4618      	mov	r0, r3
 800d07a:	f000 f93d 	bl	800d2f8 <RTC_ByteToBcd2>
 800d07e:	4603      	mov	r3, r0
 800d080:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	785b      	ldrb	r3, [r3, #1]
 800d086:	4618      	mov	r0, r3
 800d088:	f000 f936 	bl	800d2f8 <RTC_ByteToBcd2>
 800d08c:	4603      	mov	r3, r0
 800d08e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800d090:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	789b      	ldrb	r3, [r3, #2]
 800d096:	4618      	mov	r0, r3
 800d098:	f000 f92e 	bl	800d2f8 <RTC_ByteToBcd2>
 800d09c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d09e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800d0a8:	4313      	orrs	r3, r2
 800d0aa:	617b      	str	r3, [r7, #20]
 800d0ac:	e00e      	b.n	800d0cc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	78db      	ldrb	r3, [r3, #3]
 800d0b2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	785b      	ldrb	r3, [r3, #1]
 800d0b8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800d0ba:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800d0bc:	68ba      	ldr	r2, [r7, #8]
 800d0be:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800d0c0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	781b      	ldrb	r3, [r3, #0]
 800d0c6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800d0c8:	4313      	orrs	r3, r2
 800d0ca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d0cc:	4b16      	ldr	r3, [pc, #88]	; (800d128 <HAL_RTC_SetDate+0x108>)
 800d0ce:	22ca      	movs	r2, #202	; 0xca
 800d0d0:	625a      	str	r2, [r3, #36]	; 0x24
 800d0d2:	4b15      	ldr	r3, [pc, #84]	; (800d128 <HAL_RTC_SetDate+0x108>)
 800d0d4:	2253      	movs	r2, #83	; 0x53
 800d0d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d0d8:	68f8      	ldr	r0, [r7, #12]
 800d0da:	f000 f89b 	bl	800d214 <RTC_EnterInitMode>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d0e2:	7cfb      	ldrb	r3, [r7, #19]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d10b      	bne.n	800d100 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800d0e8:	4a0f      	ldr	r2, [pc, #60]	; (800d128 <HAL_RTC_SetDate+0x108>)
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d0f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d0f4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d0f6:	68f8      	ldr	r0, [r7, #12]
 800d0f8:	f000 f8c0 	bl	800d27c <RTC_ExitInitMode>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d100:	4b09      	ldr	r3, [pc, #36]	; (800d128 <HAL_RTC_SetDate+0x108>)
 800d102:	22ff      	movs	r2, #255	; 0xff
 800d104:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d106:	7cfb      	ldrb	r3, [r7, #19]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d103      	bne.n	800d114 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2201      	movs	r2, #1
 800d110:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	2200      	movs	r2, #0
 800d118:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800d11c:	7cfb      	ldrb	r3, [r7, #19]
}
 800d11e:	4618      	mov	r0, r3
 800d120:	371c      	adds	r7, #28
 800d122:	46bd      	mov	sp, r7
 800d124:	bd90      	pop	{r4, r7, pc}
 800d126:	bf00      	nop
 800d128:	46007800 	.word	0x46007800

0800d12c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b086      	sub	sp, #24
 800d130:	af00      	add	r7, sp, #0
 800d132:	60f8      	str	r0, [r7, #12]
 800d134:	60b9      	str	r1, [r7, #8]
 800d136:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800d138:	4b22      	ldr	r3, [pc, #136]	; (800d1c4 <HAL_RTC_GetDate+0x98>)
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d140:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d144:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	0c1b      	lsrs	r3, r3, #16
 800d14a:	b2da      	uxtb	r2, r3
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	0a1b      	lsrs	r3, r3, #8
 800d154:	b2db      	uxtb	r3, r3
 800d156:	f003 031f 	and.w	r3, r3, #31
 800d15a:	b2da      	uxtb	r2, r3
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	b2db      	uxtb	r3, r3
 800d164:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d168:	b2da      	uxtb	r2, r3
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	0b5b      	lsrs	r3, r3, #13
 800d172:	b2db      	uxtb	r3, r3
 800d174:	f003 0307 	and.w	r3, r3, #7
 800d178:	b2da      	uxtb	r2, r3
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d11a      	bne.n	800d1ba <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	78db      	ldrb	r3, [r3, #3]
 800d188:	4618      	mov	r0, r3
 800d18a:	f000 f8d5 	bl	800d338 <RTC_Bcd2ToByte>
 800d18e:	4603      	mov	r3, r0
 800d190:	461a      	mov	r2, r3
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	785b      	ldrb	r3, [r3, #1]
 800d19a:	4618      	mov	r0, r3
 800d19c:	f000 f8cc 	bl	800d338 <RTC_Bcd2ToByte>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	789b      	ldrb	r3, [r3, #2]
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f000 f8c3 	bl	800d338 <RTC_Bcd2ToByte>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d1ba:	2300      	movs	r3, #0
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3718      	adds	r7, #24
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}
 800d1c4:	46007800 	.word	0x46007800

0800d1c8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800d1d0:	4b0f      	ldr	r3, [pc, #60]	; (800d210 <HAL_RTC_WaitForSynchro+0x48>)
 800d1d2:	68db      	ldr	r3, [r3, #12]
 800d1d4:	4a0e      	ldr	r2, [pc, #56]	; (800d210 <HAL_RTC_WaitForSynchro+0x48>)
 800d1d6:	f023 0320 	bic.w	r3, r3, #32
 800d1da:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800d1dc:	f7f8 f950 	bl	8005480 <HAL_GetTick>
 800d1e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800d1e2:	e009      	b.n	800d1f8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d1e4:	f7f8 f94c 	bl	8005480 <HAL_GetTick>
 800d1e8:	4602      	mov	r2, r0
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	1ad3      	subs	r3, r2, r3
 800d1ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d1f2:	d901      	bls.n	800d1f8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800d1f4:	2303      	movs	r3, #3
 800d1f6:	e006      	b.n	800d206 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800d1f8:	4b05      	ldr	r3, [pc, #20]	; (800d210 <HAL_RTC_WaitForSynchro+0x48>)
 800d1fa:	68db      	ldr	r3, [r3, #12]
 800d1fc:	f003 0320 	and.w	r3, r3, #32
 800d200:	2b00      	cmp	r3, #0
 800d202:	d0ef      	beq.n	800d1e4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800d204:	2300      	movs	r3, #0
}
 800d206:	4618      	mov	r0, r3
 800d208:	3710      	adds	r7, #16
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	46007800 	.word	0x46007800

0800d214 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b084      	sub	sp, #16
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d21c:	2300      	movs	r3, #0
 800d21e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800d220:	4b15      	ldr	r3, [pc, #84]	; (800d278 <RTC_EnterInitMode+0x64>)
 800d222:	68db      	ldr	r3, [r3, #12]
 800d224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d120      	bne.n	800d26e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800d22c:	4b12      	ldr	r3, [pc, #72]	; (800d278 <RTC_EnterInitMode+0x64>)
 800d22e:	68db      	ldr	r3, [r3, #12]
 800d230:	4a11      	ldr	r2, [pc, #68]	; (800d278 <RTC_EnterInitMode+0x64>)
 800d232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d236:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800d238:	f7f8 f922 	bl	8005480 <HAL_GetTick>
 800d23c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d23e:	e00d      	b.n	800d25c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d240:	f7f8 f91e 	bl	8005480 <HAL_GetTick>
 800d244:	4602      	mov	r2, r0
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	1ad3      	subs	r3, r2, r3
 800d24a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d24e:	d905      	bls.n	800d25c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800d250:	2303      	movs	r3, #3
 800d252:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2203      	movs	r2, #3
 800d258:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d25c:	4b06      	ldr	r3, [pc, #24]	; (800d278 <RTC_EnterInitMode+0x64>)
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d264:	2b00      	cmp	r3, #0
 800d266:	d102      	bne.n	800d26e <RTC_EnterInitMode+0x5a>
 800d268:	7bfb      	ldrb	r3, [r7, #15]
 800d26a:	2b03      	cmp	r3, #3
 800d26c:	d1e8      	bne.n	800d240 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800d26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d270:	4618      	mov	r0, r3
 800d272:	3710      	adds	r7, #16
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}
 800d278:	46007800 	.word	0x46007800

0800d27c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b084      	sub	sp, #16
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d284:	2300      	movs	r3, #0
 800d286:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800d288:	4b1a      	ldr	r3, [pc, #104]	; (800d2f4 <RTC_ExitInitMode+0x78>)
 800d28a:	68db      	ldr	r3, [r3, #12]
 800d28c:	4a19      	ldr	r2, [pc, #100]	; (800d2f4 <RTC_ExitInitMode+0x78>)
 800d28e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d292:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d294:	4b17      	ldr	r3, [pc, #92]	; (800d2f4 <RTC_ExitInitMode+0x78>)
 800d296:	699b      	ldr	r3, [r3, #24]
 800d298:	f003 0320 	and.w	r3, r3, #32
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d10c      	bne.n	800d2ba <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f7ff ff91 	bl	800d1c8 <HAL_RTC_WaitForSynchro>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d01e      	beq.n	800d2ea <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2203      	movs	r2, #3
 800d2b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800d2b4:	2303      	movs	r3, #3
 800d2b6:	73fb      	strb	r3, [r7, #15]
 800d2b8:	e017      	b.n	800d2ea <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d2ba:	4b0e      	ldr	r3, [pc, #56]	; (800d2f4 <RTC_ExitInitMode+0x78>)
 800d2bc:	699b      	ldr	r3, [r3, #24]
 800d2be:	4a0d      	ldr	r2, [pc, #52]	; (800d2f4 <RTC_ExitInitMode+0x78>)
 800d2c0:	f023 0320 	bic.w	r3, r3, #32
 800d2c4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f7ff ff7e 	bl	800d1c8 <HAL_RTC_WaitForSynchro>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d005      	beq.n	800d2de <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2203      	movs	r2, #3
 800d2d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800d2da:	2303      	movs	r3, #3
 800d2dc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d2de:	4b05      	ldr	r3, [pc, #20]	; (800d2f4 <RTC_ExitInitMode+0x78>)
 800d2e0:	699b      	ldr	r3, [r3, #24]
 800d2e2:	4a04      	ldr	r2, [pc, #16]	; (800d2f4 <RTC_ExitInitMode+0x78>)
 800d2e4:	f043 0320 	orr.w	r3, r3, #32
 800d2e8:	6193      	str	r3, [r2, #24]
  }
  return status;
 800d2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3710      	adds	r7, #16
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	46007800 	.word	0x46007800

0800d2f8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b085      	sub	sp, #20
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	4603      	mov	r3, r0
 800d300:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d302:	2300      	movs	r3, #0
 800d304:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800d306:	79fb      	ldrb	r3, [r7, #7]
 800d308:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800d30a:	e005      	b.n	800d318 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	3301      	adds	r3, #1
 800d310:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800d312:	7afb      	ldrb	r3, [r7, #11]
 800d314:	3b0a      	subs	r3, #10
 800d316:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800d318:	7afb      	ldrb	r3, [r7, #11]
 800d31a:	2b09      	cmp	r3, #9
 800d31c:	d8f6      	bhi.n	800d30c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	b2db      	uxtb	r3, r3
 800d322:	011b      	lsls	r3, r3, #4
 800d324:	b2da      	uxtb	r2, r3
 800d326:	7afb      	ldrb	r3, [r7, #11]
 800d328:	4313      	orrs	r3, r2
 800d32a:	b2db      	uxtb	r3, r3
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3714      	adds	r7, #20
 800d330:	46bd      	mov	sp, r7
 800d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d336:	4770      	bx	lr

0800d338 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800d338:	b480      	push	{r7}
 800d33a:	b085      	sub	sp, #20
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	4603      	mov	r3, r0
 800d340:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 800d342:	79fb      	ldrb	r3, [r7, #7]
 800d344:	091b      	lsrs	r3, r3, #4
 800d346:	b2db      	uxtb	r3, r3
 800d348:	461a      	mov	r2, r3
 800d34a:	4613      	mov	r3, r2
 800d34c:	009b      	lsls	r3, r3, #2
 800d34e:	4413      	add	r3, r2
 800d350:	005b      	lsls	r3, r3, #1
 800d352:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	b2da      	uxtb	r2, r3
 800d358:	79fb      	ldrb	r3, [r7, #7]
 800d35a:	f003 030f 	and.w	r3, r3, #15
 800d35e:	b2db      	uxtb	r3, r3
 800d360:	4413      	add	r3, r2
 800d362:	b2db      	uxtb	r3, r3
}
 800d364:	4618      	mov	r0, r3
 800d366:	3714      	adds	r7, #20
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr

0800d370 <HAL_RTCEx_SetTimeStamp_IT>:
  *               The RTC TimeStamp Pin is per default PC13, but for reasons of
  *               compatibility, this parameter is required.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp_IT(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800d370:	b480      	push	{r7}
 800d372:	b085      	sub	sp, #20
 800d374:	af00      	add	r7, sp, #0
 800d376:	60f8      	str	r0, [r7, #12]
 800d378:	60b9      	str	r1, [r7, #8]
 800d37a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  UNUSED(RTC_TimeStampPin);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d382:	2b01      	cmp	r3, #1
 800d384:	d101      	bne.n	800d38a <HAL_RTCEx_SetTimeStamp_IT+0x1a>
 800d386:	2302      	movs	r3, #2
 800d388:	e02d      	b.n	800d3e6 <HAL_RTCEx_SetTimeStamp_IT+0x76>
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	2201      	movs	r2, #1
 800d38e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2202      	movs	r2, #2
 800d396:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Get the RTC_CR register and clear the bits to be configured */
  CLEAR_BIT(RTC->CR, (RTC_CR_TSEDGE | RTC_CR_TSE));
 800d39a:	4b16      	ldr	r3, [pc, #88]	; (800d3f4 <HAL_RTCEx_SetTimeStamp_IT+0x84>)
 800d39c:	699b      	ldr	r3, [r3, #24]
 800d39e:	4a15      	ldr	r2, [pc, #84]	; (800d3f4 <HAL_RTCEx_SetTimeStamp_IT+0x84>)
 800d3a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d3a4:	f023 0308 	bic.w	r3, r3, #8
 800d3a8:	6193      	str	r3, [r2, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d3aa:	4b12      	ldr	r3, [pc, #72]	; (800d3f4 <HAL_RTCEx_SetTimeStamp_IT+0x84>)
 800d3ac:	22ca      	movs	r2, #202	; 0xca
 800d3ae:	625a      	str	r2, [r3, #36]	; 0x24
 800d3b0:	4b10      	ldr	r3, [pc, #64]	; (800d3f4 <HAL_RTCEx_SetTimeStamp_IT+0x84>)
 800d3b2:	2253      	movs	r2, #83	; 0x53
 800d3b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE before Enable bit to avoid unwanted TSF setting. */
  SET_BIT(RTC->CR, (uint32_t)TimeStampEdge);
 800d3b6:	4b0f      	ldr	r3, [pc, #60]	; (800d3f4 <HAL_RTCEx_SetTimeStamp_IT+0x84>)
 800d3b8:	699a      	ldr	r2, [r3, #24]
 800d3ba:	490e      	ldr	r1, [pc, #56]	; (800d3f4 <HAL_RTCEx_SetTimeStamp_IT+0x84>)
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	618b      	str	r3, [r1, #24]

  /* Enable timestamp and IT */
  SET_BIT(RTC->CR, RTC_CR_TSE | RTC_CR_TSIE);
 800d3c2:	4b0c      	ldr	r3, [pc, #48]	; (800d3f4 <HAL_RTCEx_SetTimeStamp_IT+0x84>)
 800d3c4:	699b      	ldr	r3, [r3, #24]
 800d3c6:	4a0b      	ldr	r2, [pc, #44]	; (800d3f4 <HAL_RTCEx_SetTimeStamp_IT+0x84>)
 800d3c8:	f443 4308 	orr.w	r3, r3, #34816	; 0x8800
 800d3cc:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d3ce:	4b09      	ldr	r3, [pc, #36]	; (800d3f4 <HAL_RTCEx_SetTimeStamp_IT+0x84>)
 800d3d0:	22ff      	movs	r2, #255	; 0xff
 800d3d2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2201      	movs	r2, #1
 800d3d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d3e4:	2300      	movs	r3, #0
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3714      	adds	r7, #20
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr
 800d3f2:	bf00      	nop
 800d3f4:	46007800 	.word	0x46007800

0800d3f8 <HAL_RTCEx_GetTimeStamp>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_GetTimeStamp(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTimeStamp,
                                         RTC_DateTypeDef *sTimeStampDate, uint32_t Format)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b086      	sub	sp, #24
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	60f8      	str	r0, [r7, #12]
 800d400:	60b9      	str	r1, [r7, #8]
 800d402:	607a      	str	r2, [r7, #4]
 800d404:	603b      	str	r3, [r7, #0]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the TimeStamp time and date registers values */
  tmptime = READ_BIT(RTC->TSTR, RTC_TR_RESERVED_MASK);
 800d406:	4b46      	ldr	r3, [pc, #280]	; (800d520 <HAL_RTCEx_GetTimeStamp+0x128>)
 800d408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d40a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d40e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d412:	617b      	str	r3, [r7, #20]
  tmpdate = READ_BIT(RTC->TSDR, RTC_DR_RESERVED_MASK);
 800d414:	4b42      	ldr	r3, [pc, #264]	; (800d520 <HAL_RTCEx_GetTimeStamp+0x128>)
 800d416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d418:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d41c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d420:	613b      	str	r3, [r7, #16]

  /* Fill the Time structure fields with the read parameters */
  sTimeStamp->Hours = (uint8_t)((tmptime & (RTC_TSTR_HT | RTC_TSTR_HU)) >> RTC_TSTR_HU_Pos);
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	0c1b      	lsrs	r3, r3, #16
 800d426:	b2db      	uxtb	r3, r3
 800d428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d42c:	b2da      	uxtb	r2, r3
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	701a      	strb	r2, [r3, #0]
  sTimeStamp->Minutes = (uint8_t)((tmptime & (RTC_TSTR_MNT | RTC_TSTR_MNU)) >> RTC_TSTR_MNU_Pos);
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	0a1b      	lsrs	r3, r3, #8
 800d436:	b2db      	uxtb	r3, r3
 800d438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d43c:	b2da      	uxtb	r2, r3
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	705a      	strb	r2, [r3, #1]
  sTimeStamp->Seconds = (uint8_t)((tmptime & (RTC_TSTR_ST | RTC_TSTR_SU)) >> RTC_TSTR_SU_Pos);
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	b2db      	uxtb	r3, r3
 800d446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d44a:	b2da      	uxtb	r2, r3
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	709a      	strb	r2, [r3, #2]
  sTimeStamp->TimeFormat = (uint8_t)((tmptime & (RTC_TSTR_PM)) >> RTC_TSTR_PM_Pos);
 800d450:	697b      	ldr	r3, [r7, #20]
 800d452:	0d9b      	lsrs	r3, r3, #22
 800d454:	b2db      	uxtb	r3, r3
 800d456:	f003 0301 	and.w	r3, r3, #1
 800d45a:	b2da      	uxtb	r2, r3
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	70da      	strb	r2, [r3, #3]
  sTimeStamp->SubSeconds = READ_BIT(RTC->TSSSR, RTC_TSSSR_SS);
 800d460:	4b2f      	ldr	r3, [pc, #188]	; (800d520 <HAL_RTCEx_GetTimeStamp+0x128>)
 800d462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	605a      	str	r2, [r3, #4]

  /* Fill the Date structure fields with the read parameters */
  sTimeStampDate->Year = 0U;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2200      	movs	r2, #0
 800d46c:	70da      	strb	r2, [r3, #3]
  sTimeStampDate->Month = (uint8_t)((tmpdate & (RTC_TSDR_MT | RTC_TSDR_MU)) >> RTC_TSDR_MU_Pos);
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	0a1b      	lsrs	r3, r3, #8
 800d472:	b2db      	uxtb	r3, r3
 800d474:	f003 031f 	and.w	r3, r3, #31
 800d478:	b2da      	uxtb	r2, r3
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	705a      	strb	r2, [r3, #1]
  sTimeStampDate->Date = (uint8_t)(tmpdate & (RTC_TSDR_DT | RTC_TSDR_DU));
 800d47e:	693b      	ldr	r3, [r7, #16]
 800d480:	b2db      	uxtb	r3, r3
 800d482:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d486:	b2da      	uxtb	r2, r3
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	709a      	strb	r2, [r3, #2]
  sTimeStampDate->WeekDay = (uint8_t)((tmpdate & (RTC_TSDR_WDU)) >> RTC_TSDR_WDU_Pos);
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	0b5b      	lsrs	r3, r3, #13
 800d490:	b2db      	uxtb	r3, r3
 800d492:	f003 0307 	and.w	r3, r3, #7
 800d496:	b2da      	uxtb	r2, r3
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d135      	bne.n	800d50e <HAL_RTCEx_GetTimeStamp+0x116>
  {
    /* Convert the TimeStamp structure parameters to Binary format */
    sTimeStamp->Hours = (uint8_t)RTC_Bcd2ToByte(sTimeStamp->Hours);
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7ff ff46 	bl	800d338 <RTC_Bcd2ToByte>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	701a      	strb	r2, [r3, #0]
    sTimeStamp->Minutes = (uint8_t)RTC_Bcd2ToByte(sTimeStamp->Minutes);
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	785b      	ldrb	r3, [r3, #1]
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f7ff ff3d 	bl	800d338 <RTC_Bcd2ToByte>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	705a      	strb	r2, [r3, #1]
    sTimeStamp->Seconds = (uint8_t)RTC_Bcd2ToByte(sTimeStamp->Seconds);
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	789b      	ldrb	r3, [r3, #2]
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7ff ff34 	bl	800d338 <RTC_Bcd2ToByte>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	461a      	mov	r2, r3
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	709a      	strb	r2, [r3, #2]

    /* Convert the DateTimeStamp structure parameters to Binary format */
    sTimeStampDate->Month = (uint8_t)RTC_Bcd2ToByte(sTimeStampDate->Month);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	785b      	ldrb	r3, [r3, #1]
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f7ff ff2b 	bl	800d338 <RTC_Bcd2ToByte>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	705a      	strb	r2, [r3, #1]
    sTimeStampDate->Date = (uint8_t)RTC_Bcd2ToByte(sTimeStampDate->Date);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	789b      	ldrb	r3, [r3, #2]
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7ff ff22 	bl	800d338 <RTC_Bcd2ToByte>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	709a      	strb	r2, [r3, #2]
    sTimeStampDate->WeekDay = (uint8_t)RTC_Bcd2ToByte(sTimeStampDate->WeekDay);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	4618      	mov	r0, r3
 800d502:	f7ff ff19 	bl	800d338 <RTC_Bcd2ToByte>
 800d506:	4603      	mov	r3, r0
 800d508:	461a      	mov	r2, r3
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	701a      	strb	r2, [r3, #0]
  }

  /* Clear the TIMESTAMP Flags */
  WRITE_REG(RTC->SCR, (RTC_SCR_CITSF | RTC_SCR_CTSF));
 800d50e:	4b04      	ldr	r3, [pc, #16]	; (800d520 <HAL_RTCEx_GetTimeStamp+0x128>)
 800d510:	2228      	movs	r2, #40	; 0x28
 800d512:	65da      	str	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800d514:	2300      	movs	r3, #0
}
 800d516:	4618      	mov	r0, r3
 800d518:	3718      	adds	r7, #24
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
 800d51e:	bf00      	nop
 800d520:	46007800 	.word	0x46007800

0800d524 <HAL_RTCEx_TimeStampIRQHandler>:
  * @brief  Handle TimeStamp non-secure interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_TimeStampIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  if (READ_BIT(RTC->MISR, RTC_MISR_TSMF) != 0U)
 800d52c:	4b09      	ldr	r3, [pc, #36]	; (800d554 <HAL_RTCEx_TimeStampIRQHandler+0x30>)
 800d52e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d530:	f003 0308 	and.w	r3, r3, #8
 800d534:	2b00      	cmp	r3, #0
 800d536:	d005      	beq.n	800d544 <HAL_RTCEx_TimeStampIRQHandler+0x20>
  {
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call TimeStampEvent registered Callback */
    hrtc->TimeStampEventCallback(hrtc);
#else
    HAL_RTCEx_TimeStampEventCallback(hrtc);
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f7f5 ff19 	bl	8003370 <HAL_RTCEx_TimeStampEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS == 1 */
    /* Clearing flags after the Callback because the content of RTC_TSTR and RTC_TSDR are cleared when
    TSF bit is reset.*/
    WRITE_REG(RTC->SCR, RTC_SCR_CITSF | RTC_SCR_CTSF);
 800d53e:	4b05      	ldr	r3, [pc, #20]	; (800d554 <HAL_RTCEx_TimeStampIRQHandler+0x30>)
 800d540:	2228      	movs	r2, #40	; 0x28
 800d542:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2201      	movs	r2, #1
 800d548:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800d54c:	bf00      	nop
 800d54e:	3708      	adds	r7, #8
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}
 800d554:	46007800 	.word	0x46007800

0800d558 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800d558:	b480      	push	{r7}
 800d55a:	b083      	sub	sp, #12
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	681a      	ldr	r2, [r3, #0]
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	4910      	ldr	r1, [pc, #64]	; (800d5ac <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800d56c:	4313      	orrs	r3, r2
 800d56e:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	689a      	ldr	r2, [r3, #8]
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	431a      	orrs	r2, r3
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	699b      	ldr	r3, [r3, #24]
 800d57e:	490c      	ldr	r1, [pc, #48]	; (800d5b0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800d580:	4313      	orrs	r3, r2
 800d582:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800d584:	4b0a      	ldr	r3, [pc, #40]	; (800d5b0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800d586:	6a1b      	ldr	r3, [r3, #32]
 800d588:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	6919      	ldr	r1, [r3, #16]
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	695b      	ldr	r3, [r3, #20]
 800d594:	041b      	lsls	r3, r3, #16
 800d596:	430b      	orrs	r3, r1
 800d598:	4905      	ldr	r1, [pc, #20]	; (800d5b0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800d59a:	4313      	orrs	r3, r2
 800d59c:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800d59e:	2300      	movs	r3, #0
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	370c      	adds	r7, #12
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr
 800d5ac:	46007800 	.word	0x46007800
 800d5b0:	46007c00 	.word	0x46007c00

0800d5b4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b084      	sub	sp, #16
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d101      	bne.n	800d5c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	e0dd      	b.n	800d782 <HAL_SPI_Init+0x1ce>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	4a70      	ldr	r2, [pc, #448]	; (800d78c <HAL_SPI_Init+0x1d8>)
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d004      	beq.n	800d5da <HAL_SPI_Init+0x26>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	4a6e      	ldr	r2, [pc, #440]	; (800d790 <HAL_SPI_Init+0x1dc>)
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	e000      	b.n	800d5dc <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800d5da:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	629a      	str	r2, [r3, #40]	; 0x28

  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	4a69      	ldr	r2, [pc, #420]	; (800d78c <HAL_SPI_Init+0x1d8>)
 800d5e8:	4293      	cmp	r3, r2
 800d5ea:	d004      	beq.n	800d5f6 <HAL_SPI_Init+0x42>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	4a67      	ldr	r2, [pc, #412]	; (800d790 <HAL_SPI_Init+0x1dc>)
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d105      	bne.n	800d602 <HAL_SPI_Init+0x4e>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	68db      	ldr	r3, [r3, #12]
 800d5fa:	2b0f      	cmp	r3, #15
 800d5fc:	d901      	bls.n	800d602 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800d5fe:	2301      	movs	r3, #1
 800d600:	e0bf      	b.n	800d782 <HAL_SPI_Init+0x1ce>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 fdf8 	bl	800e1f8 <SPI_GetPacketSize>
 800d608:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	4a5f      	ldr	r2, [pc, #380]	; (800d78c <HAL_SPI_Init+0x1d8>)
 800d610:	4293      	cmp	r3, r2
 800d612:	d004      	beq.n	800d61e <HAL_SPI_Init+0x6a>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	4a5d      	ldr	r2, [pc, #372]	; (800d790 <HAL_SPI_Init+0x1dc>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d102      	bne.n	800d624 <HAL_SPI_Init+0x70>
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	2b08      	cmp	r3, #8
 800d622:	d816      	bhi.n	800d652 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d628:	4a5a      	ldr	r2, [pc, #360]	; (800d794 <HAL_SPI_Init+0x1e0>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d00e      	beq.n	800d64c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	4a59      	ldr	r2, [pc, #356]	; (800d798 <HAL_SPI_Init+0x1e4>)
 800d634:	4293      	cmp	r3, r2
 800d636:	d009      	beq.n	800d64c <HAL_SPI_Init+0x98>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	4a57      	ldr	r2, [pc, #348]	; (800d79c <HAL_SPI_Init+0x1e8>)
 800d63e:	4293      	cmp	r3, r2
 800d640:	d004      	beq.n	800d64c <HAL_SPI_Init+0x98>
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	4a56      	ldr	r2, [pc, #344]	; (800d7a0 <HAL_SPI_Init+0x1ec>)
 800d648:	4293      	cmp	r3, r2
 800d64a:	d104      	bne.n	800d656 <HAL_SPI_Init+0xa2>
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	2b10      	cmp	r3, #16
 800d650:	d901      	bls.n	800d656 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800d652:	2301      	movs	r3, #1
 800d654:	e095      	b.n	800d782 <HAL_SPI_Init+0x1ce>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800d65c:	b2db      	uxtb	r3, r3
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d106      	bne.n	800d670 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2200      	movs	r2, #0
 800d666:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f7f7 fa28 	bl	8004ac0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2202      	movs	r2, #2
 800d674:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f022 0201 	bic.w	r2, r2, #1
 800d686:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	689b      	ldr	r3, [r3, #8]
 800d68e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d692:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	699b      	ldr	r3, [r3, #24]
 800d698:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d69c:	d119      	bne.n	800d6d2 <HAL_SPI_Init+0x11e>
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	685b      	ldr	r3, [r3, #4]
 800d6a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d6a6:	d103      	bne.n	800d6b0 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d008      	beq.n	800d6c2 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d10c      	bne.n	800d6d2 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d6bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d6c0:	d107      	bne.n	800d6d2 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	681a      	ldr	r2, [r3, #0]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d6d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	69da      	ldr	r2, [r3, #28]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6da:	431a      	orrs	r2, r3
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	431a      	orrs	r2, r3
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6e4:	ea42 0103 	orr.w	r1, r2, r3
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	68da      	ldr	r2, [r3, #12]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	430a      	orrs	r2, r1
 800d6f2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6fc:	431a      	orrs	r2, r3
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d702:	431a      	orrs	r2, r3
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	699b      	ldr	r3, [r3, #24]
 800d708:	431a      	orrs	r2, r3
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	691b      	ldr	r3, [r3, #16]
 800d70e:	431a      	orrs	r2, r3
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	695b      	ldr	r3, [r3, #20]
 800d714:	431a      	orrs	r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6a1b      	ldr	r3, [r3, #32]
 800d71a:	431a      	orrs	r2, r3
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	685b      	ldr	r3, [r3, #4]
 800d720:	431a      	orrs	r2, r3
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d726:	431a      	orrs	r2, r3
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	689b      	ldr	r3, [r3, #8]
 800d72c:	431a      	orrs	r2, r3
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d732:	431a      	orrs	r2, r3
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d738:	431a      	orrs	r2, r3
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d73e:	ea42 0103 	orr.w	r1, r2, r3
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	430a      	orrs	r2, r1
 800d74c:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d756:	2b00      	cmp	r3, #0
 800d758:	d00a      	beq.n	800d770 <HAL_SPI_Init+0x1bc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	430a      	orrs	r2, r1
 800d76e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2200      	movs	r2, #0
 800d774:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2201      	movs	r2, #1
 800d77c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800d780:	2300      	movs	r3, #0
}
 800d782:	4618      	mov	r0, r3
 800d784:	3710      	adds	r7, #16
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	bf00      	nop
 800d78c:	46002000 	.word	0x46002000
 800d790:	56002000 	.word	0x56002000
 800d794:	40013000 	.word	0x40013000
 800d798:	50013000 	.word	0x50013000
 800d79c:	40003800 	.word	0x40003800
 800d7a0:	50003800 	.word	0x50003800

0800d7a4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b08a      	sub	sp, #40	; 0x28
 800d7a8:	af02      	add	r7, sp, #8
 800d7aa:	60f8      	str	r0, [r7, #12]
 800d7ac:	60b9      	str	r1, [r7, #8]
 800d7ae:	603b      	str	r3, [r7, #0]
 800d7b0:	4613      	mov	r3, r2
 800d7b2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	3320      	adds	r3, #32
 800d7ba:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	d101      	bne.n	800d7ce <HAL_SPI_Transmit+0x2a>
 800d7ca:	2302      	movs	r3, #2
 800d7cc:	e1f7      	b.n	800dbbe <HAL_SPI_Transmit+0x41a>
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d7d6:	f7f7 fe53 	bl	8005480 <HAL_GetTick>
 800d7da:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800d7e2:	b2db      	uxtb	r3, r3
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d007      	beq.n	800d7f8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800d7e8:	2302      	movs	r3, #2
 800d7ea:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800d7f4:	7efb      	ldrb	r3, [r7, #27]
 800d7f6:	e1e2      	b.n	800dbbe <HAL_SPI_Transmit+0x41a>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d002      	beq.n	800d804 <HAL_SPI_Transmit+0x60>
 800d7fe:	88fb      	ldrh	r3, [r7, #6]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d107      	bne.n	800d814 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800d804:	2301      	movs	r3, #1
 800d806:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2200      	movs	r2, #0
 800d80c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800d810:	7efb      	ldrb	r3, [r7, #27]
 800d812:	e1d4      	b.n	800dbbe <HAL_SPI_Transmit+0x41a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2203      	movs	r2, #3
 800d818:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	2200      	movs	r2, #0
 800d820:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	68ba      	ldr	r2, [r7, #8]
 800d828:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	88fa      	ldrh	r2, [r7, #6]
 800d82e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	88fa      	ldrh	r2, [r7, #6]
 800d836:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2200      	movs	r2, #0
 800d83e:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	2200      	movs	r2, #0
 800d844:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2200      	movs	r2, #0
 800d84c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	2200      	movs	r2, #0
 800d854:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	2200      	movs	r2, #0
 800d85a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	689b      	ldr	r3, [r3, #8]
 800d860:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d864:	d107      	bne.n	800d876 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	681a      	ldr	r2, [r3, #0]
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d874:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	685b      	ldr	r3, [r3, #4]
 800d87c:	0c1b      	lsrs	r3, r3, #16
 800d87e:	041b      	lsls	r3, r3, #16
 800d880:	88f9      	ldrh	r1, [r7, #6]
 800d882:	68fa      	ldr	r2, [r7, #12]
 800d884:	6812      	ldr	r2, [r2, #0]
 800d886:	430b      	orrs	r3, r1
 800d888:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	681a      	ldr	r2, [r3, #0]
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	f042 0201 	orr.w	r2, r2, #1
 800d898:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	69db      	ldr	r3, [r3, #28]
 800d8a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d10c      	bne.n	800d8c2 <HAL_SPI_Transmit+0x11e>
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d8b0:	d107      	bne.n	800d8c2 <HAL_SPI_Transmit+0x11e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	681a      	ldr	r2, [r3, #0]
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d8c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	68db      	ldr	r3, [r3, #12]
 800d8c6:	2b0f      	cmp	r3, #15
 800d8c8:	d95b      	bls.n	800d982 <HAL_SPI_Transmit+0x1de>
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	4a8f      	ldr	r2, [pc, #572]	; (800db0c <HAL_SPI_Transmit+0x368>)
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d04f      	beq.n	800d974 <HAL_SPI_Transmit+0x1d0>
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	4a8d      	ldr	r2, [pc, #564]	; (800db10 <HAL_SPI_Transmit+0x36c>)
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d04a      	beq.n	800d974 <HAL_SPI_Transmit+0x1d0>
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	4a8c      	ldr	r2, [pc, #560]	; (800db14 <HAL_SPI_Transmit+0x370>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d045      	beq.n	800d974 <HAL_SPI_Transmit+0x1d0>
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4a8a      	ldr	r2, [pc, #552]	; (800db18 <HAL_SPI_Transmit+0x374>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d147      	bne.n	800d982 <HAL_SPI_Transmit+0x1de>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d8f2:	e03f      	b.n	800d974 <HAL_SPI_Transmit+0x1d0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	695b      	ldr	r3, [r3, #20]
 800d8fa:	f003 0302 	and.w	r3, r3, #2
 800d8fe:	2b02      	cmp	r3, #2
 800d900:	d114      	bne.n	800d92c <HAL_SPI_Transmit+0x188>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	6812      	ldr	r2, [r2, #0]
 800d90c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d912:	1d1a      	adds	r2, r3, #4
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d91e:	b29b      	uxth	r3, r3
 800d920:	3b01      	subs	r3, #1
 800d922:	b29a      	uxth	r2, r3
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d92a:	e023      	b.n	800d974 <HAL_SPI_Transmit+0x1d0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d92c:	f7f7 fda8 	bl	8005480 <HAL_GetTick>
 800d930:	4602      	mov	r2, r0
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	1ad3      	subs	r3, r2, r3
 800d936:	683a      	ldr	r2, [r7, #0]
 800d938:	429a      	cmp	r2, r3
 800d93a:	d803      	bhi.n	800d944 <HAL_SPI_Transmit+0x1a0>
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d942:	d102      	bne.n	800d94a <HAL_SPI_Transmit+0x1a6>
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d114      	bne.n	800d974 <HAL_SPI_Transmit+0x1d0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d94a:	68f8      	ldr	r0, [r7, #12]
 800d94c:	f000 fb86 	bl	800e05c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	2200      	movs	r2, #0
 800d954:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d95e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2201      	movs	r2, #1
 800d96c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800d970:	2303      	movs	r3, #3
 800d972:	e124      	b.n	800dbbe <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d97a:	b29b      	uxth	r3, r3
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d1b9      	bne.n	800d8f4 <HAL_SPI_Transmit+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800d980:	e0f7      	b.n	800db72 <HAL_SPI_Transmit+0x3ce>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	68db      	ldr	r3, [r3, #12]
 800d986:	2b07      	cmp	r3, #7
 800d988:	f240 80ec 	bls.w	800db64 <HAL_SPI_Transmit+0x3c0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d98c:	e05d      	b.n	800da4a <HAL_SPI_Transmit+0x2a6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	695b      	ldr	r3, [r3, #20]
 800d994:	f003 0302 	and.w	r3, r3, #2
 800d998:	2b02      	cmp	r3, #2
 800d99a:	d132      	bne.n	800da02 <HAL_SPI_Transmit+0x25e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d9a2:	b29b      	uxth	r3, r3
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d918      	bls.n	800d9da <HAL_SPI_Transmit+0x236>
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d014      	beq.n	800d9da <HAL_SPI_Transmit+0x236>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	6812      	ldr	r2, [r2, #0]
 800d9ba:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9c0:	1d1a      	adds	r2, r3, #4
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d9cc:	b29b      	uxth	r3, r3
 800d9ce:	3b02      	subs	r3, #2
 800d9d0:	b29a      	uxth	r2, r3
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d9d8:	e037      	b.n	800da4a <HAL_SPI_Transmit+0x2a6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9de:	881a      	ldrh	r2, [r3, #0]
 800d9e0:	69fb      	ldr	r3, [r7, #28]
 800d9e2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9e8:	1c9a      	adds	r2, r3, #2
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d9f4:	b29b      	uxth	r3, r3
 800d9f6:	3b01      	subs	r3, #1
 800d9f8:	b29a      	uxth	r2, r3
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800da00:	e023      	b.n	800da4a <HAL_SPI_Transmit+0x2a6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da02:	f7f7 fd3d 	bl	8005480 <HAL_GetTick>
 800da06:	4602      	mov	r2, r0
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	1ad3      	subs	r3, r2, r3
 800da0c:	683a      	ldr	r2, [r7, #0]
 800da0e:	429a      	cmp	r2, r3
 800da10:	d803      	bhi.n	800da1a <HAL_SPI_Transmit+0x276>
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da18:	d102      	bne.n	800da20 <HAL_SPI_Transmit+0x27c>
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d114      	bne.n	800da4a <HAL_SPI_Transmit+0x2a6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800da20:	68f8      	ldr	r0, [r7, #12]
 800da22:	f000 fb1b 	bl	800e05c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2200      	movs	r2, #0
 800da2a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	2201      	movs	r2, #1
 800da42:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800da46:	2303      	movs	r3, #3
 800da48:	e0b9      	b.n	800dbbe <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800da50:	b29b      	uxth	r3, r3
 800da52:	2b00      	cmp	r3, #0
 800da54:	d19b      	bne.n	800d98e <HAL_SPI_Transmit+0x1ea>
 800da56:	e08c      	b.n	800db72 <HAL_SPI_Transmit+0x3ce>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	695b      	ldr	r3, [r3, #20]
 800da5e:	f003 0302 	and.w	r3, r3, #2
 800da62:	2b02      	cmp	r3, #2
 800da64:	d15a      	bne.n	800db1c <HAL_SPI_Transmit+0x378>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	2b03      	cmp	r3, #3
 800da70:	d918      	bls.n	800daa4 <HAL_SPI_Transmit+0x300>
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da76:	2b40      	cmp	r3, #64	; 0x40
 800da78:	d914      	bls.n	800daa4 <HAL_SPI_Transmit+0x300>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	6812      	ldr	r2, [r2, #0]
 800da84:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da8a:	1d1a      	adds	r2, r3, #4
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800da96:	b29b      	uxth	r3, r3
 800da98:	3b04      	subs	r3, #4
 800da9a:	b29a      	uxth	r2, r3
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800daa2:	e05f      	b.n	800db64 <HAL_SPI_Transmit+0x3c0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800daaa:	b29b      	uxth	r3, r3
 800daac:	2b01      	cmp	r3, #1
 800daae:	d917      	bls.n	800dae0 <HAL_SPI_Transmit+0x33c>
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d013      	beq.n	800dae0 <HAL_SPI_Transmit+0x33c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dabc:	881a      	ldrh	r2, [r3, #0]
 800dabe:	69fb      	ldr	r3, [r7, #28]
 800dac0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dac6:	1c9a      	adds	r2, r3, #2
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	3b02      	subs	r3, #2
 800dad6:	b29a      	uxth	r2, r3
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dade:	e041      	b.n	800db64 <HAL_SPI_Transmit+0x3c0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	3320      	adds	r3, #32
 800daea:	7812      	ldrb	r2, [r2, #0]
 800daec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800daf2:	1c5a      	adds	r2, r3, #1
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dafe:	b29b      	uxth	r3, r3
 800db00:	3b01      	subs	r3, #1
 800db02:	b29a      	uxth	r2, r3
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800db0a:	e02b      	b.n	800db64 <HAL_SPI_Transmit+0x3c0>
 800db0c:	40013000 	.word	0x40013000
 800db10:	50013000 	.word	0x50013000
 800db14:	40003800 	.word	0x40003800
 800db18:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800db1c:	f7f7 fcb0 	bl	8005480 <HAL_GetTick>
 800db20:	4602      	mov	r2, r0
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	1ad3      	subs	r3, r2, r3
 800db26:	683a      	ldr	r2, [r7, #0]
 800db28:	429a      	cmp	r2, r3
 800db2a:	d803      	bhi.n	800db34 <HAL_SPI_Transmit+0x390>
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db32:	d102      	bne.n	800db3a <HAL_SPI_Transmit+0x396>
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d114      	bne.n	800db64 <HAL_SPI_Transmit+0x3c0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800db3a:	68f8      	ldr	r0, [r7, #12]
 800db3c:	f000 fa8e 	bl	800e05c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	2200      	movs	r2, #0
 800db44:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	2201      	movs	r2, #1
 800db5c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800db60:	2303      	movs	r3, #3
 800db62:	e02c      	b.n	800dbbe <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db6a:	b29b      	uxth	r3, r3
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	f47f af73 	bne.w	800da58 <HAL_SPI_Transmit+0x2b4>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	9300      	str	r3, [sp, #0]
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	2200      	movs	r2, #0
 800db7a:	2108      	movs	r1, #8
 800db7c:	68f8      	ldr	r0, [r7, #12]
 800db7e:	f000 fb0d 	bl	800e19c <SPI_WaitOnFlagUntilTimeout>
 800db82:	4603      	mov	r3, r0
 800db84:	2b00      	cmp	r3, #0
 800db86:	d007      	beq.n	800db98 <HAL_SPI_Transmit+0x3f4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db8e:	f043 0220 	orr.w	r2, r3, #32
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800db98:	68f8      	ldr	r0, [r7, #12]
 800db9a:	f000 fa5f 	bl	800e05c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	2200      	movs	r2, #0
 800dba2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2201      	movs	r2, #1
 800dbaa:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d001      	beq.n	800dbbc <HAL_SPI_Transmit+0x418>
  {
    return HAL_ERROR;
 800dbb8:	2301      	movs	r3, #1
 800dbba:	e000      	b.n	800dbbe <HAL_SPI_Transmit+0x41a>
  }
  return errorcode;
 800dbbc:	7efb      	ldrb	r3, [r7, #27]
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3720      	adds	r7, #32
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop

0800dbc8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b08e      	sub	sp, #56	; 0x38
 800dbcc:	af02      	add	r7, sp, #8
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	607a      	str	r2, [r7, #4]
 800dbd4:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	3320      	adds	r3, #32
 800dbe2:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	3330      	adds	r3, #48	; 0x30
 800dbea:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800dbf2:	2b01      	cmp	r3, #1
 800dbf4:	d101      	bne.n	800dbfa <HAL_SPI_TransmitReceive+0x32>
 800dbf6:	2302      	movs	r3, #2
 800dbf8:	e22b      	b.n	800e052 <HAL_SPI_TransmitReceive+0x48a>
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	2201      	movs	r2, #1
 800dbfe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dc02:	f7f7 fc3d 	bl	8005480 <HAL_GetTick>
 800dc06:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800dc08:	887b      	ldrh	r3, [r7, #2]
 800dc0a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800dc0c:	887b      	ldrh	r3, [r7, #2]
 800dc0e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800dc16:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	685b      	ldr	r3, [r3, #4]
 800dc1c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800dc1e:	7efb      	ldrb	r3, [r7, #27]
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	d014      	beq.n	800dc4e <HAL_SPI_TransmitReceive+0x86>
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dc2a:	d106      	bne.n	800dc3a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d102      	bne.n	800dc3a <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800dc34:	7efb      	ldrb	r3, [r7, #27]
 800dc36:	2b04      	cmp	r3, #4
 800dc38:	d009      	beq.n	800dc4e <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800dc3a:	2302      	movs	r3, #2
 800dc3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	2200      	movs	r2, #0
 800dc44:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800dc48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dc4c:	e201      	b.n	800e052 <HAL_SPI_TransmitReceive+0x48a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d005      	beq.n	800dc60 <HAL_SPI_TransmitReceive+0x98>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d002      	beq.n	800dc60 <HAL_SPI_TransmitReceive+0x98>
 800dc5a:	887b      	ldrh	r3, [r7, #2]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d109      	bne.n	800dc74 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800dc60:	2301      	movs	r3, #1
 800dc62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800dc6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dc72:	e1ee      	b.n	800e052 <HAL_SPI_TransmitReceive+0x48a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800dc7a:	b2db      	uxtb	r3, r3
 800dc7c:	2b04      	cmp	r3, #4
 800dc7e:	d003      	beq.n	800dc88 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	2205      	movs	r2, #5
 800dc84:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	687a      	ldr	r2, [r7, #4]
 800dc94:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferCount = Size;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	887a      	ldrh	r2, [r7, #2]
 800dc9a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->RxXferSize  = Size;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	887a      	ldrh	r2, [r7, #2]
 800dca2:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	68ba      	ldr	r2, [r7, #8]
 800dcaa:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	887a      	ldrh	r2, [r7, #2]
 800dcb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	887a      	ldrh	r2, [r7, #2]
 800dcb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	0c1b      	lsrs	r3, r3, #16
 800dcd0:	041b      	lsls	r3, r3, #16
 800dcd2:	8879      	ldrh	r1, [r7, #2]
 800dcd4:	68fa      	ldr	r2, [r7, #12]
 800dcd6:	6812      	ldr	r2, [r2, #0]
 800dcd8:	430b      	orrs	r3, r1
 800dcda:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	681a      	ldr	r2, [r3, #0]
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f042 0201 	orr.w	r2, r2, #1
 800dcea:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	69db      	ldr	r3, [r3, #28]
 800dcf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d10c      	bne.n	800dd14 <HAL_SPI_TransmitReceive+0x14c>
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	685b      	ldr	r3, [r3, #4]
 800dcfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd02:	d107      	bne.n	800dd14 <HAL_SPI_TransmitReceive+0x14c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	68db      	ldr	r3, [r3, #12]
 800dd18:	2b0f      	cmp	r3, #15
 800dd1a:	f240 8085 	bls.w	800de28 <HAL_SPI_TransmitReceive+0x260>
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	4a7b      	ldr	r2, [pc, #492]	; (800df10 <HAL_SPI_TransmitReceive+0x348>)
 800dd24:	4293      	cmp	r3, r2
 800dd26:	d078      	beq.n	800de1a <HAL_SPI_TransmitReceive+0x252>
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4a79      	ldr	r2, [pc, #484]	; (800df14 <HAL_SPI_TransmitReceive+0x34c>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d073      	beq.n	800de1a <HAL_SPI_TransmitReceive+0x252>
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	4a78      	ldr	r2, [pc, #480]	; (800df18 <HAL_SPI_TransmitReceive+0x350>)
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d06e      	beq.n	800de1a <HAL_SPI_TransmitReceive+0x252>
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	4a76      	ldr	r2, [pc, #472]	; (800df1c <HAL_SPI_TransmitReceive+0x354>)
 800dd42:	4293      	cmp	r3, r2
 800dd44:	d170      	bne.n	800de28 <HAL_SPI_TransmitReceive+0x260>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dd46:	e068      	b.n	800de1a <HAL_SPI_TransmitReceive+0x252>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	695b      	ldr	r3, [r3, #20]
 800dd4e:	f003 0302 	and.w	r3, r3, #2
 800dd52:	2b02      	cmp	r3, #2
 800dd54:	d11a      	bne.n	800dd8c <HAL_SPI_TransmitReceive+0x1c4>
 800dd56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d017      	beq.n	800dd8c <HAL_SPI_TransmitReceive+0x1c4>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	6812      	ldr	r2, [r2, #0]
 800dd66:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd6c:	1d1a      	adds	r2, r3, #4
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount --;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd78:	b29b      	uxth	r3, r3
 800dd7a:	3b01      	subs	r3, #1
 800dd7c:	b29a      	uxth	r2, r3
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd8a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	695a      	ldr	r2, [r3, #20]
 800dd92:	f248 0308 	movw	r3, #32776	; 0x8008
 800dd96:	4013      	ands	r3, r2
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d01a      	beq.n	800ddd2 <HAL_SPI_TransmitReceive+0x20a>
 800dd9c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d017      	beq.n	800ddd2 <HAL_SPI_TransmitReceive+0x20a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681a      	ldr	r2, [r3, #0]
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddaa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ddac:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddb2:	1d1a      	adds	r2, r3, #4
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount --;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	3b01      	subs	r3, #1
 800ddc2:	b29a      	uxth	r2, r3
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800ddd0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ddd2:	f7f7 fb55 	bl	8005480 <HAL_GetTick>
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	69fb      	ldr	r3, [r7, #28]
 800ddda:	1ad3      	subs	r3, r2, r3
 800dddc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d803      	bhi.n	800ddea <HAL_SPI_TransmitReceive+0x222>
 800dde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dde8:	d102      	bne.n	800ddf0 <HAL_SPI_TransmitReceive+0x228>
 800ddea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d114      	bne.n	800de1a <HAL_SPI_TransmitReceive+0x252>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ddf0:	68f8      	ldr	r0, [r7, #12]
 800ddf2:	f000 f933 	bl	800e05c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2201      	movs	r2, #1
 800de12:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800de16:	2303      	movs	r3, #3
 800de18:	e11b      	b.n	800e052 <HAL_SPI_TransmitReceive+0x48a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800de1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d193      	bne.n	800dd48 <HAL_SPI_TransmitReceive+0x180>
 800de20:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800de22:	2b00      	cmp	r3, #0
 800de24:	d190      	bne.n	800dd48 <HAL_SPI_TransmitReceive+0x180>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800de26:	e0ed      	b.n	800e004 <HAL_SPI_TransmitReceive+0x43c>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	68db      	ldr	r3, [r3, #12]
 800de2c:	2b07      	cmp	r3, #7
 800de2e:	f240 80e3 	bls.w	800dff8 <HAL_SPI_TransmitReceive+0x430>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800de32:	e066      	b.n	800df02 <HAL_SPI_TransmitReceive+0x33a>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	695b      	ldr	r3, [r3, #20]
 800de3a:	f003 0302 	and.w	r3, r3, #2
 800de3e:	2b02      	cmp	r3, #2
 800de40:	d119      	bne.n	800de76 <HAL_SPI_TransmitReceive+0x2ae>
 800de42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800de44:	2b00      	cmp	r3, #0
 800de46:	d016      	beq.n	800de76 <HAL_SPI_TransmitReceive+0x2ae>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de4c:	881a      	ldrh	r2, [r3, #0]
 800de4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de50:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de56:	1c9a      	adds	r2, r3, #2
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de62:	b29b      	uxth	r3, r3
 800de64:	3b01      	subs	r3, #1
 800de66:	b29a      	uxth	r2, r3
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de74:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	695b      	ldr	r3, [r3, #20]
 800de7c:	f003 0301 	and.w	r3, r3, #1
 800de80:	2b01      	cmp	r3, #1
 800de82:	d11a      	bne.n	800deba <HAL_SPI_TransmitReceive+0x2f2>
 800de84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800de86:	2b00      	cmp	r3, #0
 800de88:	d017      	beq.n	800deba <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de8e:	6a3a      	ldr	r2, [r7, #32]
 800de90:	8812      	ldrh	r2, [r2, #0]
 800de92:	b292      	uxth	r2, r2
 800de94:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de9a:	1c9a      	adds	r2, r3, #2
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800dea6:	b29b      	uxth	r3, r3
 800dea8:	3b01      	subs	r3, #1
 800deaa:	b29a      	uxth	r2, r3
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800deb8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800deba:	f7f7 fae1 	bl	8005480 <HAL_GetTick>
 800debe:	4602      	mov	r2, r0
 800dec0:	69fb      	ldr	r3, [r7, #28]
 800dec2:	1ad3      	subs	r3, r2, r3
 800dec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d803      	bhi.n	800ded2 <HAL_SPI_TransmitReceive+0x30a>
 800deca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800decc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ded0:	d102      	bne.n	800ded8 <HAL_SPI_TransmitReceive+0x310>
 800ded2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d114      	bne.n	800df02 <HAL_SPI_TransmitReceive+0x33a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ded8:	68f8      	ldr	r0, [r7, #12]
 800deda:	f000 f8bf 	bl	800e05c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2200      	movs	r2, #0
 800dee2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800deec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	2201      	movs	r2, #1
 800defa:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800defe:	2303      	movs	r3, #3
 800df00:	e0a7      	b.n	800e052 <HAL_SPI_TransmitReceive+0x48a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800df02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800df04:	2b00      	cmp	r3, #0
 800df06:	d195      	bne.n	800de34 <HAL_SPI_TransmitReceive+0x26c>
 800df08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d192      	bne.n	800de34 <HAL_SPI_TransmitReceive+0x26c>
 800df0e:	e079      	b.n	800e004 <HAL_SPI_TransmitReceive+0x43c>
 800df10:	40013000 	.word	0x40013000
 800df14:	50013000 	.word	0x50013000
 800df18:	40003800 	.word	0x40003800
 800df1c:	50003800 	.word	0x50003800
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	695b      	ldr	r3, [r3, #20]
 800df26:	f003 0302 	and.w	r3, r3, #2
 800df2a:	2b02      	cmp	r3, #2
 800df2c:	d11b      	bne.n	800df66 <HAL_SPI_TransmitReceive+0x39e>
 800df2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800df30:	2b00      	cmp	r3, #0
 800df32:	d018      	beq.n	800df66 <HAL_SPI_TransmitReceive+0x39e>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	3320      	adds	r3, #32
 800df3e:	7812      	ldrb	r2, [r2, #0]
 800df40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df46:	1c5a      	adds	r2, r3, #1
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df52:	b29b      	uxth	r3, r3
 800df54:	3b01      	subs	r3, #1
 800df56:	b29a      	uxth	r2, r3
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df64:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	695b      	ldr	r3, [r3, #20]
 800df6c:	f003 0301 	and.w	r3, r3, #1
 800df70:	2b01      	cmp	r3, #1
 800df72:	d11d      	bne.n	800dfb0 <HAL_SPI_TransmitReceive+0x3e8>
 800df74:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800df76:	2b00      	cmp	r3, #0
 800df78:	d01a      	beq.n	800dfb0 <HAL_SPI_TransmitReceive+0x3e8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df86:	7812      	ldrb	r2, [r2, #0]
 800df88:	b2d2      	uxtb	r2, r2
 800df8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df90:	1c5a      	adds	r2, r3, #1
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800df9c:	b29b      	uxth	r3, r3
 800df9e:	3b01      	subs	r3, #1
 800dfa0:	b29a      	uxth	r2, r3
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800dfae:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dfb0:	f7f7 fa66 	bl	8005480 <HAL_GetTick>
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	69fb      	ldr	r3, [r7, #28]
 800dfb8:	1ad3      	subs	r3, r2, r3
 800dfba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d803      	bhi.n	800dfc8 <HAL_SPI_TransmitReceive+0x400>
 800dfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfc6:	d102      	bne.n	800dfce <HAL_SPI_TransmitReceive+0x406>
 800dfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d114      	bne.n	800dff8 <HAL_SPI_TransmitReceive+0x430>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800dfce:	68f8      	ldr	r0, [r7, #12]
 800dfd0:	f000 f844 	bl	800e05c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dfe2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	2201      	movs	r2, #1
 800dff0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800dff4:	2303      	movs	r3, #3
 800dff6:	e02c      	b.n	800e052 <HAL_SPI_TransmitReceive+0x48a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dff8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d190      	bne.n	800df20 <HAL_SPI_TransmitReceive+0x358>
 800dffe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e000:	2b00      	cmp	r3, #0
 800e002:	d18d      	bne.n	800df20 <HAL_SPI_TransmitReceive+0x358>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800e004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e006:	9300      	str	r3, [sp, #0]
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	2200      	movs	r2, #0
 800e00c:	2108      	movs	r1, #8
 800e00e:	68f8      	ldr	r0, [r7, #12]
 800e010:	f000 f8c4 	bl	800e19c <SPI_WaitOnFlagUntilTimeout>
 800e014:	4603      	mov	r3, r0
 800e016:	2b00      	cmp	r3, #0
 800e018:	d007      	beq.n	800e02a <HAL_SPI_TransmitReceive+0x462>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e020:	f043 0220 	orr.w	r2, r3, #32
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e02a:	68f8      	ldr	r0, [r7, #12]
 800e02c:	f000 f816 	bl	800e05c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2200      	movs	r2, #0
 800e034:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	2201      	movs	r2, #1
 800e03c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e046:	2b00      	cmp	r3, #0
 800e048:	d001      	beq.n	800e04e <HAL_SPI_TransmitReceive+0x486>
  {
    return HAL_ERROR;
 800e04a:	2301      	movs	r3, #1
 800e04c:	e001      	b.n	800e052 <HAL_SPI_TransmitReceive+0x48a>
  }
  return errorcode;
 800e04e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e052:	4618      	mov	r0, r3
 800e054:	3730      	adds	r7, #48	; 0x30
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
 800e05a:	bf00      	nop

0800e05c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e05c:	b480      	push	{r7}
 800e05e:	b085      	sub	sp, #20
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	695b      	ldr	r3, [r3, #20]
 800e06a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	699a      	ldr	r2, [r3, #24]
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	f042 0208 	orr.w	r2, r2, #8
 800e07a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	699a      	ldr	r2, [r3, #24]
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	f042 0210 	orr.w	r2, r2, #16
 800e08a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	681a      	ldr	r2, [r3, #0]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f022 0201 	bic.w	r2, r2, #1
 800e09a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	691b      	ldr	r3, [r3, #16]
 800e0a2:	687a      	ldr	r2, [r7, #4]
 800e0a4:	6812      	ldr	r2, [r2, #0]
 800e0a6:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 800e0aa:	f023 0303 	bic.w	r3, r3, #3
 800e0ae:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	689a      	ldr	r2, [r3, #8]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e0be:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	2b04      	cmp	r3, #4
 800e0ca:	d014      	beq.n	800e0f6 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f003 0320 	and.w	r3, r3, #32
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d00f      	beq.n	800e0f6 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	699a      	ldr	r2, [r3, #24]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f042 0220 	orr.w	r2, r2, #32
 800e0f4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	2b03      	cmp	r3, #3
 800e100:	d014      	beq.n	800e12c <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d00f      	beq.n	800e12c <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e112:	f043 0204 	orr.w	r2, r3, #4
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	699a      	ldr	r2, [r3, #24]
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e12a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e132:	2b00      	cmp	r3, #0
 800e134:	d00f      	beq.n	800e156 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e13c:	f043 0201 	orr.w	r2, r3, #1
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	699a      	ldr	r2, [r3, #24]
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e154:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d00f      	beq.n	800e180 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e166:	f043 0208 	orr.w	r2, r3, #8
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	699a      	ldr	r2, [r3, #24]
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e17e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2200      	movs	r2, #0
 800e184:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2200      	movs	r2, #0
 800e18c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 800e190:	bf00      	nop
 800e192:	3714      	adds	r7, #20
 800e194:	46bd      	mov	sp, r7
 800e196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19a:	4770      	bx	lr

0800e19c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b084      	sub	sp, #16
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	60f8      	str	r0, [r7, #12]
 800e1a4:	60b9      	str	r1, [r7, #8]
 800e1a6:	603b      	str	r3, [r7, #0]
 800e1a8:	4613      	mov	r3, r2
 800e1aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e1ac:	e010      	b.n	800e1d0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e1ae:	f7f7 f967 	bl	8005480 <HAL_GetTick>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	1ad3      	subs	r3, r2, r3
 800e1b8:	69ba      	ldr	r2, [r7, #24]
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d803      	bhi.n	800e1c6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800e1be:	69bb      	ldr	r3, [r7, #24]
 800e1c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e1c4:	d102      	bne.n	800e1cc <SPI_WaitOnFlagUntilTimeout+0x30>
 800e1c6:	69bb      	ldr	r3, [r7, #24]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d101      	bne.n	800e1d0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800e1cc:	2303      	movs	r3, #3
 800e1ce:	e00f      	b.n	800e1f0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	695a      	ldr	r2, [r3, #20]
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	4013      	ands	r3, r2
 800e1da:	68ba      	ldr	r2, [r7, #8]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	bf0c      	ite	eq
 800e1e0:	2301      	moveq	r3, #1
 800e1e2:	2300      	movne	r3, #0
 800e1e4:	b2db      	uxtb	r3, r3
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	79fb      	ldrb	r3, [r7, #7]
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	d0df      	beq.n	800e1ae <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800e1ee:	2300      	movs	r3, #0
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3710      	adds	r7, #16
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800e1f8:	b480      	push	{r7}
 800e1fa:	b085      	sub	sp, #20
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e204:	095b      	lsrs	r3, r3, #5
 800e206:	3301      	adds	r3, #1
 800e208:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	68db      	ldr	r3, [r3, #12]
 800e20e:	3301      	adds	r3, #1
 800e210:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	3307      	adds	r3, #7
 800e216:	08db      	lsrs	r3, r3, #3
 800e218:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	68fa      	ldr	r2, [r7, #12]
 800e21e:	fb02 f303 	mul.w	r3, r2, r3
}
 800e222:	4618      	mov	r0, r3
 800e224:	3714      	adds	r7, #20
 800e226:	46bd      	mov	sp, r7
 800e228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22c:	4770      	bx	lr

0800e22e <HAL_SPIEx_SetConfigAutonomousMode>:
  * @param  sConfig Pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi, SPI_AutonomousModeConfTypeDef *sConfig)
{
 800e22e:	b480      	push	{r7}
 800e230:	b083      	sub	sp, #12
 800e232:	af00      	add	r7, sp, #0
 800e234:	6078      	str	r0, [r7, #4]
 800e236:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	2b01      	cmp	r3, #1
 800e242:	d12e      	bne.n	800e2a2 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e24a:	2b01      	cmp	r3, #1
 800e24c:	d101      	bne.n	800e252 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800e24e:	2302      	movs	r3, #2
 800e250:	e028      	b.n	800e2a4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2201      	movs	r2, #1
 800e256:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2202      	movs	r2, #2
 800e25e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));

    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	681a      	ldr	r2, [r3, #0]
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f022 0201 	bic.w	r2, r2, #1
 800e270:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	681a      	ldr	r2, [r3, #0]
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	685b      	ldr	r3, [r3, #4]
 800e27a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800e27e:	ea42 0103 	orr.w	r1, r2, r3
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	689a      	ldr	r2, [r3, #8]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	430a      	orrs	r2, r1
 800e28c:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2201      	movs	r2, #1
 800e292:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2200      	movs	r2, #0
 800e29a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	e000      	b.n	800e2a4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800e2a2:	2301      	movs	r3, #1
  }
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	370c      	adds	r7, #12
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ae:	4770      	bx	lr

0800e2b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b082      	sub	sp, #8
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d101      	bne.n	800e2c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e2be:	2301      	movs	r3, #1
 800e2c0:	e042      	b.n	800e348 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d106      	bne.n	800e2da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f7f6 fdbb 	bl	8004e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2224      	movs	r2, #36	; 0x24
 800e2de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	681a      	ldr	r2, [r3, #0]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f022 0201 	bic.w	r2, r2, #1
 800e2f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f000 f8d2 	bl	800e49c <UART_SetConfig>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	2b01      	cmp	r3, #1
 800e2fc:	d101      	bne.n	800e302 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e2fe:	2301      	movs	r3, #1
 800e300:	e022      	b.n	800e348 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e306:	2b00      	cmp	r3, #0
 800e308:	d002      	beq.n	800e310 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f000 fa68 	bl	800e7e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	685a      	ldr	r2, [r3, #4]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e31e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	689a      	ldr	r2, [r3, #8]
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e32e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	681a      	ldr	r2, [r3, #0]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f042 0201 	orr.w	r2, r2, #1
 800e33e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f000 faef 	bl	800e924 <UART_CheckIdleState>
 800e346:	4603      	mov	r3, r0
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3708      	adds	r7, #8
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}

0800e350 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b08a      	sub	sp, #40	; 0x28
 800e354:	af02      	add	r7, sp, #8
 800e356:	60f8      	str	r0, [r7, #12]
 800e358:	60b9      	str	r1, [r7, #8]
 800e35a:	603b      	str	r3, [r7, #0]
 800e35c:	4613      	mov	r3, r2
 800e35e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e366:	2b20      	cmp	r3, #32
 800e368:	f040 8092 	bne.w	800e490 <HAL_UART_Transmit+0x140>
  {
    if ((pData == NULL) || (Size == 0U))
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d002      	beq.n	800e378 <HAL_UART_Transmit+0x28>
 800e372:	88fb      	ldrh	r3, [r7, #6]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d101      	bne.n	800e37c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800e378:	2301      	movs	r3, #1
 800e37a:	e08a      	b.n	800e492 <HAL_UART_Transmit+0x142>
    }

    __HAL_LOCK(huart);
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e382:	2b01      	cmp	r3, #1
 800e384:	d101      	bne.n	800e38a <HAL_UART_Transmit+0x3a>
 800e386:	2302      	movs	r3, #2
 800e388:	e083      	b.n	800e492 <HAL_UART_Transmit+0x142>
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	2201      	movs	r2, #1
 800e38e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	689b      	ldr	r3, [r3, #8]
 800e398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e39c:	2b80      	cmp	r3, #128	; 0x80
 800e39e:	d107      	bne.n	800e3b0 <HAL_UART_Transmit+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	689a      	ldr	r2, [r3, #8]
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e3ae:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	2221      	movs	r2, #33	; 0x21
 800e3bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e3c0:	f7f7 f85e 	bl	8005480 <HAL_GetTick>
 800e3c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	88fa      	ldrh	r2, [r7, #6]
 800e3ca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	88fa      	ldrh	r2, [r7, #6]
 800e3d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	689b      	ldr	r3, [r3, #8]
 800e3da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3de:	d108      	bne.n	800e3f2 <HAL_UART_Transmit+0xa2>
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	691b      	ldr	r3, [r3, #16]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d104      	bne.n	800e3f2 <HAL_UART_Transmit+0xa2>
    {
      pdata8bits  = NULL;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	61bb      	str	r3, [r7, #24]
 800e3f0:	e003      	b.n	800e3fa <HAL_UART_Transmit+0xaa>
    }
    else
    {
      pdata8bits  = pData;
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800e402:	e02c      	b.n	800e45e <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	9300      	str	r3, [sp, #0]
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	2200      	movs	r2, #0
 800e40c:	2180      	movs	r1, #128	; 0x80
 800e40e:	68f8      	ldr	r0, [r7, #12]
 800e410:	f000 fad3 	bl	800e9ba <UART_WaitOnFlagUntilTimeout>
 800e414:	4603      	mov	r3, r0
 800e416:	2b00      	cmp	r3, #0
 800e418:	d001      	beq.n	800e41e <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800e41a:	2303      	movs	r3, #3
 800e41c:	e039      	b.n	800e492 <HAL_UART_Transmit+0x142>
      }
      if (pdata8bits == NULL)
 800e41e:	69fb      	ldr	r3, [r7, #28]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d10b      	bne.n	800e43c <HAL_UART_Transmit+0xec>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e424:	69bb      	ldr	r3, [r7, #24]
 800e426:	881b      	ldrh	r3, [r3, #0]
 800e428:	461a      	mov	r2, r3
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e432:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e434:	69bb      	ldr	r3, [r7, #24]
 800e436:	3302      	adds	r3, #2
 800e438:	61bb      	str	r3, [r7, #24]
 800e43a:	e007      	b.n	800e44c <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e43c:	69fb      	ldr	r3, [r7, #28]
 800e43e:	781a      	ldrb	r2, [r3, #0]
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e446:	69fb      	ldr	r3, [r7, #28]
 800e448:	3301      	adds	r3, #1
 800e44a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e452:	b29b      	uxth	r3, r3
 800e454:	3b01      	subs	r3, #1
 800e456:	b29a      	uxth	r2, r3
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e464:	b29b      	uxth	r3, r3
 800e466:	2b00      	cmp	r3, #0
 800e468:	d1cc      	bne.n	800e404 <HAL_UART_Transmit+0xb4>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	9300      	str	r3, [sp, #0]
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	2200      	movs	r2, #0
 800e472:	2140      	movs	r1, #64	; 0x40
 800e474:	68f8      	ldr	r0, [r7, #12]
 800e476:	f000 faa0 	bl	800e9ba <UART_WaitOnFlagUntilTimeout>
 800e47a:	4603      	mov	r3, r0
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d001      	beq.n	800e484 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 800e480:	2303      	movs	r3, #3
 800e482:	e006      	b.n	800e492 <HAL_UART_Transmit+0x142>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	2220      	movs	r2, #32
 800e488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800e48c:	2300      	movs	r3, #0
 800e48e:	e000      	b.n	800e492 <HAL_UART_Transmit+0x142>
  }
  else
  {
    return HAL_BUSY;
 800e490:	2302      	movs	r3, #2
  }
}
 800e492:	4618      	mov	r0, r3
 800e494:	3720      	adds	r7, #32
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
	...

0800e49c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e49c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e4a0:	b094      	sub	sp, #80	; 0x50
 800e4a2:	af00      	add	r7, sp, #0
 800e4a4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800e4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	4b7e      	ldr	r3, [pc, #504]	; (800e6ac <UART_SetConfig+0x210>)
 800e4b2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b6:	689a      	ldr	r2, [r3, #8]
 800e4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ba:	691b      	ldr	r3, [r3, #16]
 800e4bc:	431a      	orrs	r2, r3
 800e4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c0:	695b      	ldr	r3, [r3, #20]
 800e4c2:	431a      	orrs	r2, r3
 800e4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c6:	69db      	ldr	r3, [r3, #28]
 800e4c8:	4313      	orrs	r3, r2
 800e4ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	4977      	ldr	r1, [pc, #476]	; (800e6b0 <UART_SetConfig+0x214>)
 800e4d4:	4019      	ands	r1, r3
 800e4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d8:	681a      	ldr	r2, [r3, #0]
 800e4da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4dc:	430b      	orrs	r3, r1
 800e4de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	685b      	ldr	r3, [r3, #4]
 800e4e6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ec:	68d9      	ldr	r1, [r3, #12]
 800e4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f0:	681a      	ldr	r2, [r3, #0]
 800e4f2:	ea40 0301 	orr.w	r3, r0, r1
 800e4f6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fa:	699b      	ldr	r3, [r3, #24]
 800e4fc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e500:	681a      	ldr	r2, [r3, #0]
 800e502:	4b6a      	ldr	r3, [pc, #424]	; (800e6ac <UART_SetConfig+0x210>)
 800e504:	429a      	cmp	r2, r3
 800e506:	d009      	beq.n	800e51c <UART_SetConfig+0x80>
 800e508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e50a:	681a      	ldr	r2, [r3, #0]
 800e50c:	4b69      	ldr	r3, [pc, #420]	; (800e6b4 <UART_SetConfig+0x218>)
 800e50e:	429a      	cmp	r2, r3
 800e510:	d004      	beq.n	800e51c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e514:	6a1a      	ldr	r2, [r3, #32]
 800e516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e518:	4313      	orrs	r3, r2
 800e51a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	689b      	ldr	r3, [r3, #8]
 800e522:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800e526:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800e52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52c:	681a      	ldr	r2, [r3, #0]
 800e52e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e530:	430b      	orrs	r3, r1
 800e532:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e53a:	f023 000f 	bic.w	r0, r3, #15
 800e53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e540:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e544:	681a      	ldr	r2, [r3, #0]
 800e546:	ea40 0301 	orr.w	r3, r0, r1
 800e54a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54e:	681a      	ldr	r2, [r3, #0]
 800e550:	4b59      	ldr	r3, [pc, #356]	; (800e6b8 <UART_SetConfig+0x21c>)
 800e552:	429a      	cmp	r2, r3
 800e554:	d102      	bne.n	800e55c <UART_SetConfig+0xc0>
 800e556:	2301      	movs	r3, #1
 800e558:	64bb      	str	r3, [r7, #72]	; 0x48
 800e55a:	e029      	b.n	800e5b0 <UART_SetConfig+0x114>
 800e55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55e:	681a      	ldr	r2, [r3, #0]
 800e560:	4b56      	ldr	r3, [pc, #344]	; (800e6bc <UART_SetConfig+0x220>)
 800e562:	429a      	cmp	r2, r3
 800e564:	d102      	bne.n	800e56c <UART_SetConfig+0xd0>
 800e566:	2302      	movs	r3, #2
 800e568:	64bb      	str	r3, [r7, #72]	; 0x48
 800e56a:	e021      	b.n	800e5b0 <UART_SetConfig+0x114>
 800e56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56e:	681a      	ldr	r2, [r3, #0]
 800e570:	4b53      	ldr	r3, [pc, #332]	; (800e6c0 <UART_SetConfig+0x224>)
 800e572:	429a      	cmp	r2, r3
 800e574:	d102      	bne.n	800e57c <UART_SetConfig+0xe0>
 800e576:	2304      	movs	r3, #4
 800e578:	64bb      	str	r3, [r7, #72]	; 0x48
 800e57a:	e019      	b.n	800e5b0 <UART_SetConfig+0x114>
 800e57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e57e:	681a      	ldr	r2, [r3, #0]
 800e580:	4b50      	ldr	r3, [pc, #320]	; (800e6c4 <UART_SetConfig+0x228>)
 800e582:	429a      	cmp	r2, r3
 800e584:	d102      	bne.n	800e58c <UART_SetConfig+0xf0>
 800e586:	2308      	movs	r3, #8
 800e588:	64bb      	str	r3, [r7, #72]	; 0x48
 800e58a:	e011      	b.n	800e5b0 <UART_SetConfig+0x114>
 800e58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e58e:	681a      	ldr	r2, [r3, #0]
 800e590:	4b4d      	ldr	r3, [pc, #308]	; (800e6c8 <UART_SetConfig+0x22c>)
 800e592:	429a      	cmp	r2, r3
 800e594:	d102      	bne.n	800e59c <UART_SetConfig+0x100>
 800e596:	2310      	movs	r3, #16
 800e598:	64bb      	str	r3, [r7, #72]	; 0x48
 800e59a:	e009      	b.n	800e5b0 <UART_SetConfig+0x114>
 800e59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59e:	681a      	ldr	r2, [r3, #0]
 800e5a0:	4b42      	ldr	r3, [pc, #264]	; (800e6ac <UART_SetConfig+0x210>)
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d102      	bne.n	800e5ac <UART_SetConfig+0x110>
 800e5a6:	2320      	movs	r3, #32
 800e5a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e5aa:	e001      	b.n	800e5b0 <UART_SetConfig+0x114>
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b2:	681a      	ldr	r2, [r3, #0]
 800e5b4:	4b3d      	ldr	r3, [pc, #244]	; (800e6ac <UART_SetConfig+0x210>)
 800e5b6:	429a      	cmp	r2, r3
 800e5b8:	d005      	beq.n	800e5c6 <UART_SetConfig+0x12a>
 800e5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5bc:	681a      	ldr	r2, [r3, #0]
 800e5be:	4b3d      	ldr	r3, [pc, #244]	; (800e6b4 <UART_SetConfig+0x218>)
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	f040 8085 	bne.w	800e6d0 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e5c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	623b      	str	r3, [r7, #32]
 800e5cc:	627a      	str	r2, [r7, #36]	; 0x24
 800e5ce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e5d2:	f7fd f955 	bl	800b880 <HAL_RCCEx_GetPeriphCLKFreq>
 800e5d6:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800e5d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	f000 80e8 	beq.w	800e7b0 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e4:	4a39      	ldr	r2, [pc, #228]	; (800e6cc <UART_SetConfig+0x230>)
 800e5e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5ea:	461a      	mov	r2, r3
 800e5ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5f2:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f6:	685a      	ldr	r2, [r3, #4]
 800e5f8:	4613      	mov	r3, r2
 800e5fa:	005b      	lsls	r3, r3, #1
 800e5fc:	4413      	add	r3, r2
 800e5fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e600:	429a      	cmp	r2, r3
 800e602:	d305      	bcc.n	800e610 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e606:	685b      	ldr	r3, [r3, #4]
 800e608:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e60a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d903      	bls.n	800e618 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800e610:	2301      	movs	r3, #1
 800e612:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e616:	e048      	b.n	800e6aa <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e61a:	2200      	movs	r2, #0
 800e61c:	61bb      	str	r3, [r7, #24]
 800e61e:	61fa      	str	r2, [r7, #28]
 800e620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e624:	4a29      	ldr	r2, [pc, #164]	; (800e6cc <UART_SetConfig+0x230>)
 800e626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	2200      	movs	r2, #0
 800e62e:	613b      	str	r3, [r7, #16]
 800e630:	617a      	str	r2, [r7, #20]
 800e632:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e636:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e63a:	f7f2 fab9 	bl	8000bb0 <__aeabi_uldivmod>
 800e63e:	4602      	mov	r2, r0
 800e640:	460b      	mov	r3, r1
 800e642:	4610      	mov	r0, r2
 800e644:	4619      	mov	r1, r3
 800e646:	f04f 0200 	mov.w	r2, #0
 800e64a:	f04f 0300 	mov.w	r3, #0
 800e64e:	020b      	lsls	r3, r1, #8
 800e650:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e654:	0202      	lsls	r2, r0, #8
 800e656:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e658:	6849      	ldr	r1, [r1, #4]
 800e65a:	0849      	lsrs	r1, r1, #1
 800e65c:	2000      	movs	r0, #0
 800e65e:	460c      	mov	r4, r1
 800e660:	4605      	mov	r5, r0
 800e662:	eb12 0804 	adds.w	r8, r2, r4
 800e666:	eb43 0905 	adc.w	r9, r3, r5
 800e66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e66c:	685b      	ldr	r3, [r3, #4]
 800e66e:	2200      	movs	r2, #0
 800e670:	60bb      	str	r3, [r7, #8]
 800e672:	60fa      	str	r2, [r7, #12]
 800e674:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e678:	4640      	mov	r0, r8
 800e67a:	4649      	mov	r1, r9
 800e67c:	f7f2 fa98 	bl	8000bb0 <__aeabi_uldivmod>
 800e680:	4602      	mov	r2, r0
 800e682:	460b      	mov	r3, r1
 800e684:	4613      	mov	r3, r2
 800e686:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e68a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e68e:	d308      	bcc.n	800e6a2 <UART_SetConfig+0x206>
 800e690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e696:	d204      	bcs.n	800e6a2 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800e698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e69e:	60da      	str	r2, [r3, #12]
 800e6a0:	e003      	b.n	800e6aa <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800e6a8:	e082      	b.n	800e7b0 <UART_SetConfig+0x314>
 800e6aa:	e081      	b.n	800e7b0 <UART_SetConfig+0x314>
 800e6ac:	46002400 	.word	0x46002400
 800e6b0:	cfff69f3 	.word	0xcfff69f3
 800e6b4:	56002400 	.word	0x56002400
 800e6b8:	40013800 	.word	0x40013800
 800e6bc:	40004400 	.word	0x40004400
 800e6c0:	40004800 	.word	0x40004800
 800e6c4:	40004c00 	.word	0x40004c00
 800e6c8:	40005000 	.word	0x40005000
 800e6cc:	08011df4 	.word	0x08011df4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d2:	69db      	ldr	r3, [r3, #28]
 800e6d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e6d8:	d13c      	bne.n	800e754 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e6da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6dc:	2200      	movs	r2, #0
 800e6de:	603b      	str	r3, [r7, #0]
 800e6e0:	607a      	str	r2, [r7, #4]
 800e6e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e6e6:	f7fd f8cb 	bl	800b880 <HAL_RCCEx_GetPeriphCLKFreq>
 800e6ea:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e6ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d05e      	beq.n	800e7b0 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6f6:	4a39      	ldr	r2, [pc, #228]	; (800e7dc <UART_SetConfig+0x340>)
 800e6f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e6fc:	461a      	mov	r2, r3
 800e6fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e700:	fbb3 f3f2 	udiv	r3, r3, r2
 800e704:	005a      	lsls	r2, r3, #1
 800e706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e708:	685b      	ldr	r3, [r3, #4]
 800e70a:	085b      	lsrs	r3, r3, #1
 800e70c:	441a      	add	r2, r3
 800e70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e710:	685b      	ldr	r3, [r3, #4]
 800e712:	fbb2 f3f3 	udiv	r3, r2, r3
 800e716:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e71a:	2b0f      	cmp	r3, #15
 800e71c:	d916      	bls.n	800e74c <UART_SetConfig+0x2b0>
 800e71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e724:	d212      	bcs.n	800e74c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e728:	b29b      	uxth	r3, r3
 800e72a:	f023 030f 	bic.w	r3, r3, #15
 800e72e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e732:	085b      	lsrs	r3, r3, #1
 800e734:	b29b      	uxth	r3, r3
 800e736:	f003 0307 	and.w	r3, r3, #7
 800e73a:	b29a      	uxth	r2, r3
 800e73c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e73e:	4313      	orrs	r3, r2
 800e740:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800e742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e748:	60da      	str	r2, [r3, #12]
 800e74a:	e031      	b.n	800e7b0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800e74c:	2301      	movs	r3, #1
 800e74e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e752:	e02d      	b.n	800e7b0 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e756:	2200      	movs	r2, #0
 800e758:	469a      	mov	sl, r3
 800e75a:	4693      	mov	fp, r2
 800e75c:	4650      	mov	r0, sl
 800e75e:	4659      	mov	r1, fp
 800e760:	f7fd f88e 	bl	800b880 <HAL_RCCEx_GetPeriphCLKFreq>
 800e764:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800e766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d021      	beq.n	800e7b0 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e770:	4a1a      	ldr	r2, [pc, #104]	; (800e7dc <UART_SetConfig+0x340>)
 800e772:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e776:	461a      	mov	r2, r3
 800e778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e77a:	fbb3 f2f2 	udiv	r2, r3, r2
 800e77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	085b      	lsrs	r3, r3, #1
 800e784:	441a      	add	r2, r3
 800e786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e788:	685b      	ldr	r3, [r3, #4]
 800e78a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e78e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e792:	2b0f      	cmp	r3, #15
 800e794:	d909      	bls.n	800e7aa <UART_SetConfig+0x30e>
 800e796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e79c:	d205      	bcs.n	800e7aa <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e79e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7a0:	b29a      	uxth	r2, r3
 800e7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	60da      	str	r2, [r3, #12]
 800e7a8:	e002      	b.n	800e7b0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800e7aa:	2301      	movs	r3, #1
 800e7ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b2:	2201      	movs	r2, #1
 800e7b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ba:	2201      	movs	r2, #1
 800e7bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e7cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3750      	adds	r7, #80	; 0x50
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e7da:	bf00      	nop
 800e7dc:	08011df4 	.word	0x08011df4

0800e7e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7ec:	f003 0301 	and.w	r3, r3, #1
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d00a      	beq.n	800e80a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	685b      	ldr	r3, [r3, #4]
 800e7fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	430a      	orrs	r2, r1
 800e808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e80e:	f003 0302 	and.w	r3, r3, #2
 800e812:	2b00      	cmp	r3, #0
 800e814:	d00a      	beq.n	800e82c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	685b      	ldr	r3, [r3, #4]
 800e81c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	430a      	orrs	r2, r1
 800e82a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e830:	f003 0304 	and.w	r3, r3, #4
 800e834:	2b00      	cmp	r3, #0
 800e836:	d00a      	beq.n	800e84e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	430a      	orrs	r2, r1
 800e84c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e852:	f003 0308 	and.w	r3, r3, #8
 800e856:	2b00      	cmp	r3, #0
 800e858:	d00a      	beq.n	800e870 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	685b      	ldr	r3, [r3, #4]
 800e860:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	430a      	orrs	r2, r1
 800e86e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e874:	f003 0310 	and.w	r3, r3, #16
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d00a      	beq.n	800e892 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	689b      	ldr	r3, [r3, #8]
 800e882:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	430a      	orrs	r2, r1
 800e890:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e896:	f003 0320 	and.w	r3, r3, #32
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d00a      	beq.n	800e8b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	689b      	ldr	r3, [r3, #8]
 800e8a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	430a      	orrs	r2, r1
 800e8b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d01a      	beq.n	800e8f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	685b      	ldr	r3, [r3, #4]
 800e8c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	430a      	orrs	r2, r1
 800e8d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e8de:	d10a      	bne.n	800e8f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	430a      	orrs	r2, r1
 800e8f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d00a      	beq.n	800e918 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	685b      	ldr	r3, [r3, #4]
 800e908:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	430a      	orrs	r2, r1
 800e916:	605a      	str	r2, [r3, #4]
  }
}
 800e918:	bf00      	nop
 800e91a:	370c      	adds	r7, #12
 800e91c:	46bd      	mov	sp, r7
 800e91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e922:	4770      	bx	lr

0800e924 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b086      	sub	sp, #24
 800e928:	af02      	add	r7, sp, #8
 800e92a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2200      	movs	r2, #0
 800e930:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e934:	f7f6 fda4 	bl	8005480 <HAL_GetTick>
 800e938:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f003 0308 	and.w	r3, r3, #8
 800e944:	2b08      	cmp	r3, #8
 800e946:	d10e      	bne.n	800e966 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e948:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e94c:	9300      	str	r3, [sp, #0]
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2200      	movs	r2, #0
 800e952:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f000 f82f 	bl	800e9ba <UART_WaitOnFlagUntilTimeout>
 800e95c:	4603      	mov	r3, r0
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d001      	beq.n	800e966 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e962:	2303      	movs	r3, #3
 800e964:	e025      	b.n	800e9b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	f003 0304 	and.w	r3, r3, #4
 800e970:	2b04      	cmp	r3, #4
 800e972:	d10e      	bne.n	800e992 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e974:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e978:	9300      	str	r3, [sp, #0]
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	2200      	movs	r2, #0
 800e97e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f000 f819 	bl	800e9ba <UART_WaitOnFlagUntilTimeout>
 800e988:	4603      	mov	r3, r0
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d001      	beq.n	800e992 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e98e:	2303      	movs	r3, #3
 800e990:	e00f      	b.n	800e9b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2220      	movs	r2, #32
 800e996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2220      	movs	r2, #32
 800e99e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e9b0:	2300      	movs	r3, #0
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3710      	adds	r7, #16
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}

0800e9ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e9ba:	b580      	push	{r7, lr}
 800e9bc:	b09c      	sub	sp, #112	; 0x70
 800e9be:	af00      	add	r7, sp, #0
 800e9c0:	60f8      	str	r0, [r7, #12]
 800e9c2:	60b9      	str	r1, [r7, #8]
 800e9c4:	603b      	str	r3, [r7, #0]
 800e9c6:	4613      	mov	r3, r2
 800e9c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e9ca:	e0a9      	b.n	800eb20 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e9cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e9ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9d2:	f000 80a5 	beq.w	800eb20 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e9d6:	f7f6 fd53 	bl	8005480 <HAL_GetTick>
 800e9da:	4602      	mov	r2, r0
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	1ad3      	subs	r3, r2, r3
 800e9e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d302      	bcc.n	800e9ec <UART_WaitOnFlagUntilTimeout+0x32>
 800e9e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d140      	bne.n	800ea6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9f4:	e853 3f00 	ldrex	r3, [r3]
 800e9f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e9fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ea00:	667b      	str	r3, [r7, #100]	; 0x64
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	461a      	mov	r2, r3
 800ea08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea0c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ea10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ea12:	e841 2300 	strex	r3, r2, [r1]
 800ea16:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ea18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d1e6      	bne.n	800e9ec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	3308      	adds	r3, #8
 800ea24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea28:	e853 3f00 	ldrex	r3, [r3]
 800ea2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ea2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea30:	f023 0301 	bic.w	r3, r3, #1
 800ea34:	663b      	str	r3, [r7, #96]	; 0x60
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	3308      	adds	r3, #8
 800ea3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ea3e:	64ba      	str	r2, [r7, #72]	; 0x48
 800ea40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea46:	e841 2300 	strex	r3, r2, [r1]
 800ea4a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ea4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d1e5      	bne.n	800ea1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2220      	movs	r2, #32
 800ea56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	2220      	movs	r2, #32
 800ea5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2200      	movs	r2, #0
 800ea66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ea6a:	2303      	movs	r3, #3
 800ea6c:	e069      	b.n	800eb42 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	f003 0304 	and.w	r3, r3, #4
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d051      	beq.n	800eb20 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	69db      	ldr	r3, [r3, #28]
 800ea82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea8a:	d149      	bne.n	800eb20 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ea94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9e:	e853 3f00 	ldrex	r3, [r3]
 800eaa2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800eaaa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	461a      	mov	r2, r3
 800eab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eab4:	637b      	str	r3, [r7, #52]	; 0x34
 800eab6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eab8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eaba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eabc:	e841 2300 	strex	r3, r2, [r1]
 800eac0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800eac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d1e6      	bne.n	800ea96 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	3308      	adds	r3, #8
 800eace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	e853 3f00 	ldrex	r3, [r3]
 800ead6:	613b      	str	r3, [r7, #16]
   return(result);
 800ead8:	693b      	ldr	r3, [r7, #16]
 800eada:	f023 0301 	bic.w	r3, r3, #1
 800eade:	66bb      	str	r3, [r7, #104]	; 0x68
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	3308      	adds	r3, #8
 800eae6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800eae8:	623a      	str	r2, [r7, #32]
 800eaea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaec:	69f9      	ldr	r1, [r7, #28]
 800eaee:	6a3a      	ldr	r2, [r7, #32]
 800eaf0:	e841 2300 	strex	r3, r2, [r1]
 800eaf4:	61bb      	str	r3, [r7, #24]
   return(result);
 800eaf6:	69bb      	ldr	r3, [r7, #24]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d1e5      	bne.n	800eac8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2220      	movs	r2, #32
 800eb00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	2220      	movs	r2, #32
 800eb08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	2220      	movs	r2, #32
 800eb10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2200      	movs	r2, #0
 800eb18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800eb1c:	2303      	movs	r3, #3
 800eb1e:	e010      	b.n	800eb42 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	69da      	ldr	r2, [r3, #28]
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	4013      	ands	r3, r2
 800eb2a:	68ba      	ldr	r2, [r7, #8]
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	bf0c      	ite	eq
 800eb30:	2301      	moveq	r3, #1
 800eb32:	2300      	movne	r3, #0
 800eb34:	b2db      	uxtb	r3, r3
 800eb36:	461a      	mov	r2, r3
 800eb38:	79fb      	ldrb	r3, [r7, #7]
 800eb3a:	429a      	cmp	r2, r3
 800eb3c:	f43f af46 	beq.w	800e9cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eb40:	2300      	movs	r3, #0
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3770      	adds	r7, #112	; 0x70
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}

0800eb4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eb4a:	b480      	push	{r7}
 800eb4c:	b085      	sub	sp, #20
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb58:	2b01      	cmp	r3, #1
 800eb5a:	d101      	bne.n	800eb60 <HAL_UARTEx_DisableFifoMode+0x16>
 800eb5c:	2302      	movs	r3, #2
 800eb5e:	e027      	b.n	800ebb0 <HAL_UARTEx_DisableFifoMode+0x66>
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2201      	movs	r2, #1
 800eb64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2224      	movs	r2, #36	; 0x24
 800eb6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	681a      	ldr	r2, [r3, #0]
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	f022 0201 	bic.w	r2, r2, #1
 800eb86:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800eb8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2200      	movs	r2, #0
 800eb94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	68fa      	ldr	r2, [r7, #12]
 800eb9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2220      	movs	r2, #32
 800eba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ebae:	2300      	movs	r3, #0
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3714      	adds	r7, #20
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr

0800ebbc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b084      	sub	sp, #16
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
 800ebc4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ebcc:	2b01      	cmp	r3, #1
 800ebce:	d101      	bne.n	800ebd4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ebd0:	2302      	movs	r3, #2
 800ebd2:	e02d      	b.n	800ec30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2201      	movs	r2, #1
 800ebd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2224      	movs	r2, #36	; 0x24
 800ebe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	681a      	ldr	r2, [r3, #0]
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	f022 0201 	bic.w	r2, r2, #1
 800ebfa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	689b      	ldr	r3, [r3, #8]
 800ec02:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	683a      	ldr	r2, [r7, #0]
 800ec0c:	430a      	orrs	r2, r1
 800ec0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ec10:	6878      	ldr	r0, [r7, #4]
 800ec12:	f000 f84f 	bl	800ecb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	68fa      	ldr	r2, [r7, #12]
 800ec1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	2220      	movs	r2, #32
 800ec22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2200      	movs	r2, #0
 800ec2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ec2e:	2300      	movs	r3, #0
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	3710      	adds	r7, #16
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b084      	sub	sp, #16
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
 800ec40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec48:	2b01      	cmp	r3, #1
 800ec4a:	d101      	bne.n	800ec50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ec4c:	2302      	movs	r3, #2
 800ec4e:	e02d      	b.n	800ecac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2201      	movs	r2, #1
 800ec54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2224      	movs	r2, #36	; 0x24
 800ec5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	681a      	ldr	r2, [r3, #0]
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	f022 0201 	bic.w	r2, r2, #1
 800ec76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	689b      	ldr	r3, [r3, #8]
 800ec7e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	683a      	ldr	r2, [r7, #0]
 800ec88:	430a      	orrs	r2, r1
 800ec8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f000 f811 	bl	800ecb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	68fa      	ldr	r2, [r7, #12]
 800ec98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2220      	movs	r2, #32
 800ec9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2200      	movs	r2, #0
 800eca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ecaa:	2300      	movs	r3, #0
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3710      	adds	r7, #16
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b085      	sub	sp, #20
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d108      	bne.n	800ecd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2201      	movs	r2, #1
 800ecc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2201      	movs	r2, #1
 800ecd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ecd4:	e031      	b.n	800ed3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ecd6:	2308      	movs	r3, #8
 800ecd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ecda:	2308      	movs	r3, #8
 800ecdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	689b      	ldr	r3, [r3, #8]
 800ece4:	0e5b      	lsrs	r3, r3, #25
 800ece6:	b2db      	uxtb	r3, r3
 800ece8:	f003 0307 	and.w	r3, r3, #7
 800ecec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	689b      	ldr	r3, [r3, #8]
 800ecf4:	0f5b      	lsrs	r3, r3, #29
 800ecf6:	b2db      	uxtb	r3, r3
 800ecf8:	f003 0307 	and.w	r3, r3, #7
 800ecfc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ecfe:	7bbb      	ldrb	r3, [r7, #14]
 800ed00:	7b3a      	ldrb	r2, [r7, #12]
 800ed02:	4911      	ldr	r1, [pc, #68]	; (800ed48 <UARTEx_SetNbDataToProcess+0x94>)
 800ed04:	5c8a      	ldrb	r2, [r1, r2]
 800ed06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ed0a:	7b3a      	ldrb	r2, [r7, #12]
 800ed0c:	490f      	ldr	r1, [pc, #60]	; (800ed4c <UARTEx_SetNbDataToProcess+0x98>)
 800ed0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ed10:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed14:	b29a      	uxth	r2, r3
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ed1c:	7bfb      	ldrb	r3, [r7, #15]
 800ed1e:	7b7a      	ldrb	r2, [r7, #13]
 800ed20:	4909      	ldr	r1, [pc, #36]	; (800ed48 <UARTEx_SetNbDataToProcess+0x94>)
 800ed22:	5c8a      	ldrb	r2, [r1, r2]
 800ed24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ed28:	7b7a      	ldrb	r2, [r7, #13]
 800ed2a:	4908      	ldr	r1, [pc, #32]	; (800ed4c <UARTEx_SetNbDataToProcess+0x98>)
 800ed2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ed2e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed32:	b29a      	uxth	r2, r3
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ed3a:	bf00      	nop
 800ed3c:	3714      	adds	r7, #20
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed44:	4770      	bx	lr
 800ed46:	bf00      	nop
 800ed48:	08011e0c 	.word	0x08011e0c
 800ed4c:	08011e14 	.word	0x08011e14

0800ed50 <__errno>:
 800ed50:	4b01      	ldr	r3, [pc, #4]	; (800ed58 <__errno+0x8>)
 800ed52:	6818      	ldr	r0, [r3, #0]
 800ed54:	4770      	bx	lr
 800ed56:	bf00      	nop
 800ed58:	20000030 	.word	0x20000030

0800ed5c <__libc_init_array>:
 800ed5c:	b570      	push	{r4, r5, r6, lr}
 800ed5e:	4d0d      	ldr	r5, [pc, #52]	; (800ed94 <__libc_init_array+0x38>)
 800ed60:	2600      	movs	r6, #0
 800ed62:	4c0d      	ldr	r4, [pc, #52]	; (800ed98 <__libc_init_array+0x3c>)
 800ed64:	1b64      	subs	r4, r4, r5
 800ed66:	10a4      	asrs	r4, r4, #2
 800ed68:	42a6      	cmp	r6, r4
 800ed6a:	d109      	bne.n	800ed80 <__libc_init_array+0x24>
 800ed6c:	4d0b      	ldr	r5, [pc, #44]	; (800ed9c <__libc_init_array+0x40>)
 800ed6e:	2600      	movs	r6, #0
 800ed70:	4c0b      	ldr	r4, [pc, #44]	; (800eda0 <__libc_init_array+0x44>)
 800ed72:	f002 ff1b 	bl	8011bac <_init>
 800ed76:	1b64      	subs	r4, r4, r5
 800ed78:	10a4      	asrs	r4, r4, #2
 800ed7a:	42a6      	cmp	r6, r4
 800ed7c:	d105      	bne.n	800ed8a <__libc_init_array+0x2e>
 800ed7e:	bd70      	pop	{r4, r5, r6, pc}
 800ed80:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed84:	3601      	adds	r6, #1
 800ed86:	4798      	blx	r3
 800ed88:	e7ee      	b.n	800ed68 <__libc_init_array+0xc>
 800ed8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed8e:	3601      	adds	r6, #1
 800ed90:	4798      	blx	r3
 800ed92:	e7f2      	b.n	800ed7a <__libc_init_array+0x1e>
 800ed94:	080121fc 	.word	0x080121fc
 800ed98:	080121fc 	.word	0x080121fc
 800ed9c:	080121fc 	.word	0x080121fc
 800eda0:	08012200 	.word	0x08012200

0800eda4 <memcpy>:
 800eda4:	440a      	add	r2, r1
 800eda6:	1e43      	subs	r3, r0, #1
 800eda8:	4291      	cmp	r1, r2
 800edaa:	d100      	bne.n	800edae <memcpy+0xa>
 800edac:	4770      	bx	lr
 800edae:	b510      	push	{r4, lr}
 800edb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800edb4:	4291      	cmp	r1, r2
 800edb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800edba:	d1f9      	bne.n	800edb0 <memcpy+0xc>
 800edbc:	bd10      	pop	{r4, pc}

0800edbe <memset>:
 800edbe:	4402      	add	r2, r0
 800edc0:	4603      	mov	r3, r0
 800edc2:	4293      	cmp	r3, r2
 800edc4:	d100      	bne.n	800edc8 <memset+0xa>
 800edc6:	4770      	bx	lr
 800edc8:	f803 1b01 	strb.w	r1, [r3], #1
 800edcc:	e7f9      	b.n	800edc2 <memset+0x4>

0800edce <__cvt>:
 800edce:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800edd2:	ec55 4b10 	vmov	r4, r5, d0
 800edd6:	2d00      	cmp	r5, #0
 800edd8:	460e      	mov	r6, r1
 800edda:	4619      	mov	r1, r3
 800eddc:	462b      	mov	r3, r5
 800edde:	bfb4      	ite	lt
 800ede0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ede4:	2300      	movge	r3, #0
 800ede6:	4691      	mov	r9, r2
 800ede8:	bfbf      	itttt	lt
 800edea:	4622      	movlt	r2, r4
 800edec:	461d      	movlt	r5, r3
 800edee:	232d      	movlt	r3, #45	; 0x2d
 800edf0:	4614      	movlt	r4, r2
 800edf2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800edf6:	700b      	strb	r3, [r1, #0]
 800edf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800edfa:	f023 0820 	bic.w	r8, r3, #32
 800edfe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ee02:	d005      	beq.n	800ee10 <__cvt+0x42>
 800ee04:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ee08:	d100      	bne.n	800ee0c <__cvt+0x3e>
 800ee0a:	3601      	adds	r6, #1
 800ee0c:	2102      	movs	r1, #2
 800ee0e:	e000      	b.n	800ee12 <__cvt+0x44>
 800ee10:	2103      	movs	r1, #3
 800ee12:	ab03      	add	r3, sp, #12
 800ee14:	4632      	mov	r2, r6
 800ee16:	9301      	str	r3, [sp, #4]
 800ee18:	ab02      	add	r3, sp, #8
 800ee1a:	ec45 4b10 	vmov	d0, r4, r5
 800ee1e:	9300      	str	r3, [sp, #0]
 800ee20:	4653      	mov	r3, sl
 800ee22:	f000 fcf5 	bl	800f810 <_dtoa_r>
 800ee26:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ee2a:	4607      	mov	r7, r0
 800ee2c:	d102      	bne.n	800ee34 <__cvt+0x66>
 800ee2e:	f019 0f01 	tst.w	r9, #1
 800ee32:	d022      	beq.n	800ee7a <__cvt+0xac>
 800ee34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ee38:	eb07 0906 	add.w	r9, r7, r6
 800ee3c:	d110      	bne.n	800ee60 <__cvt+0x92>
 800ee3e:	783b      	ldrb	r3, [r7, #0]
 800ee40:	2b30      	cmp	r3, #48	; 0x30
 800ee42:	d10a      	bne.n	800ee5a <__cvt+0x8c>
 800ee44:	2200      	movs	r2, #0
 800ee46:	2300      	movs	r3, #0
 800ee48:	4620      	mov	r0, r4
 800ee4a:	4629      	mov	r1, r5
 800ee4c:	f7f1 fe40 	bl	8000ad0 <__aeabi_dcmpeq>
 800ee50:	b918      	cbnz	r0, 800ee5a <__cvt+0x8c>
 800ee52:	f1c6 0601 	rsb	r6, r6, #1
 800ee56:	f8ca 6000 	str.w	r6, [sl]
 800ee5a:	f8da 3000 	ldr.w	r3, [sl]
 800ee5e:	4499      	add	r9, r3
 800ee60:	2200      	movs	r2, #0
 800ee62:	2300      	movs	r3, #0
 800ee64:	4620      	mov	r0, r4
 800ee66:	4629      	mov	r1, r5
 800ee68:	f7f1 fe32 	bl	8000ad0 <__aeabi_dcmpeq>
 800ee6c:	b108      	cbz	r0, 800ee72 <__cvt+0xa4>
 800ee6e:	f8cd 900c 	str.w	r9, [sp, #12]
 800ee72:	2230      	movs	r2, #48	; 0x30
 800ee74:	9b03      	ldr	r3, [sp, #12]
 800ee76:	454b      	cmp	r3, r9
 800ee78:	d307      	bcc.n	800ee8a <__cvt+0xbc>
 800ee7a:	9b03      	ldr	r3, [sp, #12]
 800ee7c:	4638      	mov	r0, r7
 800ee7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee80:	1bdb      	subs	r3, r3, r7
 800ee82:	6013      	str	r3, [r2, #0]
 800ee84:	b004      	add	sp, #16
 800ee86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee8a:	1c59      	adds	r1, r3, #1
 800ee8c:	9103      	str	r1, [sp, #12]
 800ee8e:	701a      	strb	r2, [r3, #0]
 800ee90:	e7f0      	b.n	800ee74 <__cvt+0xa6>

0800ee92 <__exponent>:
 800ee92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee94:	2900      	cmp	r1, #0
 800ee96:	4603      	mov	r3, r0
 800ee98:	bfb8      	it	lt
 800ee9a:	4249      	neglt	r1, r1
 800ee9c:	f803 2b02 	strb.w	r2, [r3], #2
 800eea0:	bfb4      	ite	lt
 800eea2:	222d      	movlt	r2, #45	; 0x2d
 800eea4:	222b      	movge	r2, #43	; 0x2b
 800eea6:	2909      	cmp	r1, #9
 800eea8:	7042      	strb	r2, [r0, #1]
 800eeaa:	dd2a      	ble.n	800ef02 <__exponent+0x70>
 800eeac:	f10d 0407 	add.w	r4, sp, #7
 800eeb0:	270a      	movs	r7, #10
 800eeb2:	46a4      	mov	ip, r4
 800eeb4:	460a      	mov	r2, r1
 800eeb6:	46a6      	mov	lr, r4
 800eeb8:	3c01      	subs	r4, #1
 800eeba:	2a63      	cmp	r2, #99	; 0x63
 800eebc:	fb91 f6f7 	sdiv	r6, r1, r7
 800eec0:	fb07 1516 	mls	r5, r7, r6, r1
 800eec4:	4631      	mov	r1, r6
 800eec6:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800eeca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800eece:	dcf1      	bgt.n	800eeb4 <__exponent+0x22>
 800eed0:	3130      	adds	r1, #48	; 0x30
 800eed2:	f1ae 0502 	sub.w	r5, lr, #2
 800eed6:	f804 1c01 	strb.w	r1, [r4, #-1]
 800eeda:	1c44      	adds	r4, r0, #1
 800eedc:	4629      	mov	r1, r5
 800eede:	4561      	cmp	r1, ip
 800eee0:	d30a      	bcc.n	800eef8 <__exponent+0x66>
 800eee2:	f10d 0209 	add.w	r2, sp, #9
 800eee6:	eba2 020e 	sub.w	r2, r2, lr
 800eeea:	4565      	cmp	r5, ip
 800eeec:	bf88      	it	hi
 800eeee:	2200      	movhi	r2, #0
 800eef0:	4413      	add	r3, r2
 800eef2:	1a18      	subs	r0, r3, r0
 800eef4:	b003      	add	sp, #12
 800eef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eef8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eefc:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ef00:	e7ed      	b.n	800eede <__exponent+0x4c>
 800ef02:	2330      	movs	r3, #48	; 0x30
 800ef04:	3130      	adds	r1, #48	; 0x30
 800ef06:	7083      	strb	r3, [r0, #2]
 800ef08:	1d03      	adds	r3, r0, #4
 800ef0a:	70c1      	strb	r1, [r0, #3]
 800ef0c:	e7f1      	b.n	800eef2 <__exponent+0x60>
	...

0800ef10 <_printf_float>:
 800ef10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef14:	ed2d 8b02 	vpush	{d8}
 800ef18:	b08d      	sub	sp, #52	; 0x34
 800ef1a:	460c      	mov	r4, r1
 800ef1c:	4616      	mov	r6, r2
 800ef1e:	461f      	mov	r7, r3
 800ef20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ef24:	4605      	mov	r5, r0
 800ef26:	f001 fa5f 	bl	80103e8 <_localeconv_r>
 800ef2a:	f8d0 a000 	ldr.w	sl, [r0]
 800ef2e:	4650      	mov	r0, sl
 800ef30:	f7f1 f9a2 	bl	8000278 <strlen>
 800ef34:	2300      	movs	r3, #0
 800ef36:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ef3a:	ee08 0a10 	vmov	s16, r0
 800ef3e:	930a      	str	r3, [sp, #40]	; 0x28
 800ef40:	6823      	ldr	r3, [r4, #0]
 800ef42:	9305      	str	r3, [sp, #20]
 800ef44:	f8d8 3000 	ldr.w	r3, [r8]
 800ef48:	3307      	adds	r3, #7
 800ef4a:	f023 0307 	bic.w	r3, r3, #7
 800ef4e:	f103 0208 	add.w	r2, r3, #8
 800ef52:	f8c8 2000 	str.w	r2, [r8]
 800ef56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef5a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ef5e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ef62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ef66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ef6a:	f8cd 8018 	str.w	r8, [sp, #24]
 800ef6e:	9307      	str	r3, [sp, #28]
 800ef70:	4b9e      	ldr	r3, [pc, #632]	; (800f1ec <_printf_float+0x2dc>)
 800ef72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef76:	f7f1 fddd 	bl	8000b34 <__aeabi_dcmpun>
 800ef7a:	bb88      	cbnz	r0, 800efe0 <_printf_float+0xd0>
 800ef7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ef80:	4b9a      	ldr	r3, [pc, #616]	; (800f1ec <_printf_float+0x2dc>)
 800ef82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef86:	f7f1 fdb7 	bl	8000af8 <__aeabi_dcmple>
 800ef8a:	bb48      	cbnz	r0, 800efe0 <_printf_float+0xd0>
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	2300      	movs	r3, #0
 800ef90:	4640      	mov	r0, r8
 800ef92:	4649      	mov	r1, r9
 800ef94:	f7f1 fda6 	bl	8000ae4 <__aeabi_dcmplt>
 800ef98:	b110      	cbz	r0, 800efa0 <_printf_float+0x90>
 800ef9a:	232d      	movs	r3, #45	; 0x2d
 800ef9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800efa0:	4b93      	ldr	r3, [pc, #588]	; (800f1f0 <_printf_float+0x2e0>)
 800efa2:	4894      	ldr	r0, [pc, #592]	; (800f1f4 <_printf_float+0x2e4>)
 800efa4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800efa8:	bf94      	ite	ls
 800efaa:	4698      	movls	r8, r3
 800efac:	4680      	movhi	r8, r0
 800efae:	2303      	movs	r3, #3
 800efb0:	f04f 0900 	mov.w	r9, #0
 800efb4:	6123      	str	r3, [r4, #16]
 800efb6:	9b05      	ldr	r3, [sp, #20]
 800efb8:	f023 0204 	bic.w	r2, r3, #4
 800efbc:	6022      	str	r2, [r4, #0]
 800efbe:	4633      	mov	r3, r6
 800efc0:	aa0b      	add	r2, sp, #44	; 0x2c
 800efc2:	4621      	mov	r1, r4
 800efc4:	4628      	mov	r0, r5
 800efc6:	9700      	str	r7, [sp, #0]
 800efc8:	f000 f9d8 	bl	800f37c <_printf_common>
 800efcc:	3001      	adds	r0, #1
 800efce:	f040 8090 	bne.w	800f0f2 <_printf_float+0x1e2>
 800efd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800efd6:	b00d      	add	sp, #52	; 0x34
 800efd8:	ecbd 8b02 	vpop	{d8}
 800efdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efe0:	4642      	mov	r2, r8
 800efe2:	464b      	mov	r3, r9
 800efe4:	4640      	mov	r0, r8
 800efe6:	4649      	mov	r1, r9
 800efe8:	f7f1 fda4 	bl	8000b34 <__aeabi_dcmpun>
 800efec:	b140      	cbz	r0, 800f000 <_printf_float+0xf0>
 800efee:	464b      	mov	r3, r9
 800eff0:	4881      	ldr	r0, [pc, #516]	; (800f1f8 <_printf_float+0x2e8>)
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	bfbc      	itt	lt
 800eff6:	232d      	movlt	r3, #45	; 0x2d
 800eff8:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800effc:	4b7f      	ldr	r3, [pc, #508]	; (800f1fc <_printf_float+0x2ec>)
 800effe:	e7d1      	b.n	800efa4 <_printf_float+0x94>
 800f000:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f004:	6863      	ldr	r3, [r4, #4]
 800f006:	9206      	str	r2, [sp, #24]
 800f008:	1c5a      	adds	r2, r3, #1
 800f00a:	d13f      	bne.n	800f08c <_printf_float+0x17c>
 800f00c:	2306      	movs	r3, #6
 800f00e:	6063      	str	r3, [r4, #4]
 800f010:	9b05      	ldr	r3, [sp, #20]
 800f012:	4628      	mov	r0, r5
 800f014:	6861      	ldr	r1, [r4, #4]
 800f016:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f01a:	2300      	movs	r3, #0
 800f01c:	9303      	str	r3, [sp, #12]
 800f01e:	ab0a      	add	r3, sp, #40	; 0x28
 800f020:	6022      	str	r2, [r4, #0]
 800f022:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f026:	ab09      	add	r3, sp, #36	; 0x24
 800f028:	ec49 8b10 	vmov	d0, r8, r9
 800f02c:	9300      	str	r3, [sp, #0]
 800f02e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f032:	f7ff fecc 	bl	800edce <__cvt>
 800f036:	9b06      	ldr	r3, [sp, #24]
 800f038:	4680      	mov	r8, r0
 800f03a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f03c:	2b47      	cmp	r3, #71	; 0x47
 800f03e:	d108      	bne.n	800f052 <_printf_float+0x142>
 800f040:	1cc8      	adds	r0, r1, #3
 800f042:	db02      	blt.n	800f04a <_printf_float+0x13a>
 800f044:	6863      	ldr	r3, [r4, #4]
 800f046:	4299      	cmp	r1, r3
 800f048:	dd41      	ble.n	800f0ce <_printf_float+0x1be>
 800f04a:	f1ab 0b02 	sub.w	fp, fp, #2
 800f04e:	fa5f fb8b 	uxtb.w	fp, fp
 800f052:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f056:	d820      	bhi.n	800f09a <_printf_float+0x18a>
 800f058:	3901      	subs	r1, #1
 800f05a:	465a      	mov	r2, fp
 800f05c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f060:	9109      	str	r1, [sp, #36]	; 0x24
 800f062:	f7ff ff16 	bl	800ee92 <__exponent>
 800f066:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f068:	4681      	mov	r9, r0
 800f06a:	1813      	adds	r3, r2, r0
 800f06c:	2a01      	cmp	r2, #1
 800f06e:	6123      	str	r3, [r4, #16]
 800f070:	dc02      	bgt.n	800f078 <_printf_float+0x168>
 800f072:	6822      	ldr	r2, [r4, #0]
 800f074:	07d2      	lsls	r2, r2, #31
 800f076:	d501      	bpl.n	800f07c <_printf_float+0x16c>
 800f078:	3301      	adds	r3, #1
 800f07a:	6123      	str	r3, [r4, #16]
 800f07c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f080:	2b00      	cmp	r3, #0
 800f082:	d09c      	beq.n	800efbe <_printf_float+0xae>
 800f084:	232d      	movs	r3, #45	; 0x2d
 800f086:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f08a:	e798      	b.n	800efbe <_printf_float+0xae>
 800f08c:	9a06      	ldr	r2, [sp, #24]
 800f08e:	2a47      	cmp	r2, #71	; 0x47
 800f090:	d1be      	bne.n	800f010 <_printf_float+0x100>
 800f092:	2b00      	cmp	r3, #0
 800f094:	d1bc      	bne.n	800f010 <_printf_float+0x100>
 800f096:	2301      	movs	r3, #1
 800f098:	e7b9      	b.n	800f00e <_printf_float+0xfe>
 800f09a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f09e:	d118      	bne.n	800f0d2 <_printf_float+0x1c2>
 800f0a0:	2900      	cmp	r1, #0
 800f0a2:	6863      	ldr	r3, [r4, #4]
 800f0a4:	dd0b      	ble.n	800f0be <_printf_float+0x1ae>
 800f0a6:	6121      	str	r1, [r4, #16]
 800f0a8:	b913      	cbnz	r3, 800f0b0 <_printf_float+0x1a0>
 800f0aa:	6822      	ldr	r2, [r4, #0]
 800f0ac:	07d0      	lsls	r0, r2, #31
 800f0ae:	d502      	bpl.n	800f0b6 <_printf_float+0x1a6>
 800f0b0:	3301      	adds	r3, #1
 800f0b2:	440b      	add	r3, r1
 800f0b4:	6123      	str	r3, [r4, #16]
 800f0b6:	f04f 0900 	mov.w	r9, #0
 800f0ba:	65a1      	str	r1, [r4, #88]	; 0x58
 800f0bc:	e7de      	b.n	800f07c <_printf_float+0x16c>
 800f0be:	b913      	cbnz	r3, 800f0c6 <_printf_float+0x1b6>
 800f0c0:	6822      	ldr	r2, [r4, #0]
 800f0c2:	07d2      	lsls	r2, r2, #31
 800f0c4:	d501      	bpl.n	800f0ca <_printf_float+0x1ba>
 800f0c6:	3302      	adds	r3, #2
 800f0c8:	e7f4      	b.n	800f0b4 <_printf_float+0x1a4>
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	e7f2      	b.n	800f0b4 <_printf_float+0x1a4>
 800f0ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f0d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0d4:	4299      	cmp	r1, r3
 800f0d6:	db05      	blt.n	800f0e4 <_printf_float+0x1d4>
 800f0d8:	6823      	ldr	r3, [r4, #0]
 800f0da:	6121      	str	r1, [r4, #16]
 800f0dc:	07d8      	lsls	r0, r3, #31
 800f0de:	d5ea      	bpl.n	800f0b6 <_printf_float+0x1a6>
 800f0e0:	1c4b      	adds	r3, r1, #1
 800f0e2:	e7e7      	b.n	800f0b4 <_printf_float+0x1a4>
 800f0e4:	2900      	cmp	r1, #0
 800f0e6:	bfd4      	ite	le
 800f0e8:	f1c1 0202 	rsble	r2, r1, #2
 800f0ec:	2201      	movgt	r2, #1
 800f0ee:	4413      	add	r3, r2
 800f0f0:	e7e0      	b.n	800f0b4 <_printf_float+0x1a4>
 800f0f2:	6823      	ldr	r3, [r4, #0]
 800f0f4:	055a      	lsls	r2, r3, #21
 800f0f6:	d407      	bmi.n	800f108 <_printf_float+0x1f8>
 800f0f8:	6923      	ldr	r3, [r4, #16]
 800f0fa:	4642      	mov	r2, r8
 800f0fc:	4631      	mov	r1, r6
 800f0fe:	4628      	mov	r0, r5
 800f100:	47b8      	blx	r7
 800f102:	3001      	adds	r0, #1
 800f104:	d12c      	bne.n	800f160 <_printf_float+0x250>
 800f106:	e764      	b.n	800efd2 <_printf_float+0xc2>
 800f108:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f10c:	f240 80e0 	bls.w	800f2d0 <_printf_float+0x3c0>
 800f110:	2200      	movs	r2, #0
 800f112:	2300      	movs	r3, #0
 800f114:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f118:	f7f1 fcda 	bl	8000ad0 <__aeabi_dcmpeq>
 800f11c:	2800      	cmp	r0, #0
 800f11e:	d034      	beq.n	800f18a <_printf_float+0x27a>
 800f120:	2301      	movs	r3, #1
 800f122:	4a37      	ldr	r2, [pc, #220]	; (800f200 <_printf_float+0x2f0>)
 800f124:	4631      	mov	r1, r6
 800f126:	4628      	mov	r0, r5
 800f128:	47b8      	blx	r7
 800f12a:	3001      	adds	r0, #1
 800f12c:	f43f af51 	beq.w	800efd2 <_printf_float+0xc2>
 800f130:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f134:	429a      	cmp	r2, r3
 800f136:	db02      	blt.n	800f13e <_printf_float+0x22e>
 800f138:	6823      	ldr	r3, [r4, #0]
 800f13a:	07d8      	lsls	r0, r3, #31
 800f13c:	d510      	bpl.n	800f160 <_printf_float+0x250>
 800f13e:	ee18 3a10 	vmov	r3, s16
 800f142:	4652      	mov	r2, sl
 800f144:	4631      	mov	r1, r6
 800f146:	4628      	mov	r0, r5
 800f148:	47b8      	blx	r7
 800f14a:	3001      	adds	r0, #1
 800f14c:	f43f af41 	beq.w	800efd2 <_printf_float+0xc2>
 800f150:	f04f 0800 	mov.w	r8, #0
 800f154:	f104 091a 	add.w	r9, r4, #26
 800f158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f15a:	3b01      	subs	r3, #1
 800f15c:	4543      	cmp	r3, r8
 800f15e:	dc09      	bgt.n	800f174 <_printf_float+0x264>
 800f160:	6823      	ldr	r3, [r4, #0]
 800f162:	079b      	lsls	r3, r3, #30
 800f164:	f100 8105 	bmi.w	800f372 <_printf_float+0x462>
 800f168:	68e0      	ldr	r0, [r4, #12]
 800f16a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f16c:	4298      	cmp	r0, r3
 800f16e:	bfb8      	it	lt
 800f170:	4618      	movlt	r0, r3
 800f172:	e730      	b.n	800efd6 <_printf_float+0xc6>
 800f174:	2301      	movs	r3, #1
 800f176:	464a      	mov	r2, r9
 800f178:	4631      	mov	r1, r6
 800f17a:	4628      	mov	r0, r5
 800f17c:	47b8      	blx	r7
 800f17e:	3001      	adds	r0, #1
 800f180:	f43f af27 	beq.w	800efd2 <_printf_float+0xc2>
 800f184:	f108 0801 	add.w	r8, r8, #1
 800f188:	e7e6      	b.n	800f158 <_printf_float+0x248>
 800f18a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	dc39      	bgt.n	800f204 <_printf_float+0x2f4>
 800f190:	2301      	movs	r3, #1
 800f192:	4a1b      	ldr	r2, [pc, #108]	; (800f200 <_printf_float+0x2f0>)
 800f194:	4631      	mov	r1, r6
 800f196:	4628      	mov	r0, r5
 800f198:	47b8      	blx	r7
 800f19a:	3001      	adds	r0, #1
 800f19c:	f43f af19 	beq.w	800efd2 <_printf_float+0xc2>
 800f1a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f1a4:	4313      	orrs	r3, r2
 800f1a6:	d102      	bne.n	800f1ae <_printf_float+0x29e>
 800f1a8:	6823      	ldr	r3, [r4, #0]
 800f1aa:	07d9      	lsls	r1, r3, #31
 800f1ac:	d5d8      	bpl.n	800f160 <_printf_float+0x250>
 800f1ae:	ee18 3a10 	vmov	r3, s16
 800f1b2:	4652      	mov	r2, sl
 800f1b4:	4631      	mov	r1, r6
 800f1b6:	4628      	mov	r0, r5
 800f1b8:	47b8      	blx	r7
 800f1ba:	3001      	adds	r0, #1
 800f1bc:	f43f af09 	beq.w	800efd2 <_printf_float+0xc2>
 800f1c0:	f04f 0900 	mov.w	r9, #0
 800f1c4:	f104 0a1a 	add.w	sl, r4, #26
 800f1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1ca:	425b      	negs	r3, r3
 800f1cc:	454b      	cmp	r3, r9
 800f1ce:	dc01      	bgt.n	800f1d4 <_printf_float+0x2c4>
 800f1d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1d2:	e792      	b.n	800f0fa <_printf_float+0x1ea>
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	4652      	mov	r2, sl
 800f1d8:	4631      	mov	r1, r6
 800f1da:	4628      	mov	r0, r5
 800f1dc:	47b8      	blx	r7
 800f1de:	3001      	adds	r0, #1
 800f1e0:	f43f aef7 	beq.w	800efd2 <_printf_float+0xc2>
 800f1e4:	f109 0901 	add.w	r9, r9, #1
 800f1e8:	e7ee      	b.n	800f1c8 <_printf_float+0x2b8>
 800f1ea:	bf00      	nop
 800f1ec:	7fefffff 	.word	0x7fefffff
 800f1f0:	08011e20 	.word	0x08011e20
 800f1f4:	08011e24 	.word	0x08011e24
 800f1f8:	08011e2c 	.word	0x08011e2c
 800f1fc:	08011e28 	.word	0x08011e28
 800f200:	08011e30 	.word	0x08011e30
 800f204:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f206:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f208:	429a      	cmp	r2, r3
 800f20a:	bfa8      	it	ge
 800f20c:	461a      	movge	r2, r3
 800f20e:	2a00      	cmp	r2, #0
 800f210:	4691      	mov	r9, r2
 800f212:	dc37      	bgt.n	800f284 <_printf_float+0x374>
 800f214:	f04f 0b00 	mov.w	fp, #0
 800f218:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f21c:	f104 021a 	add.w	r2, r4, #26
 800f220:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f222:	9305      	str	r3, [sp, #20]
 800f224:	eba3 0309 	sub.w	r3, r3, r9
 800f228:	455b      	cmp	r3, fp
 800f22a:	dc33      	bgt.n	800f294 <_printf_float+0x384>
 800f22c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f230:	429a      	cmp	r2, r3
 800f232:	db3b      	blt.n	800f2ac <_printf_float+0x39c>
 800f234:	6823      	ldr	r3, [r4, #0]
 800f236:	07da      	lsls	r2, r3, #31
 800f238:	d438      	bmi.n	800f2ac <_printf_float+0x39c>
 800f23a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f23c:	9a05      	ldr	r2, [sp, #20]
 800f23e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f240:	1a9a      	subs	r2, r3, r2
 800f242:	eba3 0901 	sub.w	r9, r3, r1
 800f246:	4591      	cmp	r9, r2
 800f248:	bfa8      	it	ge
 800f24a:	4691      	movge	r9, r2
 800f24c:	f1b9 0f00 	cmp.w	r9, #0
 800f250:	dc35      	bgt.n	800f2be <_printf_float+0x3ae>
 800f252:	f04f 0800 	mov.w	r8, #0
 800f256:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f25a:	f104 0a1a 	add.w	sl, r4, #26
 800f25e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f262:	1a9b      	subs	r3, r3, r2
 800f264:	eba3 0309 	sub.w	r3, r3, r9
 800f268:	4543      	cmp	r3, r8
 800f26a:	f77f af79 	ble.w	800f160 <_printf_float+0x250>
 800f26e:	2301      	movs	r3, #1
 800f270:	4652      	mov	r2, sl
 800f272:	4631      	mov	r1, r6
 800f274:	4628      	mov	r0, r5
 800f276:	47b8      	blx	r7
 800f278:	3001      	adds	r0, #1
 800f27a:	f43f aeaa 	beq.w	800efd2 <_printf_float+0xc2>
 800f27e:	f108 0801 	add.w	r8, r8, #1
 800f282:	e7ec      	b.n	800f25e <_printf_float+0x34e>
 800f284:	4613      	mov	r3, r2
 800f286:	4631      	mov	r1, r6
 800f288:	4642      	mov	r2, r8
 800f28a:	4628      	mov	r0, r5
 800f28c:	47b8      	blx	r7
 800f28e:	3001      	adds	r0, #1
 800f290:	d1c0      	bne.n	800f214 <_printf_float+0x304>
 800f292:	e69e      	b.n	800efd2 <_printf_float+0xc2>
 800f294:	2301      	movs	r3, #1
 800f296:	4631      	mov	r1, r6
 800f298:	4628      	mov	r0, r5
 800f29a:	9205      	str	r2, [sp, #20]
 800f29c:	47b8      	blx	r7
 800f29e:	3001      	adds	r0, #1
 800f2a0:	f43f ae97 	beq.w	800efd2 <_printf_float+0xc2>
 800f2a4:	f10b 0b01 	add.w	fp, fp, #1
 800f2a8:	9a05      	ldr	r2, [sp, #20]
 800f2aa:	e7b9      	b.n	800f220 <_printf_float+0x310>
 800f2ac:	ee18 3a10 	vmov	r3, s16
 800f2b0:	4652      	mov	r2, sl
 800f2b2:	4631      	mov	r1, r6
 800f2b4:	4628      	mov	r0, r5
 800f2b6:	47b8      	blx	r7
 800f2b8:	3001      	adds	r0, #1
 800f2ba:	d1be      	bne.n	800f23a <_printf_float+0x32a>
 800f2bc:	e689      	b.n	800efd2 <_printf_float+0xc2>
 800f2be:	9a05      	ldr	r2, [sp, #20]
 800f2c0:	464b      	mov	r3, r9
 800f2c2:	4631      	mov	r1, r6
 800f2c4:	4628      	mov	r0, r5
 800f2c6:	4442      	add	r2, r8
 800f2c8:	47b8      	blx	r7
 800f2ca:	3001      	adds	r0, #1
 800f2cc:	d1c1      	bne.n	800f252 <_printf_float+0x342>
 800f2ce:	e680      	b.n	800efd2 <_printf_float+0xc2>
 800f2d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2d2:	2a01      	cmp	r2, #1
 800f2d4:	dc01      	bgt.n	800f2da <_printf_float+0x3ca>
 800f2d6:	07db      	lsls	r3, r3, #31
 800f2d8:	d538      	bpl.n	800f34c <_printf_float+0x43c>
 800f2da:	2301      	movs	r3, #1
 800f2dc:	4642      	mov	r2, r8
 800f2de:	4631      	mov	r1, r6
 800f2e0:	4628      	mov	r0, r5
 800f2e2:	47b8      	blx	r7
 800f2e4:	3001      	adds	r0, #1
 800f2e6:	f43f ae74 	beq.w	800efd2 <_printf_float+0xc2>
 800f2ea:	ee18 3a10 	vmov	r3, s16
 800f2ee:	4652      	mov	r2, sl
 800f2f0:	4631      	mov	r1, r6
 800f2f2:	4628      	mov	r0, r5
 800f2f4:	47b8      	blx	r7
 800f2f6:	3001      	adds	r0, #1
 800f2f8:	f43f ae6b 	beq.w	800efd2 <_printf_float+0xc2>
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	2300      	movs	r3, #0
 800f300:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f304:	f7f1 fbe4 	bl	8000ad0 <__aeabi_dcmpeq>
 800f308:	b9d8      	cbnz	r0, 800f342 <_printf_float+0x432>
 800f30a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f30c:	f108 0201 	add.w	r2, r8, #1
 800f310:	3b01      	subs	r3, #1
 800f312:	4631      	mov	r1, r6
 800f314:	4628      	mov	r0, r5
 800f316:	47b8      	blx	r7
 800f318:	3001      	adds	r0, #1
 800f31a:	d10e      	bne.n	800f33a <_printf_float+0x42a>
 800f31c:	e659      	b.n	800efd2 <_printf_float+0xc2>
 800f31e:	2301      	movs	r3, #1
 800f320:	4652      	mov	r2, sl
 800f322:	4631      	mov	r1, r6
 800f324:	4628      	mov	r0, r5
 800f326:	47b8      	blx	r7
 800f328:	3001      	adds	r0, #1
 800f32a:	f43f ae52 	beq.w	800efd2 <_printf_float+0xc2>
 800f32e:	f108 0801 	add.w	r8, r8, #1
 800f332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f334:	3b01      	subs	r3, #1
 800f336:	4543      	cmp	r3, r8
 800f338:	dcf1      	bgt.n	800f31e <_printf_float+0x40e>
 800f33a:	464b      	mov	r3, r9
 800f33c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f340:	e6dc      	b.n	800f0fc <_printf_float+0x1ec>
 800f342:	f04f 0800 	mov.w	r8, #0
 800f346:	f104 0a1a 	add.w	sl, r4, #26
 800f34a:	e7f2      	b.n	800f332 <_printf_float+0x422>
 800f34c:	2301      	movs	r3, #1
 800f34e:	4642      	mov	r2, r8
 800f350:	e7df      	b.n	800f312 <_printf_float+0x402>
 800f352:	2301      	movs	r3, #1
 800f354:	464a      	mov	r2, r9
 800f356:	4631      	mov	r1, r6
 800f358:	4628      	mov	r0, r5
 800f35a:	47b8      	blx	r7
 800f35c:	3001      	adds	r0, #1
 800f35e:	f43f ae38 	beq.w	800efd2 <_printf_float+0xc2>
 800f362:	f108 0801 	add.w	r8, r8, #1
 800f366:	68e3      	ldr	r3, [r4, #12]
 800f368:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f36a:	1a5b      	subs	r3, r3, r1
 800f36c:	4543      	cmp	r3, r8
 800f36e:	dcf0      	bgt.n	800f352 <_printf_float+0x442>
 800f370:	e6fa      	b.n	800f168 <_printf_float+0x258>
 800f372:	f04f 0800 	mov.w	r8, #0
 800f376:	f104 0919 	add.w	r9, r4, #25
 800f37a:	e7f4      	b.n	800f366 <_printf_float+0x456>

0800f37c <_printf_common>:
 800f37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f380:	4616      	mov	r6, r2
 800f382:	4699      	mov	r9, r3
 800f384:	688a      	ldr	r2, [r1, #8]
 800f386:	4607      	mov	r7, r0
 800f388:	690b      	ldr	r3, [r1, #16]
 800f38a:	460c      	mov	r4, r1
 800f38c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f390:	4293      	cmp	r3, r2
 800f392:	bfb8      	it	lt
 800f394:	4613      	movlt	r3, r2
 800f396:	6033      	str	r3, [r6, #0]
 800f398:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f39c:	b10a      	cbz	r2, 800f3a2 <_printf_common+0x26>
 800f39e:	3301      	adds	r3, #1
 800f3a0:	6033      	str	r3, [r6, #0]
 800f3a2:	6823      	ldr	r3, [r4, #0]
 800f3a4:	0699      	lsls	r1, r3, #26
 800f3a6:	bf42      	ittt	mi
 800f3a8:	6833      	ldrmi	r3, [r6, #0]
 800f3aa:	3302      	addmi	r3, #2
 800f3ac:	6033      	strmi	r3, [r6, #0]
 800f3ae:	6825      	ldr	r5, [r4, #0]
 800f3b0:	f015 0506 	ands.w	r5, r5, #6
 800f3b4:	d106      	bne.n	800f3c4 <_printf_common+0x48>
 800f3b6:	f104 0a19 	add.w	sl, r4, #25
 800f3ba:	68e3      	ldr	r3, [r4, #12]
 800f3bc:	6832      	ldr	r2, [r6, #0]
 800f3be:	1a9b      	subs	r3, r3, r2
 800f3c0:	42ab      	cmp	r3, r5
 800f3c2:	dc29      	bgt.n	800f418 <_printf_common+0x9c>
 800f3c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f3c8:	1e13      	subs	r3, r2, #0
 800f3ca:	6822      	ldr	r2, [r4, #0]
 800f3cc:	bf18      	it	ne
 800f3ce:	2301      	movne	r3, #1
 800f3d0:	0692      	lsls	r2, r2, #26
 800f3d2:	d42e      	bmi.n	800f432 <_printf_common+0xb6>
 800f3d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f3d8:	4649      	mov	r1, r9
 800f3da:	4638      	mov	r0, r7
 800f3dc:	47c0      	blx	r8
 800f3de:	3001      	adds	r0, #1
 800f3e0:	d021      	beq.n	800f426 <_printf_common+0xaa>
 800f3e2:	6823      	ldr	r3, [r4, #0]
 800f3e4:	341a      	adds	r4, #26
 800f3e6:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800f3ea:	f003 0306 	and.w	r3, r3, #6
 800f3ee:	6832      	ldr	r2, [r6, #0]
 800f3f0:	2600      	movs	r6, #0
 800f3f2:	2b04      	cmp	r3, #4
 800f3f4:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800f3f8:	bf08      	it	eq
 800f3fa:	1aad      	subeq	r5, r5, r2
 800f3fc:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800f400:	bf14      	ite	ne
 800f402:	2500      	movne	r5, #0
 800f404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f408:	4293      	cmp	r3, r2
 800f40a:	bfc4      	itt	gt
 800f40c:	1a9b      	subgt	r3, r3, r2
 800f40e:	18ed      	addgt	r5, r5, r3
 800f410:	42b5      	cmp	r5, r6
 800f412:	d11a      	bne.n	800f44a <_printf_common+0xce>
 800f414:	2000      	movs	r0, #0
 800f416:	e008      	b.n	800f42a <_printf_common+0xae>
 800f418:	2301      	movs	r3, #1
 800f41a:	4652      	mov	r2, sl
 800f41c:	4649      	mov	r1, r9
 800f41e:	4638      	mov	r0, r7
 800f420:	47c0      	blx	r8
 800f422:	3001      	adds	r0, #1
 800f424:	d103      	bne.n	800f42e <_printf_common+0xb2>
 800f426:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f42e:	3501      	adds	r5, #1
 800f430:	e7c3      	b.n	800f3ba <_printf_common+0x3e>
 800f432:	18e1      	adds	r1, r4, r3
 800f434:	1c5a      	adds	r2, r3, #1
 800f436:	2030      	movs	r0, #48	; 0x30
 800f438:	3302      	adds	r3, #2
 800f43a:	4422      	add	r2, r4
 800f43c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f440:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f444:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f448:	e7c4      	b.n	800f3d4 <_printf_common+0x58>
 800f44a:	2301      	movs	r3, #1
 800f44c:	4622      	mov	r2, r4
 800f44e:	4649      	mov	r1, r9
 800f450:	4638      	mov	r0, r7
 800f452:	47c0      	blx	r8
 800f454:	3001      	adds	r0, #1
 800f456:	d0e6      	beq.n	800f426 <_printf_common+0xaa>
 800f458:	3601      	adds	r6, #1
 800f45a:	e7d9      	b.n	800f410 <_printf_common+0x94>

0800f45c <_printf_i>:
 800f45c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f460:	7e0f      	ldrb	r7, [r1, #24]
 800f462:	4691      	mov	r9, r2
 800f464:	4680      	mov	r8, r0
 800f466:	460c      	mov	r4, r1
 800f468:	2f78      	cmp	r7, #120	; 0x78
 800f46a:	469a      	mov	sl, r3
 800f46c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f46e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f472:	d807      	bhi.n	800f484 <_printf_i+0x28>
 800f474:	2f62      	cmp	r7, #98	; 0x62
 800f476:	d80a      	bhi.n	800f48e <_printf_i+0x32>
 800f478:	2f00      	cmp	r7, #0
 800f47a:	f000 80d8 	beq.w	800f62e <_printf_i+0x1d2>
 800f47e:	2f58      	cmp	r7, #88	; 0x58
 800f480:	f000 80a3 	beq.w	800f5ca <_printf_i+0x16e>
 800f484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f488:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f48c:	e03a      	b.n	800f504 <_printf_i+0xa8>
 800f48e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f492:	2b15      	cmp	r3, #21
 800f494:	d8f6      	bhi.n	800f484 <_printf_i+0x28>
 800f496:	a101      	add	r1, pc, #4	; (adr r1, 800f49c <_printf_i+0x40>)
 800f498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f49c:	0800f4f5 	.word	0x0800f4f5
 800f4a0:	0800f509 	.word	0x0800f509
 800f4a4:	0800f485 	.word	0x0800f485
 800f4a8:	0800f485 	.word	0x0800f485
 800f4ac:	0800f485 	.word	0x0800f485
 800f4b0:	0800f485 	.word	0x0800f485
 800f4b4:	0800f509 	.word	0x0800f509
 800f4b8:	0800f485 	.word	0x0800f485
 800f4bc:	0800f485 	.word	0x0800f485
 800f4c0:	0800f485 	.word	0x0800f485
 800f4c4:	0800f485 	.word	0x0800f485
 800f4c8:	0800f615 	.word	0x0800f615
 800f4cc:	0800f539 	.word	0x0800f539
 800f4d0:	0800f5f7 	.word	0x0800f5f7
 800f4d4:	0800f485 	.word	0x0800f485
 800f4d8:	0800f485 	.word	0x0800f485
 800f4dc:	0800f637 	.word	0x0800f637
 800f4e0:	0800f485 	.word	0x0800f485
 800f4e4:	0800f539 	.word	0x0800f539
 800f4e8:	0800f485 	.word	0x0800f485
 800f4ec:	0800f485 	.word	0x0800f485
 800f4f0:	0800f5ff 	.word	0x0800f5ff
 800f4f4:	682b      	ldr	r3, [r5, #0]
 800f4f6:	1d1a      	adds	r2, r3, #4
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	602a      	str	r2, [r5, #0]
 800f4fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f504:	2301      	movs	r3, #1
 800f506:	e0a3      	b.n	800f650 <_printf_i+0x1f4>
 800f508:	6820      	ldr	r0, [r4, #0]
 800f50a:	6829      	ldr	r1, [r5, #0]
 800f50c:	0606      	lsls	r6, r0, #24
 800f50e:	f101 0304 	add.w	r3, r1, #4
 800f512:	d50a      	bpl.n	800f52a <_printf_i+0xce>
 800f514:	680e      	ldr	r6, [r1, #0]
 800f516:	602b      	str	r3, [r5, #0]
 800f518:	2e00      	cmp	r6, #0
 800f51a:	da03      	bge.n	800f524 <_printf_i+0xc8>
 800f51c:	232d      	movs	r3, #45	; 0x2d
 800f51e:	4276      	negs	r6, r6
 800f520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f524:	485e      	ldr	r0, [pc, #376]	; (800f6a0 <_printf_i+0x244>)
 800f526:	230a      	movs	r3, #10
 800f528:	e019      	b.n	800f55e <_printf_i+0x102>
 800f52a:	680e      	ldr	r6, [r1, #0]
 800f52c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f530:	602b      	str	r3, [r5, #0]
 800f532:	bf18      	it	ne
 800f534:	b236      	sxthne	r6, r6
 800f536:	e7ef      	b.n	800f518 <_printf_i+0xbc>
 800f538:	682b      	ldr	r3, [r5, #0]
 800f53a:	6820      	ldr	r0, [r4, #0]
 800f53c:	1d19      	adds	r1, r3, #4
 800f53e:	6029      	str	r1, [r5, #0]
 800f540:	0601      	lsls	r1, r0, #24
 800f542:	d501      	bpl.n	800f548 <_printf_i+0xec>
 800f544:	681e      	ldr	r6, [r3, #0]
 800f546:	e002      	b.n	800f54e <_printf_i+0xf2>
 800f548:	0646      	lsls	r6, r0, #25
 800f54a:	d5fb      	bpl.n	800f544 <_printf_i+0xe8>
 800f54c:	881e      	ldrh	r6, [r3, #0]
 800f54e:	2f6f      	cmp	r7, #111	; 0x6f
 800f550:	4853      	ldr	r0, [pc, #332]	; (800f6a0 <_printf_i+0x244>)
 800f552:	bf0c      	ite	eq
 800f554:	2308      	moveq	r3, #8
 800f556:	230a      	movne	r3, #10
 800f558:	2100      	movs	r1, #0
 800f55a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f55e:	6865      	ldr	r5, [r4, #4]
 800f560:	2d00      	cmp	r5, #0
 800f562:	60a5      	str	r5, [r4, #8]
 800f564:	bfa2      	ittt	ge
 800f566:	6821      	ldrge	r1, [r4, #0]
 800f568:	f021 0104 	bicge.w	r1, r1, #4
 800f56c:	6021      	strge	r1, [r4, #0]
 800f56e:	b90e      	cbnz	r6, 800f574 <_printf_i+0x118>
 800f570:	2d00      	cmp	r5, #0
 800f572:	d04d      	beq.n	800f610 <_printf_i+0x1b4>
 800f574:	4615      	mov	r5, r2
 800f576:	fbb6 f1f3 	udiv	r1, r6, r3
 800f57a:	fb03 6711 	mls	r7, r3, r1, r6
 800f57e:	5dc7      	ldrb	r7, [r0, r7]
 800f580:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f584:	4637      	mov	r7, r6
 800f586:	460e      	mov	r6, r1
 800f588:	42bb      	cmp	r3, r7
 800f58a:	d9f4      	bls.n	800f576 <_printf_i+0x11a>
 800f58c:	2b08      	cmp	r3, #8
 800f58e:	d10b      	bne.n	800f5a8 <_printf_i+0x14c>
 800f590:	6823      	ldr	r3, [r4, #0]
 800f592:	07de      	lsls	r6, r3, #31
 800f594:	d508      	bpl.n	800f5a8 <_printf_i+0x14c>
 800f596:	6923      	ldr	r3, [r4, #16]
 800f598:	6861      	ldr	r1, [r4, #4]
 800f59a:	4299      	cmp	r1, r3
 800f59c:	bfde      	ittt	le
 800f59e:	2330      	movle	r3, #48	; 0x30
 800f5a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f5a4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f5a8:	1b52      	subs	r2, r2, r5
 800f5aa:	6122      	str	r2, [r4, #16]
 800f5ac:	464b      	mov	r3, r9
 800f5ae:	aa03      	add	r2, sp, #12
 800f5b0:	4621      	mov	r1, r4
 800f5b2:	4640      	mov	r0, r8
 800f5b4:	f8cd a000 	str.w	sl, [sp]
 800f5b8:	f7ff fee0 	bl	800f37c <_printf_common>
 800f5bc:	3001      	adds	r0, #1
 800f5be:	d14c      	bne.n	800f65a <_printf_i+0x1fe>
 800f5c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f5c4:	b004      	add	sp, #16
 800f5c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5ca:	4835      	ldr	r0, [pc, #212]	; (800f6a0 <_printf_i+0x244>)
 800f5cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f5d0:	6829      	ldr	r1, [r5, #0]
 800f5d2:	6823      	ldr	r3, [r4, #0]
 800f5d4:	f851 6b04 	ldr.w	r6, [r1], #4
 800f5d8:	6029      	str	r1, [r5, #0]
 800f5da:	061d      	lsls	r5, r3, #24
 800f5dc:	d514      	bpl.n	800f608 <_printf_i+0x1ac>
 800f5de:	07df      	lsls	r7, r3, #31
 800f5e0:	bf44      	itt	mi
 800f5e2:	f043 0320 	orrmi.w	r3, r3, #32
 800f5e6:	6023      	strmi	r3, [r4, #0]
 800f5e8:	b91e      	cbnz	r6, 800f5f2 <_printf_i+0x196>
 800f5ea:	6823      	ldr	r3, [r4, #0]
 800f5ec:	f023 0320 	bic.w	r3, r3, #32
 800f5f0:	6023      	str	r3, [r4, #0]
 800f5f2:	2310      	movs	r3, #16
 800f5f4:	e7b0      	b.n	800f558 <_printf_i+0xfc>
 800f5f6:	6823      	ldr	r3, [r4, #0]
 800f5f8:	f043 0320 	orr.w	r3, r3, #32
 800f5fc:	6023      	str	r3, [r4, #0]
 800f5fe:	2378      	movs	r3, #120	; 0x78
 800f600:	4828      	ldr	r0, [pc, #160]	; (800f6a4 <_printf_i+0x248>)
 800f602:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f606:	e7e3      	b.n	800f5d0 <_printf_i+0x174>
 800f608:	0659      	lsls	r1, r3, #25
 800f60a:	bf48      	it	mi
 800f60c:	b2b6      	uxthmi	r6, r6
 800f60e:	e7e6      	b.n	800f5de <_printf_i+0x182>
 800f610:	4615      	mov	r5, r2
 800f612:	e7bb      	b.n	800f58c <_printf_i+0x130>
 800f614:	682b      	ldr	r3, [r5, #0]
 800f616:	6826      	ldr	r6, [r4, #0]
 800f618:	1d18      	adds	r0, r3, #4
 800f61a:	6961      	ldr	r1, [r4, #20]
 800f61c:	6028      	str	r0, [r5, #0]
 800f61e:	0635      	lsls	r5, r6, #24
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	d501      	bpl.n	800f628 <_printf_i+0x1cc>
 800f624:	6019      	str	r1, [r3, #0]
 800f626:	e002      	b.n	800f62e <_printf_i+0x1d2>
 800f628:	0670      	lsls	r0, r6, #25
 800f62a:	d5fb      	bpl.n	800f624 <_printf_i+0x1c8>
 800f62c:	8019      	strh	r1, [r3, #0]
 800f62e:	2300      	movs	r3, #0
 800f630:	4615      	mov	r5, r2
 800f632:	6123      	str	r3, [r4, #16]
 800f634:	e7ba      	b.n	800f5ac <_printf_i+0x150>
 800f636:	682b      	ldr	r3, [r5, #0]
 800f638:	2100      	movs	r1, #0
 800f63a:	1d1a      	adds	r2, r3, #4
 800f63c:	602a      	str	r2, [r5, #0]
 800f63e:	681d      	ldr	r5, [r3, #0]
 800f640:	6862      	ldr	r2, [r4, #4]
 800f642:	4628      	mov	r0, r5
 800f644:	f000 fedc 	bl	8010400 <memchr>
 800f648:	b108      	cbz	r0, 800f64e <_printf_i+0x1f2>
 800f64a:	1b40      	subs	r0, r0, r5
 800f64c:	6060      	str	r0, [r4, #4]
 800f64e:	6863      	ldr	r3, [r4, #4]
 800f650:	6123      	str	r3, [r4, #16]
 800f652:	2300      	movs	r3, #0
 800f654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f658:	e7a8      	b.n	800f5ac <_printf_i+0x150>
 800f65a:	6923      	ldr	r3, [r4, #16]
 800f65c:	462a      	mov	r2, r5
 800f65e:	4649      	mov	r1, r9
 800f660:	4640      	mov	r0, r8
 800f662:	47d0      	blx	sl
 800f664:	3001      	adds	r0, #1
 800f666:	d0ab      	beq.n	800f5c0 <_printf_i+0x164>
 800f668:	6823      	ldr	r3, [r4, #0]
 800f66a:	079b      	lsls	r3, r3, #30
 800f66c:	d413      	bmi.n	800f696 <_printf_i+0x23a>
 800f66e:	68e0      	ldr	r0, [r4, #12]
 800f670:	9b03      	ldr	r3, [sp, #12]
 800f672:	4298      	cmp	r0, r3
 800f674:	bfb8      	it	lt
 800f676:	4618      	movlt	r0, r3
 800f678:	e7a4      	b.n	800f5c4 <_printf_i+0x168>
 800f67a:	2301      	movs	r3, #1
 800f67c:	4632      	mov	r2, r6
 800f67e:	4649      	mov	r1, r9
 800f680:	4640      	mov	r0, r8
 800f682:	47d0      	blx	sl
 800f684:	3001      	adds	r0, #1
 800f686:	d09b      	beq.n	800f5c0 <_printf_i+0x164>
 800f688:	3501      	adds	r5, #1
 800f68a:	68e3      	ldr	r3, [r4, #12]
 800f68c:	9903      	ldr	r1, [sp, #12]
 800f68e:	1a5b      	subs	r3, r3, r1
 800f690:	42ab      	cmp	r3, r5
 800f692:	dcf2      	bgt.n	800f67a <_printf_i+0x21e>
 800f694:	e7eb      	b.n	800f66e <_printf_i+0x212>
 800f696:	2500      	movs	r5, #0
 800f698:	f104 0619 	add.w	r6, r4, #25
 800f69c:	e7f5      	b.n	800f68a <_printf_i+0x22e>
 800f69e:	bf00      	nop
 800f6a0:	08011e32 	.word	0x08011e32
 800f6a4:	08011e43 	.word	0x08011e43

0800f6a8 <siprintf>:
 800f6a8:	b40e      	push	{r1, r2, r3}
 800f6aa:	b500      	push	{lr}
 800f6ac:	b09c      	sub	sp, #112	; 0x70
 800f6ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f6b2:	ab1d      	add	r3, sp, #116	; 0x74
 800f6b4:	9002      	str	r0, [sp, #8]
 800f6b6:	9006      	str	r0, [sp, #24]
 800f6b8:	9107      	str	r1, [sp, #28]
 800f6ba:	9104      	str	r1, [sp, #16]
 800f6bc:	4808      	ldr	r0, [pc, #32]	; (800f6e0 <siprintf+0x38>)
 800f6be:	4909      	ldr	r1, [pc, #36]	; (800f6e4 <siprintf+0x3c>)
 800f6c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6c4:	9105      	str	r1, [sp, #20]
 800f6c6:	a902      	add	r1, sp, #8
 800f6c8:	6800      	ldr	r0, [r0, #0]
 800f6ca:	9301      	str	r3, [sp, #4]
 800f6cc:	f001 fb82 	bl	8010dd4 <_svfiprintf_r>
 800f6d0:	9b02      	ldr	r3, [sp, #8]
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	701a      	strb	r2, [r3, #0]
 800f6d6:	b01c      	add	sp, #112	; 0x70
 800f6d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6dc:	b003      	add	sp, #12
 800f6de:	4770      	bx	lr
 800f6e0:	20000030 	.word	0x20000030
 800f6e4:	ffff0208 	.word	0xffff0208

0800f6e8 <quorem>:
 800f6e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ec:	6903      	ldr	r3, [r0, #16]
 800f6ee:	4607      	mov	r7, r0
 800f6f0:	690c      	ldr	r4, [r1, #16]
 800f6f2:	42a3      	cmp	r3, r4
 800f6f4:	f2c0 8087 	blt.w	800f806 <quorem+0x11e>
 800f6f8:	3c01      	subs	r4, #1
 800f6fa:	f100 0514 	add.w	r5, r0, #20
 800f6fe:	f101 0814 	add.w	r8, r1, #20
 800f702:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f706:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f70a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f70e:	9301      	str	r3, [sp, #4]
 800f710:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f714:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f718:	3301      	adds	r3, #1
 800f71a:	429a      	cmp	r2, r3
 800f71c:	fbb2 f6f3 	udiv	r6, r2, r3
 800f720:	d335      	bcc.n	800f78e <quorem+0xa6>
 800f722:	f04f 0e00 	mov.w	lr, #0
 800f726:	4640      	mov	r0, r8
 800f728:	46ac      	mov	ip, r5
 800f72a:	46f2      	mov	sl, lr
 800f72c:	f850 2b04 	ldr.w	r2, [r0], #4
 800f730:	b293      	uxth	r3, r2
 800f732:	4581      	cmp	r9, r0
 800f734:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800f738:	fb06 e303 	mla	r3, r6, r3, lr
 800f73c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f740:	b29b      	uxth	r3, r3
 800f742:	fb06 e202 	mla	r2, r6, r2, lr
 800f746:	ebaa 0303 	sub.w	r3, sl, r3
 800f74a:	f8dc a000 	ldr.w	sl, [ip]
 800f74e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f752:	fa1f fa8a 	uxth.w	sl, sl
 800f756:	b292      	uxth	r2, r2
 800f758:	4453      	add	r3, sl
 800f75a:	9300      	str	r3, [sp, #0]
 800f75c:	f8dc 3000 	ldr.w	r3, [ip]
 800f760:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 800f764:	9b00      	ldr	r3, [sp, #0]
 800f766:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f76a:	f8bd 3000 	ldrh.w	r3, [sp]
 800f76e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f772:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f776:	f84c 3b04 	str.w	r3, [ip], #4
 800f77a:	d2d7      	bcs.n	800f72c <quorem+0x44>
 800f77c:	f855 300b 	ldr.w	r3, [r5, fp]
 800f780:	b92b      	cbnz	r3, 800f78e <quorem+0xa6>
 800f782:	9b01      	ldr	r3, [sp, #4]
 800f784:	3b04      	subs	r3, #4
 800f786:	429d      	cmp	r5, r3
 800f788:	461a      	mov	r2, r3
 800f78a:	d330      	bcc.n	800f7ee <quorem+0x106>
 800f78c:	613c      	str	r4, [r7, #16]
 800f78e:	4638      	mov	r0, r7
 800f790:	f001 f8c6 	bl	8010920 <__mcmp>
 800f794:	2800      	cmp	r0, #0
 800f796:	db26      	blt.n	800f7e6 <quorem+0xfe>
 800f798:	3601      	adds	r6, #1
 800f79a:	4628      	mov	r0, r5
 800f79c:	f04f 0c00 	mov.w	ip, #0
 800f7a0:	f858 1b04 	ldr.w	r1, [r8], #4
 800f7a4:	f8d0 e000 	ldr.w	lr, [r0]
 800f7a8:	b28b      	uxth	r3, r1
 800f7aa:	45c1      	cmp	r9, r8
 800f7ac:	fa1f f28e 	uxth.w	r2, lr
 800f7b0:	ebac 0303 	sub.w	r3, ip, r3
 800f7b4:	4413      	add	r3, r2
 800f7b6:	ea4f 4211 	mov.w	r2, r1, lsr #16
 800f7ba:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f7be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f7c2:	b29b      	uxth	r3, r3
 800f7c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f7c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f7cc:	f840 3b04 	str.w	r3, [r0], #4
 800f7d0:	d2e6      	bcs.n	800f7a0 <quorem+0xb8>
 800f7d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f7d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f7da:	b922      	cbnz	r2, 800f7e6 <quorem+0xfe>
 800f7dc:	3b04      	subs	r3, #4
 800f7de:	429d      	cmp	r5, r3
 800f7e0:	461a      	mov	r2, r3
 800f7e2:	d30a      	bcc.n	800f7fa <quorem+0x112>
 800f7e4:	613c      	str	r4, [r7, #16]
 800f7e6:	4630      	mov	r0, r6
 800f7e8:	b003      	add	sp, #12
 800f7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7ee:	6812      	ldr	r2, [r2, #0]
 800f7f0:	3b04      	subs	r3, #4
 800f7f2:	2a00      	cmp	r2, #0
 800f7f4:	d1ca      	bne.n	800f78c <quorem+0xa4>
 800f7f6:	3c01      	subs	r4, #1
 800f7f8:	e7c5      	b.n	800f786 <quorem+0x9e>
 800f7fa:	6812      	ldr	r2, [r2, #0]
 800f7fc:	3b04      	subs	r3, #4
 800f7fe:	2a00      	cmp	r2, #0
 800f800:	d1f0      	bne.n	800f7e4 <quorem+0xfc>
 800f802:	3c01      	subs	r4, #1
 800f804:	e7eb      	b.n	800f7de <quorem+0xf6>
 800f806:	2000      	movs	r0, #0
 800f808:	e7ee      	b.n	800f7e8 <quorem+0x100>
 800f80a:	0000      	movs	r0, r0
 800f80c:	0000      	movs	r0, r0
	...

0800f810 <_dtoa_r>:
 800f810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f814:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f816:	4604      	mov	r4, r0
 800f818:	ee10 aa10 	vmov	sl, s0
 800f81c:	ed2d 8b04 	vpush	{d8-d9}
 800f820:	b093      	sub	sp, #76	; 0x4c
 800f822:	ec57 6b10 	vmov	r6, r7, d0
 800f826:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f82a:	46bb      	mov	fp, r7
 800f82c:	9106      	str	r1, [sp, #24]
 800f82e:	9209      	str	r2, [sp, #36]	; 0x24
 800f830:	930c      	str	r3, [sp, #48]	; 0x30
 800f832:	b975      	cbnz	r5, 800f852 <_dtoa_r+0x42>
 800f834:	2010      	movs	r0, #16
 800f836:	f000 fddb 	bl	80103f0 <malloc>
 800f83a:	4602      	mov	r2, r0
 800f83c:	6260      	str	r0, [r4, #36]	; 0x24
 800f83e:	b920      	cbnz	r0, 800f84a <_dtoa_r+0x3a>
 800f840:	4ba7      	ldr	r3, [pc, #668]	; (800fae0 <_dtoa_r+0x2d0>)
 800f842:	21ea      	movs	r1, #234	; 0xea
 800f844:	48a7      	ldr	r0, [pc, #668]	; (800fae4 <_dtoa_r+0x2d4>)
 800f846:	f001 fbd5 	bl	8010ff4 <__assert_func>
 800f84a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f84e:	6005      	str	r5, [r0, #0]
 800f850:	60c5      	str	r5, [r0, #12]
 800f852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f854:	6819      	ldr	r1, [r3, #0]
 800f856:	b151      	cbz	r1, 800f86e <_dtoa_r+0x5e>
 800f858:	685a      	ldr	r2, [r3, #4]
 800f85a:	2301      	movs	r3, #1
 800f85c:	4620      	mov	r0, r4
 800f85e:	4093      	lsls	r3, r2
 800f860:	604a      	str	r2, [r1, #4]
 800f862:	608b      	str	r3, [r1, #8]
 800f864:	f000 fe1a 	bl	801049c <_Bfree>
 800f868:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f86a:	2200      	movs	r2, #0
 800f86c:	601a      	str	r2, [r3, #0]
 800f86e:	1e3b      	subs	r3, r7, #0
 800f870:	bfad      	iteet	ge
 800f872:	2300      	movge	r3, #0
 800f874:	2201      	movlt	r2, #1
 800f876:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f87a:	f8c8 3000 	strge.w	r3, [r8]
 800f87e:	4b9a      	ldr	r3, [pc, #616]	; (800fae8 <_dtoa_r+0x2d8>)
 800f880:	bfb8      	it	lt
 800f882:	f8c8 2000 	strlt.w	r2, [r8]
 800f886:	ea33 030b 	bics.w	r3, r3, fp
 800f88a:	d11b      	bne.n	800f8c4 <_dtoa_r+0xb4>
 800f88c:	f242 730f 	movw	r3, #9999	; 0x270f
 800f890:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f892:	6013      	str	r3, [r2, #0]
 800f894:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f898:	4333      	orrs	r3, r6
 800f89a:	f000 858f 	beq.w	80103bc <_dtoa_r+0xbac>
 800f89e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f8a0:	b963      	cbnz	r3, 800f8bc <_dtoa_r+0xac>
 800f8a2:	4b92      	ldr	r3, [pc, #584]	; (800faec <_dtoa_r+0x2dc>)
 800f8a4:	e022      	b.n	800f8ec <_dtoa_r+0xdc>
 800f8a6:	4b92      	ldr	r3, [pc, #584]	; (800faf0 <_dtoa_r+0x2e0>)
 800f8a8:	9301      	str	r3, [sp, #4]
 800f8aa:	3308      	adds	r3, #8
 800f8ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f8ae:	6013      	str	r3, [r2, #0]
 800f8b0:	9801      	ldr	r0, [sp, #4]
 800f8b2:	b013      	add	sp, #76	; 0x4c
 800f8b4:	ecbd 8b04 	vpop	{d8-d9}
 800f8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8bc:	4b8b      	ldr	r3, [pc, #556]	; (800faec <_dtoa_r+0x2dc>)
 800f8be:	9301      	str	r3, [sp, #4]
 800f8c0:	3303      	adds	r3, #3
 800f8c2:	e7f3      	b.n	800f8ac <_dtoa_r+0x9c>
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	4650      	mov	r0, sl
 800f8ca:	4659      	mov	r1, fp
 800f8cc:	f7f1 f900 	bl	8000ad0 <__aeabi_dcmpeq>
 800f8d0:	4680      	mov	r8, r0
 800f8d2:	ec4b ab19 	vmov	d9, sl, fp
 800f8d6:	b158      	cbz	r0, 800f8f0 <_dtoa_r+0xe0>
 800f8d8:	2301      	movs	r3, #1
 800f8da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f8dc:	6013      	str	r3, [r2, #0]
 800f8de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	f000 8568 	beq.w	80103b6 <_dtoa_r+0xba6>
 800f8e6:	4883      	ldr	r0, [pc, #524]	; (800faf4 <_dtoa_r+0x2e4>)
 800f8e8:	6018      	str	r0, [r3, #0]
 800f8ea:	1e43      	subs	r3, r0, #1
 800f8ec:	9301      	str	r3, [sp, #4]
 800f8ee:	e7df      	b.n	800f8b0 <_dtoa_r+0xa0>
 800f8f0:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f8f4:	aa10      	add	r2, sp, #64	; 0x40
 800f8f6:	a911      	add	r1, sp, #68	; 0x44
 800f8f8:	4620      	mov	r0, r4
 800f8fa:	ec4b ab10 	vmov	d0, sl, fp
 800f8fe:	f001 f8bb 	bl	8010a78 <__d2b>
 800f902:	ee08 0a10 	vmov	s16, r0
 800f906:	2d00      	cmp	r5, #0
 800f908:	f000 8082 	beq.w	800fa10 <_dtoa_r+0x200>
 800f90c:	ee19 3a90 	vmov	r3, s19
 800f910:	4656      	mov	r6, sl
 800f912:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f916:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f91a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f91e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f922:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f926:	2200      	movs	r2, #0
 800f928:	4b73      	ldr	r3, [pc, #460]	; (800faf8 <_dtoa_r+0x2e8>)
 800f92a:	4630      	mov	r0, r6
 800f92c:	4639      	mov	r1, r7
 800f92e:	f7f0 fcaf 	bl	8000290 <__aeabi_dsub>
 800f932:	a365      	add	r3, pc, #404	; (adr r3, 800fac8 <_dtoa_r+0x2b8>)
 800f934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f938:	f7f0 fe62 	bl	8000600 <__aeabi_dmul>
 800f93c:	a364      	add	r3, pc, #400	; (adr r3, 800fad0 <_dtoa_r+0x2c0>)
 800f93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f942:	f7f0 fca7 	bl	8000294 <__adddf3>
 800f946:	4606      	mov	r6, r0
 800f948:	460f      	mov	r7, r1
 800f94a:	4628      	mov	r0, r5
 800f94c:	f7f0 fdee 	bl	800052c <__aeabi_i2d>
 800f950:	a361      	add	r3, pc, #388	; (adr r3, 800fad8 <_dtoa_r+0x2c8>)
 800f952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f956:	f7f0 fe53 	bl	8000600 <__aeabi_dmul>
 800f95a:	4602      	mov	r2, r0
 800f95c:	460b      	mov	r3, r1
 800f95e:	4630      	mov	r0, r6
 800f960:	4639      	mov	r1, r7
 800f962:	f7f0 fc97 	bl	8000294 <__adddf3>
 800f966:	4606      	mov	r6, r0
 800f968:	460f      	mov	r7, r1
 800f96a:	f7f1 f8f9 	bl	8000b60 <__aeabi_d2iz>
 800f96e:	2200      	movs	r2, #0
 800f970:	9000      	str	r0, [sp, #0]
 800f972:	2300      	movs	r3, #0
 800f974:	4630      	mov	r0, r6
 800f976:	4639      	mov	r1, r7
 800f978:	f7f1 f8b4 	bl	8000ae4 <__aeabi_dcmplt>
 800f97c:	b150      	cbz	r0, 800f994 <_dtoa_r+0x184>
 800f97e:	9800      	ldr	r0, [sp, #0]
 800f980:	f7f0 fdd4 	bl	800052c <__aeabi_i2d>
 800f984:	4632      	mov	r2, r6
 800f986:	463b      	mov	r3, r7
 800f988:	f7f1 f8a2 	bl	8000ad0 <__aeabi_dcmpeq>
 800f98c:	b910      	cbnz	r0, 800f994 <_dtoa_r+0x184>
 800f98e:	9b00      	ldr	r3, [sp, #0]
 800f990:	3b01      	subs	r3, #1
 800f992:	9300      	str	r3, [sp, #0]
 800f994:	9b00      	ldr	r3, [sp, #0]
 800f996:	2b16      	cmp	r3, #22
 800f998:	d859      	bhi.n	800fa4e <_dtoa_r+0x23e>
 800f99a:	9a00      	ldr	r2, [sp, #0]
 800f99c:	4b57      	ldr	r3, [pc, #348]	; (800fafc <_dtoa_r+0x2ec>)
 800f99e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f9a2:	ec51 0b19 	vmov	r0, r1, d9
 800f9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9aa:	f7f1 f89b 	bl	8000ae4 <__aeabi_dcmplt>
 800f9ae:	2800      	cmp	r0, #0
 800f9b0:	d04f      	beq.n	800fa52 <_dtoa_r+0x242>
 800f9b2:	9b00      	ldr	r3, [sp, #0]
 800f9b4:	3b01      	subs	r3, #1
 800f9b6:	9300      	str	r3, [sp, #0]
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800f9bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f9be:	1b5d      	subs	r5, r3, r5
 800f9c0:	1e6b      	subs	r3, r5, #1
 800f9c2:	9305      	str	r3, [sp, #20]
 800f9c4:	bf49      	itett	mi
 800f9c6:	f1c5 0301 	rsbmi	r3, r5, #1
 800f9ca:	2300      	movpl	r3, #0
 800f9cc:	9304      	strmi	r3, [sp, #16]
 800f9ce:	2300      	movmi	r3, #0
 800f9d0:	bf54      	ite	pl
 800f9d2:	9304      	strpl	r3, [sp, #16]
 800f9d4:	9305      	strmi	r3, [sp, #20]
 800f9d6:	9b00      	ldr	r3, [sp, #0]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	db3c      	blt.n	800fa56 <_dtoa_r+0x246>
 800f9dc:	9b05      	ldr	r3, [sp, #20]
 800f9de:	9a00      	ldr	r2, [sp, #0]
 800f9e0:	4413      	add	r3, r2
 800f9e2:	920a      	str	r2, [sp, #40]	; 0x28
 800f9e4:	9305      	str	r3, [sp, #20]
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	9307      	str	r3, [sp, #28]
 800f9ea:	9b06      	ldr	r3, [sp, #24]
 800f9ec:	2b09      	cmp	r3, #9
 800f9ee:	f200 8089 	bhi.w	800fb04 <_dtoa_r+0x2f4>
 800f9f2:	2b05      	cmp	r3, #5
 800f9f4:	bfc5      	ittet	gt
 800f9f6:	3b04      	subgt	r3, #4
 800f9f8:	2500      	movgt	r5, #0
 800f9fa:	2501      	movle	r5, #1
 800f9fc:	9306      	strgt	r3, [sp, #24]
 800f9fe:	9b06      	ldr	r3, [sp, #24]
 800fa00:	3b02      	subs	r3, #2
 800fa02:	2b03      	cmp	r3, #3
 800fa04:	f200 8089 	bhi.w	800fb1a <_dtoa_r+0x30a>
 800fa08:	e8df f003 	tbb	[pc, r3]
 800fa0c:	5a393b2e 	.word	0x5a393b2e
 800fa10:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fa14:	441d      	add	r5, r3
 800fa16:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fa1a:	2b20      	cmp	r3, #32
 800fa1c:	bfc6      	itte	gt
 800fa1e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fa22:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fa26:	f1c3 0320 	rsble	r3, r3, #32
 800fa2a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800fa2e:	bfc5      	ittet	gt
 800fa30:	fa0b f303 	lslgt.w	r3, fp, r3
 800fa34:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fa38:	fa06 f003 	lslle.w	r0, r6, r3
 800fa3c:	4318      	orrgt	r0, r3
 800fa3e:	f7f0 fd65 	bl	800050c <__aeabi_ui2d>
 800fa42:	2301      	movs	r3, #1
 800fa44:	4606      	mov	r6, r0
 800fa46:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fa4a:	930e      	str	r3, [sp, #56]	; 0x38
 800fa4c:	e76b      	b.n	800f926 <_dtoa_r+0x116>
 800fa4e:	2301      	movs	r3, #1
 800fa50:	e7b3      	b.n	800f9ba <_dtoa_r+0x1aa>
 800fa52:	900b      	str	r0, [sp, #44]	; 0x2c
 800fa54:	e7b2      	b.n	800f9bc <_dtoa_r+0x1ac>
 800fa56:	9b04      	ldr	r3, [sp, #16]
 800fa58:	9a00      	ldr	r2, [sp, #0]
 800fa5a:	1a9b      	subs	r3, r3, r2
 800fa5c:	9304      	str	r3, [sp, #16]
 800fa5e:	4253      	negs	r3, r2
 800fa60:	9307      	str	r3, [sp, #28]
 800fa62:	2300      	movs	r3, #0
 800fa64:	930a      	str	r3, [sp, #40]	; 0x28
 800fa66:	e7c0      	b.n	800f9ea <_dtoa_r+0x1da>
 800fa68:	2300      	movs	r3, #0
 800fa6a:	9308      	str	r3, [sp, #32]
 800fa6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	dc56      	bgt.n	800fb20 <_dtoa_r+0x310>
 800fa72:	2301      	movs	r3, #1
 800fa74:	461a      	mov	r2, r3
 800fa76:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fa7a:	9209      	str	r2, [sp, #36]	; 0x24
 800fa7c:	e00c      	b.n	800fa98 <_dtoa_r+0x288>
 800fa7e:	2301      	movs	r3, #1
 800fa80:	e7f3      	b.n	800fa6a <_dtoa_r+0x25a>
 800fa82:	2300      	movs	r3, #0
 800fa84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa86:	9308      	str	r3, [sp, #32]
 800fa88:	9b00      	ldr	r3, [sp, #0]
 800fa8a:	4413      	add	r3, r2
 800fa8c:	9302      	str	r3, [sp, #8]
 800fa8e:	3301      	adds	r3, #1
 800fa90:	2b01      	cmp	r3, #1
 800fa92:	9303      	str	r3, [sp, #12]
 800fa94:	bfb8      	it	lt
 800fa96:	2301      	movlt	r3, #1
 800fa98:	2200      	movs	r2, #0
 800fa9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fa9c:	6042      	str	r2, [r0, #4]
 800fa9e:	2204      	movs	r2, #4
 800faa0:	f102 0614 	add.w	r6, r2, #20
 800faa4:	6841      	ldr	r1, [r0, #4]
 800faa6:	429e      	cmp	r6, r3
 800faa8:	d93e      	bls.n	800fb28 <_dtoa_r+0x318>
 800faaa:	4620      	mov	r0, r4
 800faac:	f000 fcb6 	bl	801041c <_Balloc>
 800fab0:	9001      	str	r0, [sp, #4]
 800fab2:	2800      	cmp	r0, #0
 800fab4:	d13c      	bne.n	800fb30 <_dtoa_r+0x320>
 800fab6:	4b12      	ldr	r3, [pc, #72]	; (800fb00 <_dtoa_r+0x2f0>)
 800fab8:	4602      	mov	r2, r0
 800faba:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fabe:	e6c1      	b.n	800f844 <_dtoa_r+0x34>
 800fac0:	2301      	movs	r3, #1
 800fac2:	e7df      	b.n	800fa84 <_dtoa_r+0x274>
 800fac4:	f3af 8000 	nop.w
 800fac8:	636f4361 	.word	0x636f4361
 800facc:	3fd287a7 	.word	0x3fd287a7
 800fad0:	8b60c8b3 	.word	0x8b60c8b3
 800fad4:	3fc68a28 	.word	0x3fc68a28
 800fad8:	509f79fb 	.word	0x509f79fb
 800fadc:	3fd34413 	.word	0x3fd34413
 800fae0:	08011e61 	.word	0x08011e61
 800fae4:	08011e78 	.word	0x08011e78
 800fae8:	7ff00000 	.word	0x7ff00000
 800faec:	08011e5d 	.word	0x08011e5d
 800faf0:	08011e54 	.word	0x08011e54
 800faf4:	08011e31 	.word	0x08011e31
 800faf8:	3ff80000 	.word	0x3ff80000
 800fafc:	08011f68 	.word	0x08011f68
 800fb00:	08011ed3 	.word	0x08011ed3
 800fb04:	2501      	movs	r5, #1
 800fb06:	2300      	movs	r3, #0
 800fb08:	9508      	str	r5, [sp, #32]
 800fb0a:	9306      	str	r3, [sp, #24]
 800fb0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb10:	2200      	movs	r2, #0
 800fb12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fb16:	2312      	movs	r3, #18
 800fb18:	e7af      	b.n	800fa7a <_dtoa_r+0x26a>
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	9308      	str	r3, [sp, #32]
 800fb1e:	e7f5      	b.n	800fb0c <_dtoa_r+0x2fc>
 800fb20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb22:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fb26:	e7b7      	b.n	800fa98 <_dtoa_r+0x288>
 800fb28:	3101      	adds	r1, #1
 800fb2a:	0052      	lsls	r2, r2, #1
 800fb2c:	6041      	str	r1, [r0, #4]
 800fb2e:	e7b7      	b.n	800faa0 <_dtoa_r+0x290>
 800fb30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb32:	9a01      	ldr	r2, [sp, #4]
 800fb34:	601a      	str	r2, [r3, #0]
 800fb36:	9b03      	ldr	r3, [sp, #12]
 800fb38:	2b0e      	cmp	r3, #14
 800fb3a:	f200 809d 	bhi.w	800fc78 <_dtoa_r+0x468>
 800fb3e:	2d00      	cmp	r5, #0
 800fb40:	f000 809a 	beq.w	800fc78 <_dtoa_r+0x468>
 800fb44:	9b00      	ldr	r3, [sp, #0]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	dd32      	ble.n	800fbb0 <_dtoa_r+0x3a0>
 800fb4a:	f003 030f 	and.w	r3, r3, #15
 800fb4e:	4ab6      	ldr	r2, [pc, #728]	; (800fe28 <_dtoa_r+0x618>)
 800fb50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fb54:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fb58:	9b00      	ldr	r3, [sp, #0]
 800fb5a:	05d8      	lsls	r0, r3, #23
 800fb5c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800fb60:	d516      	bpl.n	800fb90 <_dtoa_r+0x380>
 800fb62:	4bb2      	ldr	r3, [pc, #712]	; (800fe2c <_dtoa_r+0x61c>)
 800fb64:	f007 070f 	and.w	r7, r7, #15
 800fb68:	2503      	movs	r5, #3
 800fb6a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fb6e:	ec51 0b19 	vmov	r0, r1, d9
 800fb72:	f7f0 fe6f 	bl	8000854 <__aeabi_ddiv>
 800fb76:	4682      	mov	sl, r0
 800fb78:	468b      	mov	fp, r1
 800fb7a:	4eac      	ldr	r6, [pc, #688]	; (800fe2c <_dtoa_r+0x61c>)
 800fb7c:	b957      	cbnz	r7, 800fb94 <_dtoa_r+0x384>
 800fb7e:	4642      	mov	r2, r8
 800fb80:	464b      	mov	r3, r9
 800fb82:	4650      	mov	r0, sl
 800fb84:	4659      	mov	r1, fp
 800fb86:	f7f0 fe65 	bl	8000854 <__aeabi_ddiv>
 800fb8a:	4682      	mov	sl, r0
 800fb8c:	468b      	mov	fp, r1
 800fb8e:	e028      	b.n	800fbe2 <_dtoa_r+0x3d2>
 800fb90:	2502      	movs	r5, #2
 800fb92:	e7f2      	b.n	800fb7a <_dtoa_r+0x36a>
 800fb94:	07f9      	lsls	r1, r7, #31
 800fb96:	d508      	bpl.n	800fbaa <_dtoa_r+0x39a>
 800fb98:	4640      	mov	r0, r8
 800fb9a:	4649      	mov	r1, r9
 800fb9c:	3501      	adds	r5, #1
 800fb9e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fba2:	f7f0 fd2d 	bl	8000600 <__aeabi_dmul>
 800fba6:	4680      	mov	r8, r0
 800fba8:	4689      	mov	r9, r1
 800fbaa:	107f      	asrs	r7, r7, #1
 800fbac:	3608      	adds	r6, #8
 800fbae:	e7e5      	b.n	800fb7c <_dtoa_r+0x36c>
 800fbb0:	f000 809b 	beq.w	800fcea <_dtoa_r+0x4da>
 800fbb4:	9b00      	ldr	r3, [sp, #0]
 800fbb6:	2502      	movs	r5, #2
 800fbb8:	4f9c      	ldr	r7, [pc, #624]	; (800fe2c <_dtoa_r+0x61c>)
 800fbba:	425e      	negs	r6, r3
 800fbbc:	4b9a      	ldr	r3, [pc, #616]	; (800fe28 <_dtoa_r+0x618>)
 800fbbe:	f006 020f 	and.w	r2, r6, #15
 800fbc2:	1136      	asrs	r6, r6, #4
 800fbc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fbc8:	ec51 0b19 	vmov	r0, r1, d9
 800fbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd0:	f7f0 fd16 	bl	8000600 <__aeabi_dmul>
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	4682      	mov	sl, r0
 800fbd8:	468b      	mov	fp, r1
 800fbda:	2e00      	cmp	r6, #0
 800fbdc:	d17a      	bne.n	800fcd4 <_dtoa_r+0x4c4>
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d1d3      	bne.n	800fb8a <_dtoa_r+0x37a>
 800fbe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	f000 8082 	beq.w	800fcee <_dtoa_r+0x4de>
 800fbea:	2200      	movs	r2, #0
 800fbec:	4b90      	ldr	r3, [pc, #576]	; (800fe30 <_dtoa_r+0x620>)
 800fbee:	4650      	mov	r0, sl
 800fbf0:	4659      	mov	r1, fp
 800fbf2:	f7f0 ff77 	bl	8000ae4 <__aeabi_dcmplt>
 800fbf6:	2800      	cmp	r0, #0
 800fbf8:	d079      	beq.n	800fcee <_dtoa_r+0x4de>
 800fbfa:	9b03      	ldr	r3, [sp, #12]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d076      	beq.n	800fcee <_dtoa_r+0x4de>
 800fc00:	9b02      	ldr	r3, [sp, #8]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	dd36      	ble.n	800fc74 <_dtoa_r+0x464>
 800fc06:	9b00      	ldr	r3, [sp, #0]
 800fc08:	4650      	mov	r0, sl
 800fc0a:	4659      	mov	r1, fp
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	1e5f      	subs	r7, r3, #1
 800fc10:	4b88      	ldr	r3, [pc, #544]	; (800fe34 <_dtoa_r+0x624>)
 800fc12:	f7f0 fcf5 	bl	8000600 <__aeabi_dmul>
 800fc16:	3501      	adds	r5, #1
 800fc18:	4682      	mov	sl, r0
 800fc1a:	468b      	mov	fp, r1
 800fc1c:	9e02      	ldr	r6, [sp, #8]
 800fc1e:	4628      	mov	r0, r5
 800fc20:	46d0      	mov	r8, sl
 800fc22:	f7f0 fc83 	bl	800052c <__aeabi_i2d>
 800fc26:	4652      	mov	r2, sl
 800fc28:	465b      	mov	r3, fp
 800fc2a:	46d9      	mov	r9, fp
 800fc2c:	f7f0 fce8 	bl	8000600 <__aeabi_dmul>
 800fc30:	2200      	movs	r2, #0
 800fc32:	4b81      	ldr	r3, [pc, #516]	; (800fe38 <_dtoa_r+0x628>)
 800fc34:	f7f0 fb2e 	bl	8000294 <__adddf3>
 800fc38:	4682      	mov	sl, r0
 800fc3a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800fc3e:	2e00      	cmp	r6, #0
 800fc40:	d158      	bne.n	800fcf4 <_dtoa_r+0x4e4>
 800fc42:	2200      	movs	r2, #0
 800fc44:	4b7d      	ldr	r3, [pc, #500]	; (800fe3c <_dtoa_r+0x62c>)
 800fc46:	4640      	mov	r0, r8
 800fc48:	4649      	mov	r1, r9
 800fc4a:	f7f0 fb21 	bl	8000290 <__aeabi_dsub>
 800fc4e:	4652      	mov	r2, sl
 800fc50:	465b      	mov	r3, fp
 800fc52:	4680      	mov	r8, r0
 800fc54:	4689      	mov	r9, r1
 800fc56:	f7f0 ff63 	bl	8000b20 <__aeabi_dcmpgt>
 800fc5a:	2800      	cmp	r0, #0
 800fc5c:	f040 8293 	bne.w	8010186 <_dtoa_r+0x976>
 800fc60:	4652      	mov	r2, sl
 800fc62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fc66:	4640      	mov	r0, r8
 800fc68:	4649      	mov	r1, r9
 800fc6a:	f7f0 ff3b 	bl	8000ae4 <__aeabi_dcmplt>
 800fc6e:	2800      	cmp	r0, #0
 800fc70:	f040 8287 	bne.w	8010182 <_dtoa_r+0x972>
 800fc74:	ec5b ab19 	vmov	sl, fp, d9
 800fc78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	f2c0 8148 	blt.w	800ff10 <_dtoa_r+0x700>
 800fc80:	9a00      	ldr	r2, [sp, #0]
 800fc82:	2a0e      	cmp	r2, #14
 800fc84:	f300 8144 	bgt.w	800ff10 <_dtoa_r+0x700>
 800fc88:	4b67      	ldr	r3, [pc, #412]	; (800fe28 <_dtoa_r+0x618>)
 800fc8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fc8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fc92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	f280 80d5 	bge.w	800fe44 <_dtoa_r+0x634>
 800fc9a:	9b03      	ldr	r3, [sp, #12]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	f300 80d1 	bgt.w	800fe44 <_dtoa_r+0x634>
 800fca2:	f040 826d 	bne.w	8010180 <_dtoa_r+0x970>
 800fca6:	2200      	movs	r2, #0
 800fca8:	4b64      	ldr	r3, [pc, #400]	; (800fe3c <_dtoa_r+0x62c>)
 800fcaa:	4640      	mov	r0, r8
 800fcac:	4649      	mov	r1, r9
 800fcae:	f7f0 fca7 	bl	8000600 <__aeabi_dmul>
 800fcb2:	4652      	mov	r2, sl
 800fcb4:	465b      	mov	r3, fp
 800fcb6:	f7f0 ff29 	bl	8000b0c <__aeabi_dcmpge>
 800fcba:	9e03      	ldr	r6, [sp, #12]
 800fcbc:	4637      	mov	r7, r6
 800fcbe:	2800      	cmp	r0, #0
 800fcc0:	f040 8243 	bne.w	801014a <_dtoa_r+0x93a>
 800fcc4:	2331      	movs	r3, #49	; 0x31
 800fcc6:	9d01      	ldr	r5, [sp, #4]
 800fcc8:	f805 3b01 	strb.w	r3, [r5], #1
 800fccc:	9b00      	ldr	r3, [sp, #0]
 800fcce:	3301      	adds	r3, #1
 800fcd0:	9300      	str	r3, [sp, #0]
 800fcd2:	e23e      	b.n	8010152 <_dtoa_r+0x942>
 800fcd4:	07f2      	lsls	r2, r6, #31
 800fcd6:	d505      	bpl.n	800fce4 <_dtoa_r+0x4d4>
 800fcd8:	3501      	adds	r5, #1
 800fcda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fcde:	f7f0 fc8f 	bl	8000600 <__aeabi_dmul>
 800fce2:	2301      	movs	r3, #1
 800fce4:	1076      	asrs	r6, r6, #1
 800fce6:	3708      	adds	r7, #8
 800fce8:	e777      	b.n	800fbda <_dtoa_r+0x3ca>
 800fcea:	2502      	movs	r5, #2
 800fcec:	e779      	b.n	800fbe2 <_dtoa_r+0x3d2>
 800fcee:	9f00      	ldr	r7, [sp, #0]
 800fcf0:	9e03      	ldr	r6, [sp, #12]
 800fcf2:	e794      	b.n	800fc1e <_dtoa_r+0x40e>
 800fcf4:	9901      	ldr	r1, [sp, #4]
 800fcf6:	4b4c      	ldr	r3, [pc, #304]	; (800fe28 <_dtoa_r+0x618>)
 800fcf8:	4431      	add	r1, r6
 800fcfa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fcfe:	910d      	str	r1, [sp, #52]	; 0x34
 800fd00:	9908      	ldr	r1, [sp, #32]
 800fd02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fd06:	2900      	cmp	r1, #0
 800fd08:	d043      	beq.n	800fd92 <_dtoa_r+0x582>
 800fd0a:	2000      	movs	r0, #0
 800fd0c:	494c      	ldr	r1, [pc, #304]	; (800fe40 <_dtoa_r+0x630>)
 800fd0e:	f7f0 fda1 	bl	8000854 <__aeabi_ddiv>
 800fd12:	4652      	mov	r2, sl
 800fd14:	465b      	mov	r3, fp
 800fd16:	f7f0 fabb 	bl	8000290 <__aeabi_dsub>
 800fd1a:	9d01      	ldr	r5, [sp, #4]
 800fd1c:	4682      	mov	sl, r0
 800fd1e:	468b      	mov	fp, r1
 800fd20:	4649      	mov	r1, r9
 800fd22:	4640      	mov	r0, r8
 800fd24:	f7f0 ff1c 	bl	8000b60 <__aeabi_d2iz>
 800fd28:	4606      	mov	r6, r0
 800fd2a:	f7f0 fbff 	bl	800052c <__aeabi_i2d>
 800fd2e:	4602      	mov	r2, r0
 800fd30:	3630      	adds	r6, #48	; 0x30
 800fd32:	460b      	mov	r3, r1
 800fd34:	4640      	mov	r0, r8
 800fd36:	4649      	mov	r1, r9
 800fd38:	f7f0 faaa 	bl	8000290 <__aeabi_dsub>
 800fd3c:	4652      	mov	r2, sl
 800fd3e:	465b      	mov	r3, fp
 800fd40:	f805 6b01 	strb.w	r6, [r5], #1
 800fd44:	4680      	mov	r8, r0
 800fd46:	4689      	mov	r9, r1
 800fd48:	f7f0 fecc 	bl	8000ae4 <__aeabi_dcmplt>
 800fd4c:	2800      	cmp	r0, #0
 800fd4e:	d163      	bne.n	800fe18 <_dtoa_r+0x608>
 800fd50:	4642      	mov	r2, r8
 800fd52:	464b      	mov	r3, r9
 800fd54:	2000      	movs	r0, #0
 800fd56:	4936      	ldr	r1, [pc, #216]	; (800fe30 <_dtoa_r+0x620>)
 800fd58:	f7f0 fa9a 	bl	8000290 <__aeabi_dsub>
 800fd5c:	4652      	mov	r2, sl
 800fd5e:	465b      	mov	r3, fp
 800fd60:	f7f0 fec0 	bl	8000ae4 <__aeabi_dcmplt>
 800fd64:	2800      	cmp	r0, #0
 800fd66:	f040 80b5 	bne.w	800fed4 <_dtoa_r+0x6c4>
 800fd6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd6c:	429d      	cmp	r5, r3
 800fd6e:	d081      	beq.n	800fc74 <_dtoa_r+0x464>
 800fd70:	2200      	movs	r2, #0
 800fd72:	4b30      	ldr	r3, [pc, #192]	; (800fe34 <_dtoa_r+0x624>)
 800fd74:	4650      	mov	r0, sl
 800fd76:	4659      	mov	r1, fp
 800fd78:	f7f0 fc42 	bl	8000600 <__aeabi_dmul>
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	4682      	mov	sl, r0
 800fd80:	468b      	mov	fp, r1
 800fd82:	4640      	mov	r0, r8
 800fd84:	4649      	mov	r1, r9
 800fd86:	4b2b      	ldr	r3, [pc, #172]	; (800fe34 <_dtoa_r+0x624>)
 800fd88:	f7f0 fc3a 	bl	8000600 <__aeabi_dmul>
 800fd8c:	4680      	mov	r8, r0
 800fd8e:	4689      	mov	r9, r1
 800fd90:	e7c6      	b.n	800fd20 <_dtoa_r+0x510>
 800fd92:	4650      	mov	r0, sl
 800fd94:	4659      	mov	r1, fp
 800fd96:	f7f0 fc33 	bl	8000600 <__aeabi_dmul>
 800fd9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd9c:	4682      	mov	sl, r0
 800fd9e:	468b      	mov	fp, r1
 800fda0:	9d01      	ldr	r5, [sp, #4]
 800fda2:	930f      	str	r3, [sp, #60]	; 0x3c
 800fda4:	4649      	mov	r1, r9
 800fda6:	4640      	mov	r0, r8
 800fda8:	f7f0 feda 	bl	8000b60 <__aeabi_d2iz>
 800fdac:	4606      	mov	r6, r0
 800fdae:	f7f0 fbbd 	bl	800052c <__aeabi_i2d>
 800fdb2:	4602      	mov	r2, r0
 800fdb4:	460b      	mov	r3, r1
 800fdb6:	4640      	mov	r0, r8
 800fdb8:	4649      	mov	r1, r9
 800fdba:	3630      	adds	r6, #48	; 0x30
 800fdbc:	f7f0 fa68 	bl	8000290 <__aeabi_dsub>
 800fdc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fdc2:	f805 6b01 	strb.w	r6, [r5], #1
 800fdc6:	4680      	mov	r8, r0
 800fdc8:	429d      	cmp	r5, r3
 800fdca:	4689      	mov	r9, r1
 800fdcc:	f04f 0200 	mov.w	r2, #0
 800fdd0:	d124      	bne.n	800fe1c <_dtoa_r+0x60c>
 800fdd2:	4b1b      	ldr	r3, [pc, #108]	; (800fe40 <_dtoa_r+0x630>)
 800fdd4:	4650      	mov	r0, sl
 800fdd6:	4659      	mov	r1, fp
 800fdd8:	f7f0 fa5c 	bl	8000294 <__adddf3>
 800fddc:	4602      	mov	r2, r0
 800fdde:	460b      	mov	r3, r1
 800fde0:	4640      	mov	r0, r8
 800fde2:	4649      	mov	r1, r9
 800fde4:	f7f0 fe9c 	bl	8000b20 <__aeabi_dcmpgt>
 800fde8:	2800      	cmp	r0, #0
 800fdea:	d173      	bne.n	800fed4 <_dtoa_r+0x6c4>
 800fdec:	4652      	mov	r2, sl
 800fdee:	465b      	mov	r3, fp
 800fdf0:	2000      	movs	r0, #0
 800fdf2:	4913      	ldr	r1, [pc, #76]	; (800fe40 <_dtoa_r+0x630>)
 800fdf4:	f7f0 fa4c 	bl	8000290 <__aeabi_dsub>
 800fdf8:	4602      	mov	r2, r0
 800fdfa:	460b      	mov	r3, r1
 800fdfc:	4640      	mov	r0, r8
 800fdfe:	4649      	mov	r1, r9
 800fe00:	f7f0 fe70 	bl	8000ae4 <__aeabi_dcmplt>
 800fe04:	2800      	cmp	r0, #0
 800fe06:	f43f af35 	beq.w	800fc74 <_dtoa_r+0x464>
 800fe0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fe0c:	1e6b      	subs	r3, r5, #1
 800fe0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800fe10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fe14:	2b30      	cmp	r3, #48	; 0x30
 800fe16:	d0f8      	beq.n	800fe0a <_dtoa_r+0x5fa>
 800fe18:	9700      	str	r7, [sp, #0]
 800fe1a:	e049      	b.n	800feb0 <_dtoa_r+0x6a0>
 800fe1c:	4b05      	ldr	r3, [pc, #20]	; (800fe34 <_dtoa_r+0x624>)
 800fe1e:	f7f0 fbef 	bl	8000600 <__aeabi_dmul>
 800fe22:	4680      	mov	r8, r0
 800fe24:	4689      	mov	r9, r1
 800fe26:	e7bd      	b.n	800fda4 <_dtoa_r+0x594>
 800fe28:	08011f68 	.word	0x08011f68
 800fe2c:	08011f40 	.word	0x08011f40
 800fe30:	3ff00000 	.word	0x3ff00000
 800fe34:	40240000 	.word	0x40240000
 800fe38:	401c0000 	.word	0x401c0000
 800fe3c:	40140000 	.word	0x40140000
 800fe40:	3fe00000 	.word	0x3fe00000
 800fe44:	4656      	mov	r6, sl
 800fe46:	465f      	mov	r7, fp
 800fe48:	9d01      	ldr	r5, [sp, #4]
 800fe4a:	4642      	mov	r2, r8
 800fe4c:	464b      	mov	r3, r9
 800fe4e:	4630      	mov	r0, r6
 800fe50:	4639      	mov	r1, r7
 800fe52:	f7f0 fcff 	bl	8000854 <__aeabi_ddiv>
 800fe56:	f7f0 fe83 	bl	8000b60 <__aeabi_d2iz>
 800fe5a:	4682      	mov	sl, r0
 800fe5c:	f7f0 fb66 	bl	800052c <__aeabi_i2d>
 800fe60:	4642      	mov	r2, r8
 800fe62:	464b      	mov	r3, r9
 800fe64:	f7f0 fbcc 	bl	8000600 <__aeabi_dmul>
 800fe68:	4602      	mov	r2, r0
 800fe6a:	4630      	mov	r0, r6
 800fe6c:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800fe70:	460b      	mov	r3, r1
 800fe72:	4639      	mov	r1, r7
 800fe74:	f7f0 fa0c 	bl	8000290 <__aeabi_dsub>
 800fe78:	f805 6b01 	strb.w	r6, [r5], #1
 800fe7c:	9e01      	ldr	r6, [sp, #4]
 800fe7e:	4602      	mov	r2, r0
 800fe80:	9f03      	ldr	r7, [sp, #12]
 800fe82:	460b      	mov	r3, r1
 800fe84:	1bae      	subs	r6, r5, r6
 800fe86:	42b7      	cmp	r7, r6
 800fe88:	d135      	bne.n	800fef6 <_dtoa_r+0x6e6>
 800fe8a:	f7f0 fa03 	bl	8000294 <__adddf3>
 800fe8e:	4642      	mov	r2, r8
 800fe90:	464b      	mov	r3, r9
 800fe92:	4606      	mov	r6, r0
 800fe94:	460f      	mov	r7, r1
 800fe96:	f7f0 fe43 	bl	8000b20 <__aeabi_dcmpgt>
 800fe9a:	b9d0      	cbnz	r0, 800fed2 <_dtoa_r+0x6c2>
 800fe9c:	4642      	mov	r2, r8
 800fe9e:	464b      	mov	r3, r9
 800fea0:	4630      	mov	r0, r6
 800fea2:	4639      	mov	r1, r7
 800fea4:	f7f0 fe14 	bl	8000ad0 <__aeabi_dcmpeq>
 800fea8:	b110      	cbz	r0, 800feb0 <_dtoa_r+0x6a0>
 800feaa:	f01a 0f01 	tst.w	sl, #1
 800feae:	d110      	bne.n	800fed2 <_dtoa_r+0x6c2>
 800feb0:	4620      	mov	r0, r4
 800feb2:	ee18 1a10 	vmov	r1, s16
 800feb6:	f000 faf1 	bl	801049c <_Bfree>
 800feba:	2300      	movs	r3, #0
 800febc:	9800      	ldr	r0, [sp, #0]
 800febe:	702b      	strb	r3, [r5, #0]
 800fec0:	3001      	adds	r0, #1
 800fec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fec4:	6018      	str	r0, [r3, #0]
 800fec6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fec8:	2b00      	cmp	r3, #0
 800feca:	f43f acf1 	beq.w	800f8b0 <_dtoa_r+0xa0>
 800fece:	601d      	str	r5, [r3, #0]
 800fed0:	e4ee      	b.n	800f8b0 <_dtoa_r+0xa0>
 800fed2:	9f00      	ldr	r7, [sp, #0]
 800fed4:	462b      	mov	r3, r5
 800fed6:	461d      	mov	r5, r3
 800fed8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fedc:	2a39      	cmp	r2, #57	; 0x39
 800fede:	d106      	bne.n	800feee <_dtoa_r+0x6de>
 800fee0:	9a01      	ldr	r2, [sp, #4]
 800fee2:	429a      	cmp	r2, r3
 800fee4:	d1f7      	bne.n	800fed6 <_dtoa_r+0x6c6>
 800fee6:	2230      	movs	r2, #48	; 0x30
 800fee8:	9901      	ldr	r1, [sp, #4]
 800feea:	3701      	adds	r7, #1
 800feec:	700a      	strb	r2, [r1, #0]
 800feee:	781a      	ldrb	r2, [r3, #0]
 800fef0:	3201      	adds	r2, #1
 800fef2:	701a      	strb	r2, [r3, #0]
 800fef4:	e790      	b.n	800fe18 <_dtoa_r+0x608>
 800fef6:	2200      	movs	r2, #0
 800fef8:	4ba4      	ldr	r3, [pc, #656]	; (801018c <_dtoa_r+0x97c>)
 800fefa:	f7f0 fb81 	bl	8000600 <__aeabi_dmul>
 800fefe:	2200      	movs	r2, #0
 800ff00:	2300      	movs	r3, #0
 800ff02:	4606      	mov	r6, r0
 800ff04:	460f      	mov	r7, r1
 800ff06:	f7f0 fde3 	bl	8000ad0 <__aeabi_dcmpeq>
 800ff0a:	2800      	cmp	r0, #0
 800ff0c:	d09d      	beq.n	800fe4a <_dtoa_r+0x63a>
 800ff0e:	e7cf      	b.n	800feb0 <_dtoa_r+0x6a0>
 800ff10:	9a08      	ldr	r2, [sp, #32]
 800ff12:	2a00      	cmp	r2, #0
 800ff14:	f000 80d5 	beq.w	80100c2 <_dtoa_r+0x8b2>
 800ff18:	9a06      	ldr	r2, [sp, #24]
 800ff1a:	2a01      	cmp	r2, #1
 800ff1c:	f300 80b9 	bgt.w	8010092 <_dtoa_r+0x882>
 800ff20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ff22:	2a00      	cmp	r2, #0
 800ff24:	f000 80b1 	beq.w	801008a <_dtoa_r+0x87a>
 800ff28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ff2c:	9e07      	ldr	r6, [sp, #28]
 800ff2e:	9d04      	ldr	r5, [sp, #16]
 800ff30:	9a04      	ldr	r2, [sp, #16]
 800ff32:	2101      	movs	r1, #1
 800ff34:	4620      	mov	r0, r4
 800ff36:	441a      	add	r2, r3
 800ff38:	9204      	str	r2, [sp, #16]
 800ff3a:	9a05      	ldr	r2, [sp, #20]
 800ff3c:	441a      	add	r2, r3
 800ff3e:	9205      	str	r2, [sp, #20]
 800ff40:	f000 fb66 	bl	8010610 <__i2b>
 800ff44:	4607      	mov	r7, r0
 800ff46:	2d00      	cmp	r5, #0
 800ff48:	dd0c      	ble.n	800ff64 <_dtoa_r+0x754>
 800ff4a:	9b05      	ldr	r3, [sp, #20]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	dd09      	ble.n	800ff64 <_dtoa_r+0x754>
 800ff50:	42ab      	cmp	r3, r5
 800ff52:	9a04      	ldr	r2, [sp, #16]
 800ff54:	bfa8      	it	ge
 800ff56:	462b      	movge	r3, r5
 800ff58:	1ad2      	subs	r2, r2, r3
 800ff5a:	1aed      	subs	r5, r5, r3
 800ff5c:	9204      	str	r2, [sp, #16]
 800ff5e:	9a05      	ldr	r2, [sp, #20]
 800ff60:	1ad3      	subs	r3, r2, r3
 800ff62:	9305      	str	r3, [sp, #20]
 800ff64:	9b07      	ldr	r3, [sp, #28]
 800ff66:	b31b      	cbz	r3, 800ffb0 <_dtoa_r+0x7a0>
 800ff68:	9b08      	ldr	r3, [sp, #32]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	f000 80ad 	beq.w	80100ca <_dtoa_r+0x8ba>
 800ff70:	2e00      	cmp	r6, #0
 800ff72:	dd13      	ble.n	800ff9c <_dtoa_r+0x78c>
 800ff74:	4639      	mov	r1, r7
 800ff76:	4632      	mov	r2, r6
 800ff78:	4620      	mov	r0, r4
 800ff7a:	f000 fc07 	bl	801078c <__pow5mult>
 800ff7e:	ee18 2a10 	vmov	r2, s16
 800ff82:	4601      	mov	r1, r0
 800ff84:	4607      	mov	r7, r0
 800ff86:	4620      	mov	r0, r4
 800ff88:	f000 fb58 	bl	801063c <__multiply>
 800ff8c:	4680      	mov	r8, r0
 800ff8e:	ee18 1a10 	vmov	r1, s16
 800ff92:	4620      	mov	r0, r4
 800ff94:	ee08 8a10 	vmov	s16, r8
 800ff98:	f000 fa80 	bl	801049c <_Bfree>
 800ff9c:	9b07      	ldr	r3, [sp, #28]
 800ff9e:	1b9a      	subs	r2, r3, r6
 800ffa0:	d006      	beq.n	800ffb0 <_dtoa_r+0x7a0>
 800ffa2:	ee18 1a10 	vmov	r1, s16
 800ffa6:	4620      	mov	r0, r4
 800ffa8:	f000 fbf0 	bl	801078c <__pow5mult>
 800ffac:	ee08 0a10 	vmov	s16, r0
 800ffb0:	2101      	movs	r1, #1
 800ffb2:	4620      	mov	r0, r4
 800ffb4:	f000 fb2c 	bl	8010610 <__i2b>
 800ffb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffba:	4606      	mov	r6, r0
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	f340 8086 	ble.w	80100ce <_dtoa_r+0x8be>
 800ffc2:	461a      	mov	r2, r3
 800ffc4:	4601      	mov	r1, r0
 800ffc6:	4620      	mov	r0, r4
 800ffc8:	f000 fbe0 	bl	801078c <__pow5mult>
 800ffcc:	9b06      	ldr	r3, [sp, #24]
 800ffce:	4606      	mov	r6, r0
 800ffd0:	2b01      	cmp	r3, #1
 800ffd2:	dd7f      	ble.n	80100d4 <_dtoa_r+0x8c4>
 800ffd4:	f04f 0800 	mov.w	r8, #0
 800ffd8:	6933      	ldr	r3, [r6, #16]
 800ffda:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ffde:	6918      	ldr	r0, [r3, #16]
 800ffe0:	f000 fac6 	bl	8010570 <__hi0bits>
 800ffe4:	f1c0 0020 	rsb	r0, r0, #32
 800ffe8:	9b05      	ldr	r3, [sp, #20]
 800ffea:	4418      	add	r0, r3
 800ffec:	f010 001f 	ands.w	r0, r0, #31
 800fff0:	f000 8091 	beq.w	8010116 <_dtoa_r+0x906>
 800fff4:	f1c0 0320 	rsb	r3, r0, #32
 800fff8:	2b04      	cmp	r3, #4
 800fffa:	f340 8089 	ble.w	8010110 <_dtoa_r+0x900>
 800fffe:	f1c0 001c 	rsb	r0, r0, #28
 8010002:	9b04      	ldr	r3, [sp, #16]
 8010004:	4405      	add	r5, r0
 8010006:	4403      	add	r3, r0
 8010008:	9304      	str	r3, [sp, #16]
 801000a:	9b05      	ldr	r3, [sp, #20]
 801000c:	4403      	add	r3, r0
 801000e:	9305      	str	r3, [sp, #20]
 8010010:	9b04      	ldr	r3, [sp, #16]
 8010012:	2b00      	cmp	r3, #0
 8010014:	dd07      	ble.n	8010026 <_dtoa_r+0x816>
 8010016:	ee18 1a10 	vmov	r1, s16
 801001a:	461a      	mov	r2, r3
 801001c:	4620      	mov	r0, r4
 801001e:	f000 fc0f 	bl	8010840 <__lshift>
 8010022:	ee08 0a10 	vmov	s16, r0
 8010026:	9b05      	ldr	r3, [sp, #20]
 8010028:	2b00      	cmp	r3, #0
 801002a:	dd05      	ble.n	8010038 <_dtoa_r+0x828>
 801002c:	4631      	mov	r1, r6
 801002e:	461a      	mov	r2, r3
 8010030:	4620      	mov	r0, r4
 8010032:	f000 fc05 	bl	8010840 <__lshift>
 8010036:	4606      	mov	r6, r0
 8010038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801003a:	2b00      	cmp	r3, #0
 801003c:	d06d      	beq.n	801011a <_dtoa_r+0x90a>
 801003e:	4631      	mov	r1, r6
 8010040:	ee18 0a10 	vmov	r0, s16
 8010044:	f000 fc6c 	bl	8010920 <__mcmp>
 8010048:	2800      	cmp	r0, #0
 801004a:	da66      	bge.n	801011a <_dtoa_r+0x90a>
 801004c:	9b00      	ldr	r3, [sp, #0]
 801004e:	ee18 1a10 	vmov	r1, s16
 8010052:	220a      	movs	r2, #10
 8010054:	4620      	mov	r0, r4
 8010056:	3b01      	subs	r3, #1
 8010058:	9300      	str	r3, [sp, #0]
 801005a:	2300      	movs	r3, #0
 801005c:	f000 fa40 	bl	80104e0 <__multadd>
 8010060:	9b08      	ldr	r3, [sp, #32]
 8010062:	ee08 0a10 	vmov	s16, r0
 8010066:	2b00      	cmp	r3, #0
 8010068:	f000 81af 	beq.w	80103ca <_dtoa_r+0xbba>
 801006c:	2300      	movs	r3, #0
 801006e:	4639      	mov	r1, r7
 8010070:	220a      	movs	r2, #10
 8010072:	4620      	mov	r0, r4
 8010074:	f000 fa34 	bl	80104e0 <__multadd>
 8010078:	9b02      	ldr	r3, [sp, #8]
 801007a:	4607      	mov	r7, r0
 801007c:	2b00      	cmp	r3, #0
 801007e:	f300 808d 	bgt.w	801019c <_dtoa_r+0x98c>
 8010082:	9b06      	ldr	r3, [sp, #24]
 8010084:	2b02      	cmp	r3, #2
 8010086:	dc50      	bgt.n	801012a <_dtoa_r+0x91a>
 8010088:	e088      	b.n	801019c <_dtoa_r+0x98c>
 801008a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801008c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010090:	e74c      	b.n	800ff2c <_dtoa_r+0x71c>
 8010092:	9b03      	ldr	r3, [sp, #12]
 8010094:	1e5e      	subs	r6, r3, #1
 8010096:	9b07      	ldr	r3, [sp, #28]
 8010098:	42b3      	cmp	r3, r6
 801009a:	bfb7      	itett	lt
 801009c:	9b07      	ldrlt	r3, [sp, #28]
 801009e:	1b9e      	subge	r6, r3, r6
 80100a0:	9607      	strlt	r6, [sp, #28]
 80100a2:	1af2      	sublt	r2, r6, r3
 80100a4:	bfbf      	itttt	lt
 80100a6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80100a8:	2600      	movlt	r6, #0
 80100aa:	189b      	addlt	r3, r3, r2
 80100ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 80100ae:	9b03      	ldr	r3, [sp, #12]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	bfb7      	itett	lt
 80100b4:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80100b8:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80100bc:	1a9d      	sublt	r5, r3, r2
 80100be:	2300      	movlt	r3, #0
 80100c0:	e736      	b.n	800ff30 <_dtoa_r+0x720>
 80100c2:	9e07      	ldr	r6, [sp, #28]
 80100c4:	9d04      	ldr	r5, [sp, #16]
 80100c6:	9f08      	ldr	r7, [sp, #32]
 80100c8:	e73d      	b.n	800ff46 <_dtoa_r+0x736>
 80100ca:	9a07      	ldr	r2, [sp, #28]
 80100cc:	e769      	b.n	800ffa2 <_dtoa_r+0x792>
 80100ce:	9b06      	ldr	r3, [sp, #24]
 80100d0:	2b01      	cmp	r3, #1
 80100d2:	dc18      	bgt.n	8010106 <_dtoa_r+0x8f6>
 80100d4:	f1ba 0f00 	cmp.w	sl, #0
 80100d8:	d115      	bne.n	8010106 <_dtoa_r+0x8f6>
 80100da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80100de:	b993      	cbnz	r3, 8010106 <_dtoa_r+0x8f6>
 80100e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80100e4:	0d1b      	lsrs	r3, r3, #20
 80100e6:	051b      	lsls	r3, r3, #20
 80100e8:	b183      	cbz	r3, 801010c <_dtoa_r+0x8fc>
 80100ea:	9b04      	ldr	r3, [sp, #16]
 80100ec:	f04f 0801 	mov.w	r8, #1
 80100f0:	3301      	adds	r3, #1
 80100f2:	9304      	str	r3, [sp, #16]
 80100f4:	9b05      	ldr	r3, [sp, #20]
 80100f6:	3301      	adds	r3, #1
 80100f8:	9305      	str	r3, [sp, #20]
 80100fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	f47f af6b 	bne.w	800ffd8 <_dtoa_r+0x7c8>
 8010102:	2001      	movs	r0, #1
 8010104:	e770      	b.n	800ffe8 <_dtoa_r+0x7d8>
 8010106:	f04f 0800 	mov.w	r8, #0
 801010a:	e7f6      	b.n	80100fa <_dtoa_r+0x8ea>
 801010c:	4698      	mov	r8, r3
 801010e:	e7f4      	b.n	80100fa <_dtoa_r+0x8ea>
 8010110:	f43f af7e 	beq.w	8010010 <_dtoa_r+0x800>
 8010114:	4618      	mov	r0, r3
 8010116:	301c      	adds	r0, #28
 8010118:	e773      	b.n	8010002 <_dtoa_r+0x7f2>
 801011a:	9b03      	ldr	r3, [sp, #12]
 801011c:	2b00      	cmp	r3, #0
 801011e:	dc37      	bgt.n	8010190 <_dtoa_r+0x980>
 8010120:	9b06      	ldr	r3, [sp, #24]
 8010122:	2b02      	cmp	r3, #2
 8010124:	dd34      	ble.n	8010190 <_dtoa_r+0x980>
 8010126:	9b03      	ldr	r3, [sp, #12]
 8010128:	9302      	str	r3, [sp, #8]
 801012a:	9b02      	ldr	r3, [sp, #8]
 801012c:	b96b      	cbnz	r3, 801014a <_dtoa_r+0x93a>
 801012e:	4631      	mov	r1, r6
 8010130:	2205      	movs	r2, #5
 8010132:	4620      	mov	r0, r4
 8010134:	f000 f9d4 	bl	80104e0 <__multadd>
 8010138:	4601      	mov	r1, r0
 801013a:	4606      	mov	r6, r0
 801013c:	ee18 0a10 	vmov	r0, s16
 8010140:	f000 fbee 	bl	8010920 <__mcmp>
 8010144:	2800      	cmp	r0, #0
 8010146:	f73f adbd 	bgt.w	800fcc4 <_dtoa_r+0x4b4>
 801014a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801014c:	9d01      	ldr	r5, [sp, #4]
 801014e:	43db      	mvns	r3, r3
 8010150:	9300      	str	r3, [sp, #0]
 8010152:	f04f 0800 	mov.w	r8, #0
 8010156:	4631      	mov	r1, r6
 8010158:	4620      	mov	r0, r4
 801015a:	f000 f99f 	bl	801049c <_Bfree>
 801015e:	2f00      	cmp	r7, #0
 8010160:	f43f aea6 	beq.w	800feb0 <_dtoa_r+0x6a0>
 8010164:	f1b8 0f00 	cmp.w	r8, #0
 8010168:	d005      	beq.n	8010176 <_dtoa_r+0x966>
 801016a:	45b8      	cmp	r8, r7
 801016c:	d003      	beq.n	8010176 <_dtoa_r+0x966>
 801016e:	4641      	mov	r1, r8
 8010170:	4620      	mov	r0, r4
 8010172:	f000 f993 	bl	801049c <_Bfree>
 8010176:	4639      	mov	r1, r7
 8010178:	4620      	mov	r0, r4
 801017a:	f000 f98f 	bl	801049c <_Bfree>
 801017e:	e697      	b.n	800feb0 <_dtoa_r+0x6a0>
 8010180:	2600      	movs	r6, #0
 8010182:	4637      	mov	r7, r6
 8010184:	e7e1      	b.n	801014a <_dtoa_r+0x93a>
 8010186:	9700      	str	r7, [sp, #0]
 8010188:	4637      	mov	r7, r6
 801018a:	e59b      	b.n	800fcc4 <_dtoa_r+0x4b4>
 801018c:	40240000 	.word	0x40240000
 8010190:	9b08      	ldr	r3, [sp, #32]
 8010192:	2b00      	cmp	r3, #0
 8010194:	f000 80ca 	beq.w	801032c <_dtoa_r+0xb1c>
 8010198:	9b03      	ldr	r3, [sp, #12]
 801019a:	9302      	str	r3, [sp, #8]
 801019c:	2d00      	cmp	r5, #0
 801019e:	dd05      	ble.n	80101ac <_dtoa_r+0x99c>
 80101a0:	4639      	mov	r1, r7
 80101a2:	462a      	mov	r2, r5
 80101a4:	4620      	mov	r0, r4
 80101a6:	f000 fb4b 	bl	8010840 <__lshift>
 80101aa:	4607      	mov	r7, r0
 80101ac:	f1b8 0f00 	cmp.w	r8, #0
 80101b0:	d05b      	beq.n	801026a <_dtoa_r+0xa5a>
 80101b2:	6879      	ldr	r1, [r7, #4]
 80101b4:	4620      	mov	r0, r4
 80101b6:	f000 f931 	bl	801041c <_Balloc>
 80101ba:	4605      	mov	r5, r0
 80101bc:	b928      	cbnz	r0, 80101ca <_dtoa_r+0x9ba>
 80101be:	4b87      	ldr	r3, [pc, #540]	; (80103dc <_dtoa_r+0xbcc>)
 80101c0:	4602      	mov	r2, r0
 80101c2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80101c6:	f7ff bb3d 	b.w	800f844 <_dtoa_r+0x34>
 80101ca:	693a      	ldr	r2, [r7, #16]
 80101cc:	f107 010c 	add.w	r1, r7, #12
 80101d0:	300c      	adds	r0, #12
 80101d2:	3202      	adds	r2, #2
 80101d4:	0092      	lsls	r2, r2, #2
 80101d6:	f7fe fde5 	bl	800eda4 <memcpy>
 80101da:	2201      	movs	r2, #1
 80101dc:	4629      	mov	r1, r5
 80101de:	4620      	mov	r0, r4
 80101e0:	f000 fb2e 	bl	8010840 <__lshift>
 80101e4:	9b01      	ldr	r3, [sp, #4]
 80101e6:	46b8      	mov	r8, r7
 80101e8:	4607      	mov	r7, r0
 80101ea:	f103 0901 	add.w	r9, r3, #1
 80101ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80101f2:	4413      	add	r3, r2
 80101f4:	9305      	str	r3, [sp, #20]
 80101f6:	f00a 0301 	and.w	r3, sl, #1
 80101fa:	9304      	str	r3, [sp, #16]
 80101fc:	4631      	mov	r1, r6
 80101fe:	ee18 0a10 	vmov	r0, s16
 8010202:	f7ff fa71 	bl	800f6e8 <quorem>
 8010206:	4641      	mov	r1, r8
 8010208:	9002      	str	r0, [sp, #8]
 801020a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801020e:	ee18 0a10 	vmov	r0, s16
 8010212:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8010216:	f000 fb83 	bl	8010920 <__mcmp>
 801021a:	463a      	mov	r2, r7
 801021c:	9003      	str	r0, [sp, #12]
 801021e:	4631      	mov	r1, r6
 8010220:	4620      	mov	r0, r4
 8010222:	f000 fb99 	bl	8010958 <__mdiff>
 8010226:	68c2      	ldr	r2, [r0, #12]
 8010228:	4605      	mov	r5, r0
 801022a:	bb02      	cbnz	r2, 801026e <_dtoa_r+0xa5e>
 801022c:	4601      	mov	r1, r0
 801022e:	ee18 0a10 	vmov	r0, s16
 8010232:	f000 fb75 	bl	8010920 <__mcmp>
 8010236:	4602      	mov	r2, r0
 8010238:	4629      	mov	r1, r5
 801023a:	4620      	mov	r0, r4
 801023c:	9207      	str	r2, [sp, #28]
 801023e:	f000 f92d 	bl	801049c <_Bfree>
 8010242:	464d      	mov	r5, r9
 8010244:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010248:	ea43 0102 	orr.w	r1, r3, r2
 801024c:	9b04      	ldr	r3, [sp, #16]
 801024e:	430b      	orrs	r3, r1
 8010250:	d10f      	bne.n	8010272 <_dtoa_r+0xa62>
 8010252:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010256:	d02a      	beq.n	80102ae <_dtoa_r+0xa9e>
 8010258:	9b03      	ldr	r3, [sp, #12]
 801025a:	2b00      	cmp	r3, #0
 801025c:	dd02      	ble.n	8010264 <_dtoa_r+0xa54>
 801025e:	9b02      	ldr	r3, [sp, #8]
 8010260:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010264:	f88b a000 	strb.w	sl, [fp]
 8010268:	e775      	b.n	8010156 <_dtoa_r+0x946>
 801026a:	4638      	mov	r0, r7
 801026c:	e7ba      	b.n	80101e4 <_dtoa_r+0x9d4>
 801026e:	2201      	movs	r2, #1
 8010270:	e7e2      	b.n	8010238 <_dtoa_r+0xa28>
 8010272:	9b03      	ldr	r3, [sp, #12]
 8010274:	2b00      	cmp	r3, #0
 8010276:	db04      	blt.n	8010282 <_dtoa_r+0xa72>
 8010278:	9906      	ldr	r1, [sp, #24]
 801027a:	430b      	orrs	r3, r1
 801027c:	9904      	ldr	r1, [sp, #16]
 801027e:	430b      	orrs	r3, r1
 8010280:	d122      	bne.n	80102c8 <_dtoa_r+0xab8>
 8010282:	2a00      	cmp	r2, #0
 8010284:	ddee      	ble.n	8010264 <_dtoa_r+0xa54>
 8010286:	ee18 1a10 	vmov	r1, s16
 801028a:	2201      	movs	r2, #1
 801028c:	4620      	mov	r0, r4
 801028e:	f000 fad7 	bl	8010840 <__lshift>
 8010292:	4631      	mov	r1, r6
 8010294:	ee08 0a10 	vmov	s16, r0
 8010298:	f000 fb42 	bl	8010920 <__mcmp>
 801029c:	2800      	cmp	r0, #0
 801029e:	dc03      	bgt.n	80102a8 <_dtoa_r+0xa98>
 80102a0:	d1e0      	bne.n	8010264 <_dtoa_r+0xa54>
 80102a2:	f01a 0f01 	tst.w	sl, #1
 80102a6:	d0dd      	beq.n	8010264 <_dtoa_r+0xa54>
 80102a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80102ac:	d1d7      	bne.n	801025e <_dtoa_r+0xa4e>
 80102ae:	2339      	movs	r3, #57	; 0x39
 80102b0:	f88b 3000 	strb.w	r3, [fp]
 80102b4:	462b      	mov	r3, r5
 80102b6:	461d      	mov	r5, r3
 80102b8:	3b01      	subs	r3, #1
 80102ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80102be:	2a39      	cmp	r2, #57	; 0x39
 80102c0:	d070      	beq.n	80103a4 <_dtoa_r+0xb94>
 80102c2:	3201      	adds	r2, #1
 80102c4:	701a      	strb	r2, [r3, #0]
 80102c6:	e746      	b.n	8010156 <_dtoa_r+0x946>
 80102c8:	2a00      	cmp	r2, #0
 80102ca:	dd07      	ble.n	80102dc <_dtoa_r+0xacc>
 80102cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80102d0:	d0ed      	beq.n	80102ae <_dtoa_r+0xa9e>
 80102d2:	f10a 0301 	add.w	r3, sl, #1
 80102d6:	f88b 3000 	strb.w	r3, [fp]
 80102da:	e73c      	b.n	8010156 <_dtoa_r+0x946>
 80102dc:	9b05      	ldr	r3, [sp, #20]
 80102de:	f809 ac01 	strb.w	sl, [r9, #-1]
 80102e2:	4599      	cmp	r9, r3
 80102e4:	d046      	beq.n	8010374 <_dtoa_r+0xb64>
 80102e6:	ee18 1a10 	vmov	r1, s16
 80102ea:	2300      	movs	r3, #0
 80102ec:	220a      	movs	r2, #10
 80102ee:	4620      	mov	r0, r4
 80102f0:	f000 f8f6 	bl	80104e0 <__multadd>
 80102f4:	45b8      	cmp	r8, r7
 80102f6:	ee08 0a10 	vmov	s16, r0
 80102fa:	f04f 0300 	mov.w	r3, #0
 80102fe:	f04f 020a 	mov.w	r2, #10
 8010302:	4641      	mov	r1, r8
 8010304:	4620      	mov	r0, r4
 8010306:	d106      	bne.n	8010316 <_dtoa_r+0xb06>
 8010308:	f000 f8ea 	bl	80104e0 <__multadd>
 801030c:	4680      	mov	r8, r0
 801030e:	4607      	mov	r7, r0
 8010310:	f109 0901 	add.w	r9, r9, #1
 8010314:	e772      	b.n	80101fc <_dtoa_r+0x9ec>
 8010316:	f000 f8e3 	bl	80104e0 <__multadd>
 801031a:	4639      	mov	r1, r7
 801031c:	4680      	mov	r8, r0
 801031e:	2300      	movs	r3, #0
 8010320:	220a      	movs	r2, #10
 8010322:	4620      	mov	r0, r4
 8010324:	f000 f8dc 	bl	80104e0 <__multadd>
 8010328:	4607      	mov	r7, r0
 801032a:	e7f1      	b.n	8010310 <_dtoa_r+0xb00>
 801032c:	9b03      	ldr	r3, [sp, #12]
 801032e:	9302      	str	r3, [sp, #8]
 8010330:	9d01      	ldr	r5, [sp, #4]
 8010332:	4631      	mov	r1, r6
 8010334:	ee18 0a10 	vmov	r0, s16
 8010338:	f7ff f9d6 	bl	800f6e8 <quorem>
 801033c:	9b01      	ldr	r3, [sp, #4]
 801033e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010342:	f805 ab01 	strb.w	sl, [r5], #1
 8010346:	1aea      	subs	r2, r5, r3
 8010348:	9b02      	ldr	r3, [sp, #8]
 801034a:	4293      	cmp	r3, r2
 801034c:	dd09      	ble.n	8010362 <_dtoa_r+0xb52>
 801034e:	ee18 1a10 	vmov	r1, s16
 8010352:	2300      	movs	r3, #0
 8010354:	220a      	movs	r2, #10
 8010356:	4620      	mov	r0, r4
 8010358:	f000 f8c2 	bl	80104e0 <__multadd>
 801035c:	ee08 0a10 	vmov	s16, r0
 8010360:	e7e7      	b.n	8010332 <_dtoa_r+0xb22>
 8010362:	9b02      	ldr	r3, [sp, #8]
 8010364:	f04f 0800 	mov.w	r8, #0
 8010368:	2b00      	cmp	r3, #0
 801036a:	bfcc      	ite	gt
 801036c:	461d      	movgt	r5, r3
 801036e:	2501      	movle	r5, #1
 8010370:	9b01      	ldr	r3, [sp, #4]
 8010372:	441d      	add	r5, r3
 8010374:	ee18 1a10 	vmov	r1, s16
 8010378:	2201      	movs	r2, #1
 801037a:	4620      	mov	r0, r4
 801037c:	f000 fa60 	bl	8010840 <__lshift>
 8010380:	4631      	mov	r1, r6
 8010382:	ee08 0a10 	vmov	s16, r0
 8010386:	f000 facb 	bl	8010920 <__mcmp>
 801038a:	2800      	cmp	r0, #0
 801038c:	dc92      	bgt.n	80102b4 <_dtoa_r+0xaa4>
 801038e:	d102      	bne.n	8010396 <_dtoa_r+0xb86>
 8010390:	f01a 0f01 	tst.w	sl, #1
 8010394:	d18e      	bne.n	80102b4 <_dtoa_r+0xaa4>
 8010396:	462b      	mov	r3, r5
 8010398:	461d      	mov	r5, r3
 801039a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801039e:	2a30      	cmp	r2, #48	; 0x30
 80103a0:	d0fa      	beq.n	8010398 <_dtoa_r+0xb88>
 80103a2:	e6d8      	b.n	8010156 <_dtoa_r+0x946>
 80103a4:	9a01      	ldr	r2, [sp, #4]
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d185      	bne.n	80102b6 <_dtoa_r+0xaa6>
 80103aa:	9b00      	ldr	r3, [sp, #0]
 80103ac:	3301      	adds	r3, #1
 80103ae:	9300      	str	r3, [sp, #0]
 80103b0:	2331      	movs	r3, #49	; 0x31
 80103b2:	7013      	strb	r3, [r2, #0]
 80103b4:	e6cf      	b.n	8010156 <_dtoa_r+0x946>
 80103b6:	4b0a      	ldr	r3, [pc, #40]	; (80103e0 <_dtoa_r+0xbd0>)
 80103b8:	f7ff ba98 	b.w	800f8ec <_dtoa_r+0xdc>
 80103bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80103be:	2b00      	cmp	r3, #0
 80103c0:	f47f aa71 	bne.w	800f8a6 <_dtoa_r+0x96>
 80103c4:	4b07      	ldr	r3, [pc, #28]	; (80103e4 <_dtoa_r+0xbd4>)
 80103c6:	f7ff ba91 	b.w	800f8ec <_dtoa_r+0xdc>
 80103ca:	9b02      	ldr	r3, [sp, #8]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	dcaf      	bgt.n	8010330 <_dtoa_r+0xb20>
 80103d0:	9b06      	ldr	r3, [sp, #24]
 80103d2:	2b02      	cmp	r3, #2
 80103d4:	f73f aea9 	bgt.w	801012a <_dtoa_r+0x91a>
 80103d8:	e7aa      	b.n	8010330 <_dtoa_r+0xb20>
 80103da:	bf00      	nop
 80103dc:	08011ed3 	.word	0x08011ed3
 80103e0:	08011e30 	.word	0x08011e30
 80103e4:	08011e54 	.word	0x08011e54

080103e8 <_localeconv_r>:
 80103e8:	4800      	ldr	r0, [pc, #0]	; (80103ec <_localeconv_r+0x4>)
 80103ea:	4770      	bx	lr
 80103ec:	20000184 	.word	0x20000184

080103f0 <malloc>:
 80103f0:	4b02      	ldr	r3, [pc, #8]	; (80103fc <malloc+0xc>)
 80103f2:	4601      	mov	r1, r0
 80103f4:	6818      	ldr	r0, [r3, #0]
 80103f6:	f000 bc1d 	b.w	8010c34 <_malloc_r>
 80103fa:	bf00      	nop
 80103fc:	20000030 	.word	0x20000030

08010400 <memchr>:
 8010400:	b2c9      	uxtb	r1, r1
 8010402:	4402      	add	r2, r0
 8010404:	b510      	push	{r4, lr}
 8010406:	4290      	cmp	r0, r2
 8010408:	4603      	mov	r3, r0
 801040a:	d101      	bne.n	8010410 <memchr+0x10>
 801040c:	2300      	movs	r3, #0
 801040e:	e003      	b.n	8010418 <memchr+0x18>
 8010410:	781c      	ldrb	r4, [r3, #0]
 8010412:	3001      	adds	r0, #1
 8010414:	428c      	cmp	r4, r1
 8010416:	d1f6      	bne.n	8010406 <memchr+0x6>
 8010418:	4618      	mov	r0, r3
 801041a:	bd10      	pop	{r4, pc}

0801041c <_Balloc>:
 801041c:	b570      	push	{r4, r5, r6, lr}
 801041e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010420:	4604      	mov	r4, r0
 8010422:	460d      	mov	r5, r1
 8010424:	b976      	cbnz	r6, 8010444 <_Balloc+0x28>
 8010426:	2010      	movs	r0, #16
 8010428:	f7ff ffe2 	bl	80103f0 <malloc>
 801042c:	4602      	mov	r2, r0
 801042e:	6260      	str	r0, [r4, #36]	; 0x24
 8010430:	b920      	cbnz	r0, 801043c <_Balloc+0x20>
 8010432:	4b18      	ldr	r3, [pc, #96]	; (8010494 <_Balloc+0x78>)
 8010434:	2166      	movs	r1, #102	; 0x66
 8010436:	4818      	ldr	r0, [pc, #96]	; (8010498 <_Balloc+0x7c>)
 8010438:	f000 fddc 	bl	8010ff4 <__assert_func>
 801043c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010440:	6006      	str	r6, [r0, #0]
 8010442:	60c6      	str	r6, [r0, #12]
 8010444:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010446:	68f3      	ldr	r3, [r6, #12]
 8010448:	b183      	cbz	r3, 801046c <_Balloc+0x50>
 801044a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801044c:	68db      	ldr	r3, [r3, #12]
 801044e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010452:	b9b8      	cbnz	r0, 8010484 <_Balloc+0x68>
 8010454:	2101      	movs	r1, #1
 8010456:	4620      	mov	r0, r4
 8010458:	fa01 f605 	lsl.w	r6, r1, r5
 801045c:	1d72      	adds	r2, r6, #5
 801045e:	0092      	lsls	r2, r2, #2
 8010460:	f000 fb66 	bl	8010b30 <_calloc_r>
 8010464:	b160      	cbz	r0, 8010480 <_Balloc+0x64>
 8010466:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801046a:	e00e      	b.n	801048a <_Balloc+0x6e>
 801046c:	2221      	movs	r2, #33	; 0x21
 801046e:	2104      	movs	r1, #4
 8010470:	4620      	mov	r0, r4
 8010472:	f000 fb5d 	bl	8010b30 <_calloc_r>
 8010476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010478:	60f0      	str	r0, [r6, #12]
 801047a:	68db      	ldr	r3, [r3, #12]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d1e4      	bne.n	801044a <_Balloc+0x2e>
 8010480:	2000      	movs	r0, #0
 8010482:	bd70      	pop	{r4, r5, r6, pc}
 8010484:	6802      	ldr	r2, [r0, #0]
 8010486:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801048a:	2300      	movs	r3, #0
 801048c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010490:	e7f7      	b.n	8010482 <_Balloc+0x66>
 8010492:	bf00      	nop
 8010494:	08011e61 	.word	0x08011e61
 8010498:	08011ee4 	.word	0x08011ee4

0801049c <_Bfree>:
 801049c:	b570      	push	{r4, r5, r6, lr}
 801049e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80104a0:	4605      	mov	r5, r0
 80104a2:	460c      	mov	r4, r1
 80104a4:	b976      	cbnz	r6, 80104c4 <_Bfree+0x28>
 80104a6:	2010      	movs	r0, #16
 80104a8:	f7ff ffa2 	bl	80103f0 <malloc>
 80104ac:	4602      	mov	r2, r0
 80104ae:	6268      	str	r0, [r5, #36]	; 0x24
 80104b0:	b920      	cbnz	r0, 80104bc <_Bfree+0x20>
 80104b2:	4b09      	ldr	r3, [pc, #36]	; (80104d8 <_Bfree+0x3c>)
 80104b4:	218a      	movs	r1, #138	; 0x8a
 80104b6:	4809      	ldr	r0, [pc, #36]	; (80104dc <_Bfree+0x40>)
 80104b8:	f000 fd9c 	bl	8010ff4 <__assert_func>
 80104bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80104c0:	6006      	str	r6, [r0, #0]
 80104c2:	60c6      	str	r6, [r0, #12]
 80104c4:	b13c      	cbz	r4, 80104d6 <_Bfree+0x3a>
 80104c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80104c8:	6862      	ldr	r2, [r4, #4]
 80104ca:	68db      	ldr	r3, [r3, #12]
 80104cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80104d0:	6021      	str	r1, [r4, #0]
 80104d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80104d6:	bd70      	pop	{r4, r5, r6, pc}
 80104d8:	08011e61 	.word	0x08011e61
 80104dc:	08011ee4 	.word	0x08011ee4

080104e0 <__multadd>:
 80104e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104e4:	f101 0c14 	add.w	ip, r1, #20
 80104e8:	4607      	mov	r7, r0
 80104ea:	460c      	mov	r4, r1
 80104ec:	461e      	mov	r6, r3
 80104ee:	690d      	ldr	r5, [r1, #16]
 80104f0:	2000      	movs	r0, #0
 80104f2:	f8dc 3000 	ldr.w	r3, [ip]
 80104f6:	3001      	adds	r0, #1
 80104f8:	b299      	uxth	r1, r3
 80104fa:	4285      	cmp	r5, r0
 80104fc:	fb02 6101 	mla	r1, r2, r1, r6
 8010500:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010504:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8010508:	b289      	uxth	r1, r1
 801050a:	fb02 3306 	mla	r3, r2, r6, r3
 801050e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010512:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010516:	f84c 1b04 	str.w	r1, [ip], #4
 801051a:	dcea      	bgt.n	80104f2 <__multadd+0x12>
 801051c:	b30e      	cbz	r6, 8010562 <__multadd+0x82>
 801051e:	68a3      	ldr	r3, [r4, #8]
 8010520:	42ab      	cmp	r3, r5
 8010522:	dc19      	bgt.n	8010558 <__multadd+0x78>
 8010524:	6861      	ldr	r1, [r4, #4]
 8010526:	4638      	mov	r0, r7
 8010528:	3101      	adds	r1, #1
 801052a:	f7ff ff77 	bl	801041c <_Balloc>
 801052e:	4680      	mov	r8, r0
 8010530:	b928      	cbnz	r0, 801053e <__multadd+0x5e>
 8010532:	4602      	mov	r2, r0
 8010534:	4b0c      	ldr	r3, [pc, #48]	; (8010568 <__multadd+0x88>)
 8010536:	21b5      	movs	r1, #181	; 0xb5
 8010538:	480c      	ldr	r0, [pc, #48]	; (801056c <__multadd+0x8c>)
 801053a:	f000 fd5b 	bl	8010ff4 <__assert_func>
 801053e:	6922      	ldr	r2, [r4, #16]
 8010540:	f104 010c 	add.w	r1, r4, #12
 8010544:	300c      	adds	r0, #12
 8010546:	3202      	adds	r2, #2
 8010548:	0092      	lsls	r2, r2, #2
 801054a:	f7fe fc2b 	bl	800eda4 <memcpy>
 801054e:	4621      	mov	r1, r4
 8010550:	4644      	mov	r4, r8
 8010552:	4638      	mov	r0, r7
 8010554:	f7ff ffa2 	bl	801049c <_Bfree>
 8010558:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801055c:	3501      	adds	r5, #1
 801055e:	615e      	str	r6, [r3, #20]
 8010560:	6125      	str	r5, [r4, #16]
 8010562:	4620      	mov	r0, r4
 8010564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010568:	08011ed3 	.word	0x08011ed3
 801056c:	08011ee4 	.word	0x08011ee4

08010570 <__hi0bits>:
 8010570:	0c03      	lsrs	r3, r0, #16
 8010572:	041b      	lsls	r3, r3, #16
 8010574:	b9d3      	cbnz	r3, 80105ac <__hi0bits+0x3c>
 8010576:	0400      	lsls	r0, r0, #16
 8010578:	2310      	movs	r3, #16
 801057a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801057e:	bf04      	itt	eq
 8010580:	0200      	lsleq	r0, r0, #8
 8010582:	3308      	addeq	r3, #8
 8010584:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010588:	bf04      	itt	eq
 801058a:	0100      	lsleq	r0, r0, #4
 801058c:	3304      	addeq	r3, #4
 801058e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010592:	bf04      	itt	eq
 8010594:	0080      	lsleq	r0, r0, #2
 8010596:	3302      	addeq	r3, #2
 8010598:	2800      	cmp	r0, #0
 801059a:	db05      	blt.n	80105a8 <__hi0bits+0x38>
 801059c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80105a0:	f103 0301 	add.w	r3, r3, #1
 80105a4:	bf08      	it	eq
 80105a6:	2320      	moveq	r3, #32
 80105a8:	4618      	mov	r0, r3
 80105aa:	4770      	bx	lr
 80105ac:	2300      	movs	r3, #0
 80105ae:	e7e4      	b.n	801057a <__hi0bits+0xa>

080105b0 <__lo0bits>:
 80105b0:	6803      	ldr	r3, [r0, #0]
 80105b2:	4601      	mov	r1, r0
 80105b4:	f013 0207 	ands.w	r2, r3, #7
 80105b8:	d00b      	beq.n	80105d2 <__lo0bits+0x22>
 80105ba:	07da      	lsls	r2, r3, #31
 80105bc:	d423      	bmi.n	8010606 <__lo0bits+0x56>
 80105be:	0798      	lsls	r0, r3, #30
 80105c0:	bf47      	ittee	mi
 80105c2:	085b      	lsrmi	r3, r3, #1
 80105c4:	2001      	movmi	r0, #1
 80105c6:	089b      	lsrpl	r3, r3, #2
 80105c8:	2002      	movpl	r0, #2
 80105ca:	bf4c      	ite	mi
 80105cc:	600b      	strmi	r3, [r1, #0]
 80105ce:	600b      	strpl	r3, [r1, #0]
 80105d0:	4770      	bx	lr
 80105d2:	b298      	uxth	r0, r3
 80105d4:	b9a8      	cbnz	r0, 8010602 <__lo0bits+0x52>
 80105d6:	0c1b      	lsrs	r3, r3, #16
 80105d8:	2010      	movs	r0, #16
 80105da:	b2da      	uxtb	r2, r3
 80105dc:	b90a      	cbnz	r2, 80105e2 <__lo0bits+0x32>
 80105de:	3008      	adds	r0, #8
 80105e0:	0a1b      	lsrs	r3, r3, #8
 80105e2:	071a      	lsls	r2, r3, #28
 80105e4:	bf04      	itt	eq
 80105e6:	091b      	lsreq	r3, r3, #4
 80105e8:	3004      	addeq	r0, #4
 80105ea:	079a      	lsls	r2, r3, #30
 80105ec:	bf04      	itt	eq
 80105ee:	089b      	lsreq	r3, r3, #2
 80105f0:	3002      	addeq	r0, #2
 80105f2:	07da      	lsls	r2, r3, #31
 80105f4:	d403      	bmi.n	80105fe <__lo0bits+0x4e>
 80105f6:	085b      	lsrs	r3, r3, #1
 80105f8:	f100 0001 	add.w	r0, r0, #1
 80105fc:	d005      	beq.n	801060a <__lo0bits+0x5a>
 80105fe:	600b      	str	r3, [r1, #0]
 8010600:	4770      	bx	lr
 8010602:	4610      	mov	r0, r2
 8010604:	e7e9      	b.n	80105da <__lo0bits+0x2a>
 8010606:	2000      	movs	r0, #0
 8010608:	4770      	bx	lr
 801060a:	2020      	movs	r0, #32
 801060c:	4770      	bx	lr
	...

08010610 <__i2b>:
 8010610:	b510      	push	{r4, lr}
 8010612:	460c      	mov	r4, r1
 8010614:	2101      	movs	r1, #1
 8010616:	f7ff ff01 	bl	801041c <_Balloc>
 801061a:	4602      	mov	r2, r0
 801061c:	b928      	cbnz	r0, 801062a <__i2b+0x1a>
 801061e:	4b05      	ldr	r3, [pc, #20]	; (8010634 <__i2b+0x24>)
 8010620:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010624:	4804      	ldr	r0, [pc, #16]	; (8010638 <__i2b+0x28>)
 8010626:	f000 fce5 	bl	8010ff4 <__assert_func>
 801062a:	2301      	movs	r3, #1
 801062c:	6144      	str	r4, [r0, #20]
 801062e:	6103      	str	r3, [r0, #16]
 8010630:	bd10      	pop	{r4, pc}
 8010632:	bf00      	nop
 8010634:	08011ed3 	.word	0x08011ed3
 8010638:	08011ee4 	.word	0x08011ee4

0801063c <__multiply>:
 801063c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010640:	4691      	mov	r9, r2
 8010642:	690a      	ldr	r2, [r1, #16]
 8010644:	460c      	mov	r4, r1
 8010646:	b085      	sub	sp, #20
 8010648:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801064c:	429a      	cmp	r2, r3
 801064e:	bfbe      	ittt	lt
 8010650:	460b      	movlt	r3, r1
 8010652:	464c      	movlt	r4, r9
 8010654:	4699      	movlt	r9, r3
 8010656:	6927      	ldr	r7, [r4, #16]
 8010658:	68a3      	ldr	r3, [r4, #8]
 801065a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801065e:	6861      	ldr	r1, [r4, #4]
 8010660:	eb07 060a 	add.w	r6, r7, sl
 8010664:	42b3      	cmp	r3, r6
 8010666:	bfb8      	it	lt
 8010668:	3101      	addlt	r1, #1
 801066a:	f7ff fed7 	bl	801041c <_Balloc>
 801066e:	b930      	cbnz	r0, 801067e <__multiply+0x42>
 8010670:	4602      	mov	r2, r0
 8010672:	4b44      	ldr	r3, [pc, #272]	; (8010784 <__multiply+0x148>)
 8010674:	f240 115d 	movw	r1, #349	; 0x15d
 8010678:	4843      	ldr	r0, [pc, #268]	; (8010788 <__multiply+0x14c>)
 801067a:	f000 fcbb 	bl	8010ff4 <__assert_func>
 801067e:	f100 0514 	add.w	r5, r0, #20
 8010682:	2200      	movs	r2, #0
 8010684:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010688:	462b      	mov	r3, r5
 801068a:	4543      	cmp	r3, r8
 801068c:	d321      	bcc.n	80106d2 <__multiply+0x96>
 801068e:	f104 0314 	add.w	r3, r4, #20
 8010692:	f104 0115 	add.w	r1, r4, #21
 8010696:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801069a:	f109 0314 	add.w	r3, r9, #20
 801069e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80106a2:	9202      	str	r2, [sp, #8]
 80106a4:	1b3a      	subs	r2, r7, r4
 80106a6:	3a15      	subs	r2, #21
 80106a8:	f022 0203 	bic.w	r2, r2, #3
 80106ac:	3204      	adds	r2, #4
 80106ae:	428f      	cmp	r7, r1
 80106b0:	bf38      	it	cc
 80106b2:	2204      	movcc	r2, #4
 80106b4:	9201      	str	r2, [sp, #4]
 80106b6:	9a02      	ldr	r2, [sp, #8]
 80106b8:	9303      	str	r3, [sp, #12]
 80106ba:	429a      	cmp	r2, r3
 80106bc:	d80c      	bhi.n	80106d8 <__multiply+0x9c>
 80106be:	2e00      	cmp	r6, #0
 80106c0:	dd03      	ble.n	80106ca <__multiply+0x8e>
 80106c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d05a      	beq.n	8010780 <__multiply+0x144>
 80106ca:	6106      	str	r6, [r0, #16]
 80106cc:	b005      	add	sp, #20
 80106ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106d2:	f843 2b04 	str.w	r2, [r3], #4
 80106d6:	e7d8      	b.n	801068a <__multiply+0x4e>
 80106d8:	f8b3 a000 	ldrh.w	sl, [r3]
 80106dc:	f1ba 0f00 	cmp.w	sl, #0
 80106e0:	d024      	beq.n	801072c <__multiply+0xf0>
 80106e2:	f104 0e14 	add.w	lr, r4, #20
 80106e6:	46a9      	mov	r9, r5
 80106e8:	f04f 0c00 	mov.w	ip, #0
 80106ec:	f85e 2b04 	ldr.w	r2, [lr], #4
 80106f0:	f8d9 1000 	ldr.w	r1, [r9]
 80106f4:	fa1f fb82 	uxth.w	fp, r2
 80106f8:	4577      	cmp	r7, lr
 80106fa:	b289      	uxth	r1, r1
 80106fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8010700:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010704:	f8d9 2000 	ldr.w	r2, [r9]
 8010708:	4461      	add	r1, ip
 801070a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801070e:	fb0a c20b 	mla	r2, sl, fp, ip
 8010712:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010716:	b289      	uxth	r1, r1
 8010718:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801071c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010720:	f849 1b04 	str.w	r1, [r9], #4
 8010724:	d8e2      	bhi.n	80106ec <__multiply+0xb0>
 8010726:	9a01      	ldr	r2, [sp, #4]
 8010728:	f845 c002 	str.w	ip, [r5, r2]
 801072c:	9a03      	ldr	r2, [sp, #12]
 801072e:	3304      	adds	r3, #4
 8010730:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010734:	f1b9 0f00 	cmp.w	r9, #0
 8010738:	d020      	beq.n	801077c <__multiply+0x140>
 801073a:	6829      	ldr	r1, [r5, #0]
 801073c:	f104 0c14 	add.w	ip, r4, #20
 8010740:	46ae      	mov	lr, r5
 8010742:	f04f 0a00 	mov.w	sl, #0
 8010746:	f8bc b000 	ldrh.w	fp, [ip]
 801074a:	b289      	uxth	r1, r1
 801074c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010750:	fb09 220b 	mla	r2, r9, fp, r2
 8010754:	4492      	add	sl, r2
 8010756:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801075a:	f84e 1b04 	str.w	r1, [lr], #4
 801075e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010762:	f8be 1000 	ldrh.w	r1, [lr]
 8010766:	0c12      	lsrs	r2, r2, #16
 8010768:	4567      	cmp	r7, ip
 801076a:	fb09 1102 	mla	r1, r9, r2, r1
 801076e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010772:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010776:	d8e6      	bhi.n	8010746 <__multiply+0x10a>
 8010778:	9a01      	ldr	r2, [sp, #4]
 801077a:	50a9      	str	r1, [r5, r2]
 801077c:	3504      	adds	r5, #4
 801077e:	e79a      	b.n	80106b6 <__multiply+0x7a>
 8010780:	3e01      	subs	r6, #1
 8010782:	e79c      	b.n	80106be <__multiply+0x82>
 8010784:	08011ed3 	.word	0x08011ed3
 8010788:	08011ee4 	.word	0x08011ee4

0801078c <__pow5mult>:
 801078c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010790:	4615      	mov	r5, r2
 8010792:	f012 0203 	ands.w	r2, r2, #3
 8010796:	4606      	mov	r6, r0
 8010798:	460f      	mov	r7, r1
 801079a:	d007      	beq.n	80107ac <__pow5mult+0x20>
 801079c:	3a01      	subs	r2, #1
 801079e:	4c25      	ldr	r4, [pc, #148]	; (8010834 <__pow5mult+0xa8>)
 80107a0:	2300      	movs	r3, #0
 80107a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80107a6:	f7ff fe9b 	bl	80104e0 <__multadd>
 80107aa:	4607      	mov	r7, r0
 80107ac:	10ad      	asrs	r5, r5, #2
 80107ae:	d03d      	beq.n	801082c <__pow5mult+0xa0>
 80107b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80107b2:	b97c      	cbnz	r4, 80107d4 <__pow5mult+0x48>
 80107b4:	2010      	movs	r0, #16
 80107b6:	f7ff fe1b 	bl	80103f0 <malloc>
 80107ba:	4602      	mov	r2, r0
 80107bc:	6270      	str	r0, [r6, #36]	; 0x24
 80107be:	b928      	cbnz	r0, 80107cc <__pow5mult+0x40>
 80107c0:	4b1d      	ldr	r3, [pc, #116]	; (8010838 <__pow5mult+0xac>)
 80107c2:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80107c6:	481d      	ldr	r0, [pc, #116]	; (801083c <__pow5mult+0xb0>)
 80107c8:	f000 fc14 	bl	8010ff4 <__assert_func>
 80107cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80107d0:	6004      	str	r4, [r0, #0]
 80107d2:	60c4      	str	r4, [r0, #12]
 80107d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80107d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80107dc:	b94c      	cbnz	r4, 80107f2 <__pow5mult+0x66>
 80107de:	f240 2171 	movw	r1, #625	; 0x271
 80107e2:	4630      	mov	r0, r6
 80107e4:	f7ff ff14 	bl	8010610 <__i2b>
 80107e8:	2300      	movs	r3, #0
 80107ea:	4604      	mov	r4, r0
 80107ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80107f0:	6003      	str	r3, [r0, #0]
 80107f2:	f04f 0900 	mov.w	r9, #0
 80107f6:	07eb      	lsls	r3, r5, #31
 80107f8:	d50a      	bpl.n	8010810 <__pow5mult+0x84>
 80107fa:	4639      	mov	r1, r7
 80107fc:	4622      	mov	r2, r4
 80107fe:	4630      	mov	r0, r6
 8010800:	f7ff ff1c 	bl	801063c <__multiply>
 8010804:	4680      	mov	r8, r0
 8010806:	4639      	mov	r1, r7
 8010808:	4630      	mov	r0, r6
 801080a:	4647      	mov	r7, r8
 801080c:	f7ff fe46 	bl	801049c <_Bfree>
 8010810:	106d      	asrs	r5, r5, #1
 8010812:	d00b      	beq.n	801082c <__pow5mult+0xa0>
 8010814:	6820      	ldr	r0, [r4, #0]
 8010816:	b938      	cbnz	r0, 8010828 <__pow5mult+0x9c>
 8010818:	4622      	mov	r2, r4
 801081a:	4621      	mov	r1, r4
 801081c:	4630      	mov	r0, r6
 801081e:	f7ff ff0d 	bl	801063c <__multiply>
 8010822:	6020      	str	r0, [r4, #0]
 8010824:	f8c0 9000 	str.w	r9, [r0]
 8010828:	4604      	mov	r4, r0
 801082a:	e7e4      	b.n	80107f6 <__pow5mult+0x6a>
 801082c:	4638      	mov	r0, r7
 801082e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010832:	bf00      	nop
 8010834:	08012030 	.word	0x08012030
 8010838:	08011e61 	.word	0x08011e61
 801083c:	08011ee4 	.word	0x08011ee4

08010840 <__lshift>:
 8010840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010844:	460c      	mov	r4, r1
 8010846:	4607      	mov	r7, r0
 8010848:	4691      	mov	r9, r2
 801084a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801084e:	6923      	ldr	r3, [r4, #16]
 8010850:	6849      	ldr	r1, [r1, #4]
 8010852:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010856:	68a3      	ldr	r3, [r4, #8]
 8010858:	f108 0601 	add.w	r6, r8, #1
 801085c:	42b3      	cmp	r3, r6
 801085e:	db0b      	blt.n	8010878 <__lshift+0x38>
 8010860:	4638      	mov	r0, r7
 8010862:	f7ff fddb 	bl	801041c <_Balloc>
 8010866:	4605      	mov	r5, r0
 8010868:	b948      	cbnz	r0, 801087e <__lshift+0x3e>
 801086a:	4602      	mov	r2, r0
 801086c:	4b2a      	ldr	r3, [pc, #168]	; (8010918 <__lshift+0xd8>)
 801086e:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010872:	482a      	ldr	r0, [pc, #168]	; (801091c <__lshift+0xdc>)
 8010874:	f000 fbbe 	bl	8010ff4 <__assert_func>
 8010878:	3101      	adds	r1, #1
 801087a:	005b      	lsls	r3, r3, #1
 801087c:	e7ee      	b.n	801085c <__lshift+0x1c>
 801087e:	2300      	movs	r3, #0
 8010880:	f100 0114 	add.w	r1, r0, #20
 8010884:	f100 0210 	add.w	r2, r0, #16
 8010888:	4618      	mov	r0, r3
 801088a:	4553      	cmp	r3, sl
 801088c:	db37      	blt.n	80108fe <__lshift+0xbe>
 801088e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010892:	f104 0314 	add.w	r3, r4, #20
 8010896:	6920      	ldr	r0, [r4, #16]
 8010898:	f019 091f 	ands.w	r9, r9, #31
 801089c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80108a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80108a4:	d02f      	beq.n	8010906 <__lshift+0xc6>
 80108a6:	f1c9 0e20 	rsb	lr, r9, #32
 80108aa:	468a      	mov	sl, r1
 80108ac:	f04f 0c00 	mov.w	ip, #0
 80108b0:	681a      	ldr	r2, [r3, #0]
 80108b2:	fa02 f209 	lsl.w	r2, r2, r9
 80108b6:	ea42 020c 	orr.w	r2, r2, ip
 80108ba:	f84a 2b04 	str.w	r2, [sl], #4
 80108be:	f853 2b04 	ldr.w	r2, [r3], #4
 80108c2:	4298      	cmp	r0, r3
 80108c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80108c8:	d8f2      	bhi.n	80108b0 <__lshift+0x70>
 80108ca:	1b03      	subs	r3, r0, r4
 80108cc:	f104 0215 	add.w	r2, r4, #21
 80108d0:	3b15      	subs	r3, #21
 80108d2:	f023 0303 	bic.w	r3, r3, #3
 80108d6:	3304      	adds	r3, #4
 80108d8:	4290      	cmp	r0, r2
 80108da:	bf38      	it	cc
 80108dc:	2304      	movcc	r3, #4
 80108de:	f841 c003 	str.w	ip, [r1, r3]
 80108e2:	f1bc 0f00 	cmp.w	ip, #0
 80108e6:	d001      	beq.n	80108ec <__lshift+0xac>
 80108e8:	f108 0602 	add.w	r6, r8, #2
 80108ec:	3e01      	subs	r6, #1
 80108ee:	4638      	mov	r0, r7
 80108f0:	4621      	mov	r1, r4
 80108f2:	612e      	str	r6, [r5, #16]
 80108f4:	f7ff fdd2 	bl	801049c <_Bfree>
 80108f8:	4628      	mov	r0, r5
 80108fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108fe:	3301      	adds	r3, #1
 8010900:	f842 0f04 	str.w	r0, [r2, #4]!
 8010904:	e7c1      	b.n	801088a <__lshift+0x4a>
 8010906:	3904      	subs	r1, #4
 8010908:	f853 2b04 	ldr.w	r2, [r3], #4
 801090c:	4298      	cmp	r0, r3
 801090e:	f841 2f04 	str.w	r2, [r1, #4]!
 8010912:	d8f9      	bhi.n	8010908 <__lshift+0xc8>
 8010914:	e7ea      	b.n	80108ec <__lshift+0xac>
 8010916:	bf00      	nop
 8010918:	08011ed3 	.word	0x08011ed3
 801091c:	08011ee4 	.word	0x08011ee4

08010920 <__mcmp>:
 8010920:	6902      	ldr	r2, [r0, #16]
 8010922:	b530      	push	{r4, r5, lr}
 8010924:	690c      	ldr	r4, [r1, #16]
 8010926:	1b12      	subs	r2, r2, r4
 8010928:	d10e      	bne.n	8010948 <__mcmp+0x28>
 801092a:	f100 0314 	add.w	r3, r0, #20
 801092e:	3114      	adds	r1, #20
 8010930:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010934:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010938:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801093c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010940:	42a5      	cmp	r5, r4
 8010942:	d003      	beq.n	801094c <__mcmp+0x2c>
 8010944:	d305      	bcc.n	8010952 <__mcmp+0x32>
 8010946:	2201      	movs	r2, #1
 8010948:	4610      	mov	r0, r2
 801094a:	bd30      	pop	{r4, r5, pc}
 801094c:	4283      	cmp	r3, r0
 801094e:	d3f3      	bcc.n	8010938 <__mcmp+0x18>
 8010950:	e7fa      	b.n	8010948 <__mcmp+0x28>
 8010952:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010956:	e7f7      	b.n	8010948 <__mcmp+0x28>

08010958 <__mdiff>:
 8010958:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801095c:	460c      	mov	r4, r1
 801095e:	4606      	mov	r6, r0
 8010960:	4611      	mov	r1, r2
 8010962:	4692      	mov	sl, r2
 8010964:	4620      	mov	r0, r4
 8010966:	f7ff ffdb 	bl	8010920 <__mcmp>
 801096a:	1e05      	subs	r5, r0, #0
 801096c:	d110      	bne.n	8010990 <__mdiff+0x38>
 801096e:	4629      	mov	r1, r5
 8010970:	4630      	mov	r0, r6
 8010972:	f7ff fd53 	bl	801041c <_Balloc>
 8010976:	b930      	cbnz	r0, 8010986 <__mdiff+0x2e>
 8010978:	4b3d      	ldr	r3, [pc, #244]	; (8010a70 <__mdiff+0x118>)
 801097a:	4602      	mov	r2, r0
 801097c:	f240 2132 	movw	r1, #562	; 0x232
 8010980:	483c      	ldr	r0, [pc, #240]	; (8010a74 <__mdiff+0x11c>)
 8010982:	f000 fb37 	bl	8010ff4 <__assert_func>
 8010986:	2301      	movs	r3, #1
 8010988:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801098c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010990:	bfa4      	itt	ge
 8010992:	4653      	movge	r3, sl
 8010994:	46a2      	movge	sl, r4
 8010996:	4630      	mov	r0, r6
 8010998:	bfa8      	it	ge
 801099a:	2500      	movge	r5, #0
 801099c:	f8da 1004 	ldr.w	r1, [sl, #4]
 80109a0:	bfac      	ite	ge
 80109a2:	461c      	movge	r4, r3
 80109a4:	2501      	movlt	r5, #1
 80109a6:	f7ff fd39 	bl	801041c <_Balloc>
 80109aa:	b920      	cbnz	r0, 80109b6 <__mdiff+0x5e>
 80109ac:	4b30      	ldr	r3, [pc, #192]	; (8010a70 <__mdiff+0x118>)
 80109ae:	4602      	mov	r2, r0
 80109b0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80109b4:	e7e4      	b.n	8010980 <__mdiff+0x28>
 80109b6:	f8da 7010 	ldr.w	r7, [sl, #16]
 80109ba:	f104 0914 	add.w	r9, r4, #20
 80109be:	6926      	ldr	r6, [r4, #16]
 80109c0:	f100 0814 	add.w	r8, r0, #20
 80109c4:	60c5      	str	r5, [r0, #12]
 80109c6:	f10a 0514 	add.w	r5, sl, #20
 80109ca:	f10a 0210 	add.w	r2, sl, #16
 80109ce:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80109d2:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80109d6:	46c2      	mov	sl, r8
 80109d8:	f04f 0c00 	mov.w	ip, #0
 80109dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80109e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80109e4:	fa1f f18b 	uxth.w	r1, fp
 80109e8:	454e      	cmp	r6, r9
 80109ea:	448c      	add	ip, r1
 80109ec:	b299      	uxth	r1, r3
 80109ee:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80109f2:	ebac 0101 	sub.w	r1, ip, r1
 80109f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80109fa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80109fe:	b289      	uxth	r1, r1
 8010a00:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8010a04:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010a08:	f84a 3b04 	str.w	r3, [sl], #4
 8010a0c:	d8e6      	bhi.n	80109dc <__mdiff+0x84>
 8010a0e:	1b33      	subs	r3, r6, r4
 8010a10:	3415      	adds	r4, #21
 8010a12:	3b15      	subs	r3, #21
 8010a14:	f023 0303 	bic.w	r3, r3, #3
 8010a18:	3304      	adds	r3, #4
 8010a1a:	42a6      	cmp	r6, r4
 8010a1c:	bf38      	it	cc
 8010a1e:	2304      	movcc	r3, #4
 8010a20:	441d      	add	r5, r3
 8010a22:	4443      	add	r3, r8
 8010a24:	462c      	mov	r4, r5
 8010a26:	461e      	mov	r6, r3
 8010a28:	4574      	cmp	r4, lr
 8010a2a:	d30e      	bcc.n	8010a4a <__mdiff+0xf2>
 8010a2c:	f10e 0203 	add.w	r2, lr, #3
 8010a30:	1b52      	subs	r2, r2, r5
 8010a32:	3d03      	subs	r5, #3
 8010a34:	f022 0203 	bic.w	r2, r2, #3
 8010a38:	45ae      	cmp	lr, r5
 8010a3a:	bf38      	it	cc
 8010a3c:	2200      	movcc	r2, #0
 8010a3e:	441a      	add	r2, r3
 8010a40:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010a44:	b18b      	cbz	r3, 8010a6a <__mdiff+0x112>
 8010a46:	6107      	str	r7, [r0, #16]
 8010a48:	e7a0      	b.n	801098c <__mdiff+0x34>
 8010a4a:	f854 8b04 	ldr.w	r8, [r4], #4
 8010a4e:	fa1f f288 	uxth.w	r2, r8
 8010a52:	4462      	add	r2, ip
 8010a54:	1411      	asrs	r1, r2, #16
 8010a56:	b292      	uxth	r2, r2
 8010a58:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 8010a5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010a60:	ea4f 4c21 	mov.w	ip, r1, asr #16
 8010a64:	f846 2b04 	str.w	r2, [r6], #4
 8010a68:	e7de      	b.n	8010a28 <__mdiff+0xd0>
 8010a6a:	3f01      	subs	r7, #1
 8010a6c:	e7e8      	b.n	8010a40 <__mdiff+0xe8>
 8010a6e:	bf00      	nop
 8010a70:	08011ed3 	.word	0x08011ed3
 8010a74:	08011ee4 	.word	0x08011ee4

08010a78 <__d2b>:
 8010a78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010a7c:	4689      	mov	r9, r1
 8010a7e:	2101      	movs	r1, #1
 8010a80:	4690      	mov	r8, r2
 8010a82:	ec57 6b10 	vmov	r6, r7, d0
 8010a86:	f7ff fcc9 	bl	801041c <_Balloc>
 8010a8a:	4604      	mov	r4, r0
 8010a8c:	b930      	cbnz	r0, 8010a9c <__d2b+0x24>
 8010a8e:	4602      	mov	r2, r0
 8010a90:	4b25      	ldr	r3, [pc, #148]	; (8010b28 <__d2b+0xb0>)
 8010a92:	f240 310a 	movw	r1, #778	; 0x30a
 8010a96:	4825      	ldr	r0, [pc, #148]	; (8010b2c <__d2b+0xb4>)
 8010a98:	f000 faac 	bl	8010ff4 <__assert_func>
 8010a9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010aa0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010aa4:	bb35      	cbnz	r5, 8010af4 <__d2b+0x7c>
 8010aa6:	2e00      	cmp	r6, #0
 8010aa8:	9301      	str	r3, [sp, #4]
 8010aaa:	d028      	beq.n	8010afe <__d2b+0x86>
 8010aac:	4668      	mov	r0, sp
 8010aae:	9600      	str	r6, [sp, #0]
 8010ab0:	f7ff fd7e 	bl	80105b0 <__lo0bits>
 8010ab4:	9900      	ldr	r1, [sp, #0]
 8010ab6:	b300      	cbz	r0, 8010afa <__d2b+0x82>
 8010ab8:	9a01      	ldr	r2, [sp, #4]
 8010aba:	f1c0 0320 	rsb	r3, r0, #32
 8010abe:	fa02 f303 	lsl.w	r3, r2, r3
 8010ac2:	40c2      	lsrs	r2, r0
 8010ac4:	430b      	orrs	r3, r1
 8010ac6:	9201      	str	r2, [sp, #4]
 8010ac8:	6163      	str	r3, [r4, #20]
 8010aca:	9b01      	ldr	r3, [sp, #4]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	61a3      	str	r3, [r4, #24]
 8010ad0:	bf14      	ite	ne
 8010ad2:	2202      	movne	r2, #2
 8010ad4:	2201      	moveq	r2, #1
 8010ad6:	6122      	str	r2, [r4, #16]
 8010ad8:	b1d5      	cbz	r5, 8010b10 <__d2b+0x98>
 8010ada:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010ade:	4405      	add	r5, r0
 8010ae0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010ae4:	f8c9 5000 	str.w	r5, [r9]
 8010ae8:	f8c8 0000 	str.w	r0, [r8]
 8010aec:	4620      	mov	r0, r4
 8010aee:	b003      	add	sp, #12
 8010af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010af4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010af8:	e7d5      	b.n	8010aa6 <__d2b+0x2e>
 8010afa:	6161      	str	r1, [r4, #20]
 8010afc:	e7e5      	b.n	8010aca <__d2b+0x52>
 8010afe:	a801      	add	r0, sp, #4
 8010b00:	f7ff fd56 	bl	80105b0 <__lo0bits>
 8010b04:	9b01      	ldr	r3, [sp, #4]
 8010b06:	2201      	movs	r2, #1
 8010b08:	3020      	adds	r0, #32
 8010b0a:	6163      	str	r3, [r4, #20]
 8010b0c:	6122      	str	r2, [r4, #16]
 8010b0e:	e7e3      	b.n	8010ad8 <__d2b+0x60>
 8010b10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010b14:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010b18:	f8c9 0000 	str.w	r0, [r9]
 8010b1c:	6918      	ldr	r0, [r3, #16]
 8010b1e:	f7ff fd27 	bl	8010570 <__hi0bits>
 8010b22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010b26:	e7df      	b.n	8010ae8 <__d2b+0x70>
 8010b28:	08011ed3 	.word	0x08011ed3
 8010b2c:	08011ee4 	.word	0x08011ee4

08010b30 <_calloc_r>:
 8010b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b32:	fba1 2402 	umull	r2, r4, r1, r2
 8010b36:	b94c      	cbnz	r4, 8010b4c <_calloc_r+0x1c>
 8010b38:	4611      	mov	r1, r2
 8010b3a:	9201      	str	r2, [sp, #4]
 8010b3c:	f000 f87a 	bl	8010c34 <_malloc_r>
 8010b40:	9a01      	ldr	r2, [sp, #4]
 8010b42:	4605      	mov	r5, r0
 8010b44:	b930      	cbnz	r0, 8010b54 <_calloc_r+0x24>
 8010b46:	4628      	mov	r0, r5
 8010b48:	b003      	add	sp, #12
 8010b4a:	bd30      	pop	{r4, r5, pc}
 8010b4c:	220c      	movs	r2, #12
 8010b4e:	2500      	movs	r5, #0
 8010b50:	6002      	str	r2, [r0, #0]
 8010b52:	e7f8      	b.n	8010b46 <_calloc_r+0x16>
 8010b54:	4621      	mov	r1, r4
 8010b56:	f7fe f932 	bl	800edbe <memset>
 8010b5a:	e7f4      	b.n	8010b46 <_calloc_r+0x16>

08010b5c <_free_r>:
 8010b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b5e:	2900      	cmp	r1, #0
 8010b60:	d043      	beq.n	8010bea <_free_r+0x8e>
 8010b62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b66:	1f0c      	subs	r4, r1, #4
 8010b68:	9001      	str	r0, [sp, #4]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	bfb8      	it	lt
 8010b6e:	18e4      	addlt	r4, r4, r3
 8010b70:	f000 fa9c 	bl	80110ac <__malloc_lock>
 8010b74:	4a1e      	ldr	r2, [pc, #120]	; (8010bf0 <_free_r+0x94>)
 8010b76:	9801      	ldr	r0, [sp, #4]
 8010b78:	6813      	ldr	r3, [r2, #0]
 8010b7a:	b933      	cbnz	r3, 8010b8a <_free_r+0x2e>
 8010b7c:	6063      	str	r3, [r4, #4]
 8010b7e:	6014      	str	r4, [r2, #0]
 8010b80:	b003      	add	sp, #12
 8010b82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b86:	f000 ba97 	b.w	80110b8 <__malloc_unlock>
 8010b8a:	42a3      	cmp	r3, r4
 8010b8c:	d908      	bls.n	8010ba0 <_free_r+0x44>
 8010b8e:	6825      	ldr	r5, [r4, #0]
 8010b90:	1961      	adds	r1, r4, r5
 8010b92:	428b      	cmp	r3, r1
 8010b94:	bf01      	itttt	eq
 8010b96:	6819      	ldreq	r1, [r3, #0]
 8010b98:	685b      	ldreq	r3, [r3, #4]
 8010b9a:	1949      	addeq	r1, r1, r5
 8010b9c:	6021      	streq	r1, [r4, #0]
 8010b9e:	e7ed      	b.n	8010b7c <_free_r+0x20>
 8010ba0:	461a      	mov	r2, r3
 8010ba2:	685b      	ldr	r3, [r3, #4]
 8010ba4:	b10b      	cbz	r3, 8010baa <_free_r+0x4e>
 8010ba6:	42a3      	cmp	r3, r4
 8010ba8:	d9fa      	bls.n	8010ba0 <_free_r+0x44>
 8010baa:	6811      	ldr	r1, [r2, #0]
 8010bac:	1855      	adds	r5, r2, r1
 8010bae:	42a5      	cmp	r5, r4
 8010bb0:	d10b      	bne.n	8010bca <_free_r+0x6e>
 8010bb2:	6824      	ldr	r4, [r4, #0]
 8010bb4:	4421      	add	r1, r4
 8010bb6:	1854      	adds	r4, r2, r1
 8010bb8:	6011      	str	r1, [r2, #0]
 8010bba:	42a3      	cmp	r3, r4
 8010bbc:	d1e0      	bne.n	8010b80 <_free_r+0x24>
 8010bbe:	681c      	ldr	r4, [r3, #0]
 8010bc0:	685b      	ldr	r3, [r3, #4]
 8010bc2:	4421      	add	r1, r4
 8010bc4:	6053      	str	r3, [r2, #4]
 8010bc6:	6011      	str	r1, [r2, #0]
 8010bc8:	e7da      	b.n	8010b80 <_free_r+0x24>
 8010bca:	d902      	bls.n	8010bd2 <_free_r+0x76>
 8010bcc:	230c      	movs	r3, #12
 8010bce:	6003      	str	r3, [r0, #0]
 8010bd0:	e7d6      	b.n	8010b80 <_free_r+0x24>
 8010bd2:	6825      	ldr	r5, [r4, #0]
 8010bd4:	1961      	adds	r1, r4, r5
 8010bd6:	428b      	cmp	r3, r1
 8010bd8:	bf02      	ittt	eq
 8010bda:	6819      	ldreq	r1, [r3, #0]
 8010bdc:	685b      	ldreq	r3, [r3, #4]
 8010bde:	1949      	addeq	r1, r1, r5
 8010be0:	6063      	str	r3, [r4, #4]
 8010be2:	bf08      	it	eq
 8010be4:	6021      	streq	r1, [r4, #0]
 8010be6:	6054      	str	r4, [r2, #4]
 8010be8:	e7ca      	b.n	8010b80 <_free_r+0x24>
 8010bea:	b003      	add	sp, #12
 8010bec:	bd30      	pop	{r4, r5, pc}
 8010bee:	bf00      	nop
 8010bf0:	2000066c 	.word	0x2000066c

08010bf4 <sbrk_aligned>:
 8010bf4:	b570      	push	{r4, r5, r6, lr}
 8010bf6:	4e0e      	ldr	r6, [pc, #56]	; (8010c30 <sbrk_aligned+0x3c>)
 8010bf8:	460c      	mov	r4, r1
 8010bfa:	4605      	mov	r5, r0
 8010bfc:	6831      	ldr	r1, [r6, #0]
 8010bfe:	b911      	cbnz	r1, 8010c06 <sbrk_aligned+0x12>
 8010c00:	f000 f9e8 	bl	8010fd4 <_sbrk_r>
 8010c04:	6030      	str	r0, [r6, #0]
 8010c06:	4621      	mov	r1, r4
 8010c08:	4628      	mov	r0, r5
 8010c0a:	f000 f9e3 	bl	8010fd4 <_sbrk_r>
 8010c0e:	1c43      	adds	r3, r0, #1
 8010c10:	d00a      	beq.n	8010c28 <sbrk_aligned+0x34>
 8010c12:	1cc4      	adds	r4, r0, #3
 8010c14:	f024 0403 	bic.w	r4, r4, #3
 8010c18:	42a0      	cmp	r0, r4
 8010c1a:	d007      	beq.n	8010c2c <sbrk_aligned+0x38>
 8010c1c:	1a21      	subs	r1, r4, r0
 8010c1e:	4628      	mov	r0, r5
 8010c20:	f000 f9d8 	bl	8010fd4 <_sbrk_r>
 8010c24:	3001      	adds	r0, #1
 8010c26:	d101      	bne.n	8010c2c <sbrk_aligned+0x38>
 8010c28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010c2c:	4620      	mov	r0, r4
 8010c2e:	bd70      	pop	{r4, r5, r6, pc}
 8010c30:	20000670 	.word	0x20000670

08010c34 <_malloc_r>:
 8010c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c38:	1ccd      	adds	r5, r1, #3
 8010c3a:	4607      	mov	r7, r0
 8010c3c:	f025 0503 	bic.w	r5, r5, #3
 8010c40:	3508      	adds	r5, #8
 8010c42:	2d0c      	cmp	r5, #12
 8010c44:	bf38      	it	cc
 8010c46:	250c      	movcc	r5, #12
 8010c48:	2d00      	cmp	r5, #0
 8010c4a:	db01      	blt.n	8010c50 <_malloc_r+0x1c>
 8010c4c:	42a9      	cmp	r1, r5
 8010c4e:	d905      	bls.n	8010c5c <_malloc_r+0x28>
 8010c50:	230c      	movs	r3, #12
 8010c52:	2600      	movs	r6, #0
 8010c54:	603b      	str	r3, [r7, #0]
 8010c56:	4630      	mov	r0, r6
 8010c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c5c:	4e2e      	ldr	r6, [pc, #184]	; (8010d18 <_malloc_r+0xe4>)
 8010c5e:	f000 fa25 	bl	80110ac <__malloc_lock>
 8010c62:	6833      	ldr	r3, [r6, #0]
 8010c64:	461c      	mov	r4, r3
 8010c66:	bb34      	cbnz	r4, 8010cb6 <_malloc_r+0x82>
 8010c68:	4629      	mov	r1, r5
 8010c6a:	4638      	mov	r0, r7
 8010c6c:	f7ff ffc2 	bl	8010bf4 <sbrk_aligned>
 8010c70:	1c43      	adds	r3, r0, #1
 8010c72:	4604      	mov	r4, r0
 8010c74:	d14d      	bne.n	8010d12 <_malloc_r+0xde>
 8010c76:	6834      	ldr	r4, [r6, #0]
 8010c78:	4626      	mov	r6, r4
 8010c7a:	2e00      	cmp	r6, #0
 8010c7c:	d140      	bne.n	8010d00 <_malloc_r+0xcc>
 8010c7e:	6823      	ldr	r3, [r4, #0]
 8010c80:	4631      	mov	r1, r6
 8010c82:	4638      	mov	r0, r7
 8010c84:	eb04 0803 	add.w	r8, r4, r3
 8010c88:	f000 f9a4 	bl	8010fd4 <_sbrk_r>
 8010c8c:	4580      	cmp	r8, r0
 8010c8e:	d13a      	bne.n	8010d06 <_malloc_r+0xd2>
 8010c90:	6821      	ldr	r1, [r4, #0]
 8010c92:	3503      	adds	r5, #3
 8010c94:	4638      	mov	r0, r7
 8010c96:	1a6d      	subs	r5, r5, r1
 8010c98:	f025 0503 	bic.w	r5, r5, #3
 8010c9c:	3508      	adds	r5, #8
 8010c9e:	2d0c      	cmp	r5, #12
 8010ca0:	bf38      	it	cc
 8010ca2:	250c      	movcc	r5, #12
 8010ca4:	4629      	mov	r1, r5
 8010ca6:	f7ff ffa5 	bl	8010bf4 <sbrk_aligned>
 8010caa:	3001      	adds	r0, #1
 8010cac:	d02b      	beq.n	8010d06 <_malloc_r+0xd2>
 8010cae:	6823      	ldr	r3, [r4, #0]
 8010cb0:	442b      	add	r3, r5
 8010cb2:	6023      	str	r3, [r4, #0]
 8010cb4:	e00e      	b.n	8010cd4 <_malloc_r+0xa0>
 8010cb6:	6822      	ldr	r2, [r4, #0]
 8010cb8:	1b52      	subs	r2, r2, r5
 8010cba:	d41e      	bmi.n	8010cfa <_malloc_r+0xc6>
 8010cbc:	2a0b      	cmp	r2, #11
 8010cbe:	d916      	bls.n	8010cee <_malloc_r+0xba>
 8010cc0:	1961      	adds	r1, r4, r5
 8010cc2:	42a3      	cmp	r3, r4
 8010cc4:	6025      	str	r5, [r4, #0]
 8010cc6:	bf18      	it	ne
 8010cc8:	6059      	strne	r1, [r3, #4]
 8010cca:	6863      	ldr	r3, [r4, #4]
 8010ccc:	bf08      	it	eq
 8010cce:	6031      	streq	r1, [r6, #0]
 8010cd0:	5162      	str	r2, [r4, r5]
 8010cd2:	604b      	str	r3, [r1, #4]
 8010cd4:	f104 060b 	add.w	r6, r4, #11
 8010cd8:	4638      	mov	r0, r7
 8010cda:	f000 f9ed 	bl	80110b8 <__malloc_unlock>
 8010cde:	1d23      	adds	r3, r4, #4
 8010ce0:	f026 0607 	bic.w	r6, r6, #7
 8010ce4:	1af2      	subs	r2, r6, r3
 8010ce6:	d0b6      	beq.n	8010c56 <_malloc_r+0x22>
 8010ce8:	1b9b      	subs	r3, r3, r6
 8010cea:	50a3      	str	r3, [r4, r2]
 8010cec:	e7b3      	b.n	8010c56 <_malloc_r+0x22>
 8010cee:	6862      	ldr	r2, [r4, #4]
 8010cf0:	42a3      	cmp	r3, r4
 8010cf2:	bf0c      	ite	eq
 8010cf4:	6032      	streq	r2, [r6, #0]
 8010cf6:	605a      	strne	r2, [r3, #4]
 8010cf8:	e7ec      	b.n	8010cd4 <_malloc_r+0xa0>
 8010cfa:	4623      	mov	r3, r4
 8010cfc:	6864      	ldr	r4, [r4, #4]
 8010cfe:	e7b2      	b.n	8010c66 <_malloc_r+0x32>
 8010d00:	4634      	mov	r4, r6
 8010d02:	6876      	ldr	r6, [r6, #4]
 8010d04:	e7b9      	b.n	8010c7a <_malloc_r+0x46>
 8010d06:	230c      	movs	r3, #12
 8010d08:	4638      	mov	r0, r7
 8010d0a:	603b      	str	r3, [r7, #0]
 8010d0c:	f000 f9d4 	bl	80110b8 <__malloc_unlock>
 8010d10:	e7a1      	b.n	8010c56 <_malloc_r+0x22>
 8010d12:	6025      	str	r5, [r4, #0]
 8010d14:	e7de      	b.n	8010cd4 <_malloc_r+0xa0>
 8010d16:	bf00      	nop
 8010d18:	2000066c 	.word	0x2000066c

08010d1c <__ssputs_r>:
 8010d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d20:	688e      	ldr	r6, [r1, #8]
 8010d22:	4682      	mov	sl, r0
 8010d24:	460c      	mov	r4, r1
 8010d26:	4690      	mov	r8, r2
 8010d28:	429e      	cmp	r6, r3
 8010d2a:	461f      	mov	r7, r3
 8010d2c:	d838      	bhi.n	8010da0 <__ssputs_r+0x84>
 8010d2e:	898a      	ldrh	r2, [r1, #12]
 8010d30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010d34:	d032      	beq.n	8010d9c <__ssputs_r+0x80>
 8010d36:	6825      	ldr	r5, [r4, #0]
 8010d38:	3301      	adds	r3, #1
 8010d3a:	6909      	ldr	r1, [r1, #16]
 8010d3c:	eba5 0901 	sub.w	r9, r5, r1
 8010d40:	6965      	ldr	r5, [r4, #20]
 8010d42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010d46:	444b      	add	r3, r9
 8010d48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010d4c:	106d      	asrs	r5, r5, #1
 8010d4e:	429d      	cmp	r5, r3
 8010d50:	bf38      	it	cc
 8010d52:	461d      	movcc	r5, r3
 8010d54:	0553      	lsls	r3, r2, #21
 8010d56:	d531      	bpl.n	8010dbc <__ssputs_r+0xa0>
 8010d58:	4629      	mov	r1, r5
 8010d5a:	f7ff ff6b 	bl	8010c34 <_malloc_r>
 8010d5e:	4606      	mov	r6, r0
 8010d60:	b950      	cbnz	r0, 8010d78 <__ssputs_r+0x5c>
 8010d62:	230c      	movs	r3, #12
 8010d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d68:	f8ca 3000 	str.w	r3, [sl]
 8010d6c:	89a3      	ldrh	r3, [r4, #12]
 8010d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d72:	81a3      	strh	r3, [r4, #12]
 8010d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d78:	464a      	mov	r2, r9
 8010d7a:	6921      	ldr	r1, [r4, #16]
 8010d7c:	f7fe f812 	bl	800eda4 <memcpy>
 8010d80:	89a3      	ldrh	r3, [r4, #12]
 8010d82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d8a:	81a3      	strh	r3, [r4, #12]
 8010d8c:	6126      	str	r6, [r4, #16]
 8010d8e:	444e      	add	r6, r9
 8010d90:	6165      	str	r5, [r4, #20]
 8010d92:	eba5 0509 	sub.w	r5, r5, r9
 8010d96:	6026      	str	r6, [r4, #0]
 8010d98:	463e      	mov	r6, r7
 8010d9a:	60a5      	str	r5, [r4, #8]
 8010d9c:	42be      	cmp	r6, r7
 8010d9e:	d900      	bls.n	8010da2 <__ssputs_r+0x86>
 8010da0:	463e      	mov	r6, r7
 8010da2:	4632      	mov	r2, r6
 8010da4:	4641      	mov	r1, r8
 8010da6:	6820      	ldr	r0, [r4, #0]
 8010da8:	f000 f966 	bl	8011078 <memmove>
 8010dac:	68a3      	ldr	r3, [r4, #8]
 8010dae:	2000      	movs	r0, #0
 8010db0:	1b9b      	subs	r3, r3, r6
 8010db2:	60a3      	str	r3, [r4, #8]
 8010db4:	6823      	ldr	r3, [r4, #0]
 8010db6:	4433      	add	r3, r6
 8010db8:	6023      	str	r3, [r4, #0]
 8010dba:	e7db      	b.n	8010d74 <__ssputs_r+0x58>
 8010dbc:	462a      	mov	r2, r5
 8010dbe:	f000 f981 	bl	80110c4 <_realloc_r>
 8010dc2:	4606      	mov	r6, r0
 8010dc4:	2800      	cmp	r0, #0
 8010dc6:	d1e1      	bne.n	8010d8c <__ssputs_r+0x70>
 8010dc8:	6921      	ldr	r1, [r4, #16]
 8010dca:	4650      	mov	r0, sl
 8010dcc:	f7ff fec6 	bl	8010b5c <_free_r>
 8010dd0:	e7c7      	b.n	8010d62 <__ssputs_r+0x46>
	...

08010dd4 <_svfiprintf_r>:
 8010dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dd8:	4698      	mov	r8, r3
 8010dda:	898b      	ldrh	r3, [r1, #12]
 8010ddc:	b09d      	sub	sp, #116	; 0x74
 8010dde:	4607      	mov	r7, r0
 8010de0:	061b      	lsls	r3, r3, #24
 8010de2:	460d      	mov	r5, r1
 8010de4:	4614      	mov	r4, r2
 8010de6:	d50e      	bpl.n	8010e06 <_svfiprintf_r+0x32>
 8010de8:	690b      	ldr	r3, [r1, #16]
 8010dea:	b963      	cbnz	r3, 8010e06 <_svfiprintf_r+0x32>
 8010dec:	2140      	movs	r1, #64	; 0x40
 8010dee:	f7ff ff21 	bl	8010c34 <_malloc_r>
 8010df2:	6028      	str	r0, [r5, #0]
 8010df4:	6128      	str	r0, [r5, #16]
 8010df6:	b920      	cbnz	r0, 8010e02 <_svfiprintf_r+0x2e>
 8010df8:	230c      	movs	r3, #12
 8010dfa:	603b      	str	r3, [r7, #0]
 8010dfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010e00:	e0d1      	b.n	8010fa6 <_svfiprintf_r+0x1d2>
 8010e02:	2340      	movs	r3, #64	; 0x40
 8010e04:	616b      	str	r3, [r5, #20]
 8010e06:	2300      	movs	r3, #0
 8010e08:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e0c:	f04f 0901 	mov.w	r9, #1
 8010e10:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8010fc0 <_svfiprintf_r+0x1ec>
 8010e14:	9309      	str	r3, [sp, #36]	; 0x24
 8010e16:	2320      	movs	r3, #32
 8010e18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e1c:	2330      	movs	r3, #48	; 0x30
 8010e1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e22:	4623      	mov	r3, r4
 8010e24:	469a      	mov	sl, r3
 8010e26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e2a:	b10a      	cbz	r2, 8010e30 <_svfiprintf_r+0x5c>
 8010e2c:	2a25      	cmp	r2, #37	; 0x25
 8010e2e:	d1f9      	bne.n	8010e24 <_svfiprintf_r+0x50>
 8010e30:	ebba 0b04 	subs.w	fp, sl, r4
 8010e34:	d00b      	beq.n	8010e4e <_svfiprintf_r+0x7a>
 8010e36:	465b      	mov	r3, fp
 8010e38:	4622      	mov	r2, r4
 8010e3a:	4629      	mov	r1, r5
 8010e3c:	4638      	mov	r0, r7
 8010e3e:	f7ff ff6d 	bl	8010d1c <__ssputs_r>
 8010e42:	3001      	adds	r0, #1
 8010e44:	f000 80aa 	beq.w	8010f9c <_svfiprintf_r+0x1c8>
 8010e48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e4a:	445a      	add	r2, fp
 8010e4c:	9209      	str	r2, [sp, #36]	; 0x24
 8010e4e:	f89a 3000 	ldrb.w	r3, [sl]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	f000 80a2 	beq.w	8010f9c <_svfiprintf_r+0x1c8>
 8010e58:	2300      	movs	r3, #0
 8010e5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010e5e:	f10a 0a01 	add.w	sl, sl, #1
 8010e62:	9304      	str	r3, [sp, #16]
 8010e64:	9307      	str	r3, [sp, #28]
 8010e66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010e6a:	931a      	str	r3, [sp, #104]	; 0x68
 8010e6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e70:	4654      	mov	r4, sl
 8010e72:	2205      	movs	r2, #5
 8010e74:	4852      	ldr	r0, [pc, #328]	; (8010fc0 <_svfiprintf_r+0x1ec>)
 8010e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e7a:	f7ff fac1 	bl	8010400 <memchr>
 8010e7e:	9a04      	ldr	r2, [sp, #16]
 8010e80:	b9d8      	cbnz	r0, 8010eba <_svfiprintf_r+0xe6>
 8010e82:	06d0      	lsls	r0, r2, #27
 8010e84:	bf44      	itt	mi
 8010e86:	2320      	movmi	r3, #32
 8010e88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e8c:	0711      	lsls	r1, r2, #28
 8010e8e:	bf44      	itt	mi
 8010e90:	232b      	movmi	r3, #43	; 0x2b
 8010e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e96:	f89a 3000 	ldrb.w	r3, [sl]
 8010e9a:	2b2a      	cmp	r3, #42	; 0x2a
 8010e9c:	d015      	beq.n	8010eca <_svfiprintf_r+0xf6>
 8010e9e:	9a07      	ldr	r2, [sp, #28]
 8010ea0:	4654      	mov	r4, sl
 8010ea2:	2000      	movs	r0, #0
 8010ea4:	f04f 0c0a 	mov.w	ip, #10
 8010ea8:	4621      	mov	r1, r4
 8010eaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010eae:	3b30      	subs	r3, #48	; 0x30
 8010eb0:	2b09      	cmp	r3, #9
 8010eb2:	d94e      	bls.n	8010f52 <_svfiprintf_r+0x17e>
 8010eb4:	b1b0      	cbz	r0, 8010ee4 <_svfiprintf_r+0x110>
 8010eb6:	9207      	str	r2, [sp, #28]
 8010eb8:	e014      	b.n	8010ee4 <_svfiprintf_r+0x110>
 8010eba:	eba0 0308 	sub.w	r3, r0, r8
 8010ebe:	46a2      	mov	sl, r4
 8010ec0:	fa09 f303 	lsl.w	r3, r9, r3
 8010ec4:	4313      	orrs	r3, r2
 8010ec6:	9304      	str	r3, [sp, #16]
 8010ec8:	e7d2      	b.n	8010e70 <_svfiprintf_r+0x9c>
 8010eca:	9b03      	ldr	r3, [sp, #12]
 8010ecc:	1d19      	adds	r1, r3, #4
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	9103      	str	r1, [sp, #12]
 8010ed4:	bfbb      	ittet	lt
 8010ed6:	425b      	neglt	r3, r3
 8010ed8:	f042 0202 	orrlt.w	r2, r2, #2
 8010edc:	9307      	strge	r3, [sp, #28]
 8010ede:	9307      	strlt	r3, [sp, #28]
 8010ee0:	bfb8      	it	lt
 8010ee2:	9204      	strlt	r2, [sp, #16]
 8010ee4:	7823      	ldrb	r3, [r4, #0]
 8010ee6:	2b2e      	cmp	r3, #46	; 0x2e
 8010ee8:	d10c      	bne.n	8010f04 <_svfiprintf_r+0x130>
 8010eea:	7863      	ldrb	r3, [r4, #1]
 8010eec:	2b2a      	cmp	r3, #42	; 0x2a
 8010eee:	d135      	bne.n	8010f5c <_svfiprintf_r+0x188>
 8010ef0:	9b03      	ldr	r3, [sp, #12]
 8010ef2:	3402      	adds	r4, #2
 8010ef4:	1d1a      	adds	r2, r3, #4
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	9203      	str	r2, [sp, #12]
 8010efc:	bfb8      	it	lt
 8010efe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010f02:	9305      	str	r3, [sp, #20]
 8010f04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010fd0 <_svfiprintf_r+0x1fc>
 8010f08:	2203      	movs	r2, #3
 8010f0a:	7821      	ldrb	r1, [r4, #0]
 8010f0c:	4650      	mov	r0, sl
 8010f0e:	f7ff fa77 	bl	8010400 <memchr>
 8010f12:	b140      	cbz	r0, 8010f26 <_svfiprintf_r+0x152>
 8010f14:	2340      	movs	r3, #64	; 0x40
 8010f16:	eba0 000a 	sub.w	r0, r0, sl
 8010f1a:	3401      	adds	r4, #1
 8010f1c:	fa03 f000 	lsl.w	r0, r3, r0
 8010f20:	9b04      	ldr	r3, [sp, #16]
 8010f22:	4303      	orrs	r3, r0
 8010f24:	9304      	str	r3, [sp, #16]
 8010f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f2a:	2206      	movs	r2, #6
 8010f2c:	4825      	ldr	r0, [pc, #148]	; (8010fc4 <_svfiprintf_r+0x1f0>)
 8010f2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010f32:	f7ff fa65 	bl	8010400 <memchr>
 8010f36:	2800      	cmp	r0, #0
 8010f38:	d038      	beq.n	8010fac <_svfiprintf_r+0x1d8>
 8010f3a:	4b23      	ldr	r3, [pc, #140]	; (8010fc8 <_svfiprintf_r+0x1f4>)
 8010f3c:	bb1b      	cbnz	r3, 8010f86 <_svfiprintf_r+0x1b2>
 8010f3e:	9b03      	ldr	r3, [sp, #12]
 8010f40:	3307      	adds	r3, #7
 8010f42:	f023 0307 	bic.w	r3, r3, #7
 8010f46:	3308      	adds	r3, #8
 8010f48:	9303      	str	r3, [sp, #12]
 8010f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f4c:	4433      	add	r3, r6
 8010f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8010f50:	e767      	b.n	8010e22 <_svfiprintf_r+0x4e>
 8010f52:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f56:	460c      	mov	r4, r1
 8010f58:	2001      	movs	r0, #1
 8010f5a:	e7a5      	b.n	8010ea8 <_svfiprintf_r+0xd4>
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	3401      	adds	r4, #1
 8010f60:	f04f 0c0a 	mov.w	ip, #10
 8010f64:	4619      	mov	r1, r3
 8010f66:	9305      	str	r3, [sp, #20]
 8010f68:	4620      	mov	r0, r4
 8010f6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f6e:	3a30      	subs	r2, #48	; 0x30
 8010f70:	2a09      	cmp	r2, #9
 8010f72:	d903      	bls.n	8010f7c <_svfiprintf_r+0x1a8>
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d0c5      	beq.n	8010f04 <_svfiprintf_r+0x130>
 8010f78:	9105      	str	r1, [sp, #20]
 8010f7a:	e7c3      	b.n	8010f04 <_svfiprintf_r+0x130>
 8010f7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f80:	4604      	mov	r4, r0
 8010f82:	2301      	movs	r3, #1
 8010f84:	e7f0      	b.n	8010f68 <_svfiprintf_r+0x194>
 8010f86:	ab03      	add	r3, sp, #12
 8010f88:	462a      	mov	r2, r5
 8010f8a:	a904      	add	r1, sp, #16
 8010f8c:	4638      	mov	r0, r7
 8010f8e:	9300      	str	r3, [sp, #0]
 8010f90:	4b0e      	ldr	r3, [pc, #56]	; (8010fcc <_svfiprintf_r+0x1f8>)
 8010f92:	f7fd ffbd 	bl	800ef10 <_printf_float>
 8010f96:	1c42      	adds	r2, r0, #1
 8010f98:	4606      	mov	r6, r0
 8010f9a:	d1d6      	bne.n	8010f4a <_svfiprintf_r+0x176>
 8010f9c:	89ab      	ldrh	r3, [r5, #12]
 8010f9e:	065b      	lsls	r3, r3, #25
 8010fa0:	f53f af2c 	bmi.w	8010dfc <_svfiprintf_r+0x28>
 8010fa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010fa6:	b01d      	add	sp, #116	; 0x74
 8010fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fac:	ab03      	add	r3, sp, #12
 8010fae:	462a      	mov	r2, r5
 8010fb0:	a904      	add	r1, sp, #16
 8010fb2:	4638      	mov	r0, r7
 8010fb4:	9300      	str	r3, [sp, #0]
 8010fb6:	4b05      	ldr	r3, [pc, #20]	; (8010fcc <_svfiprintf_r+0x1f8>)
 8010fb8:	f7fe fa50 	bl	800f45c <_printf_i>
 8010fbc:	e7eb      	b.n	8010f96 <_svfiprintf_r+0x1c2>
 8010fbe:	bf00      	nop
 8010fc0:	0801203c 	.word	0x0801203c
 8010fc4:	08012046 	.word	0x08012046
 8010fc8:	0800ef11 	.word	0x0800ef11
 8010fcc:	08010d1d 	.word	0x08010d1d
 8010fd0:	08012042 	.word	0x08012042

08010fd4 <_sbrk_r>:
 8010fd4:	b538      	push	{r3, r4, r5, lr}
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	4d05      	ldr	r5, [pc, #20]	; (8010ff0 <_sbrk_r+0x1c>)
 8010fda:	4604      	mov	r4, r0
 8010fdc:	4608      	mov	r0, r1
 8010fde:	602b      	str	r3, [r5, #0]
 8010fe0:	f7f4 f8a2 	bl	8005128 <_sbrk>
 8010fe4:	1c43      	adds	r3, r0, #1
 8010fe6:	d102      	bne.n	8010fee <_sbrk_r+0x1a>
 8010fe8:	682b      	ldr	r3, [r5, #0]
 8010fea:	b103      	cbz	r3, 8010fee <_sbrk_r+0x1a>
 8010fec:	6023      	str	r3, [r4, #0]
 8010fee:	bd38      	pop	{r3, r4, r5, pc}
 8010ff0:	20000674 	.word	0x20000674

08010ff4 <__assert_func>:
 8010ff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010ff6:	4614      	mov	r4, r2
 8010ff8:	461a      	mov	r2, r3
 8010ffa:	4b09      	ldr	r3, [pc, #36]	; (8011020 <__assert_func+0x2c>)
 8010ffc:	4605      	mov	r5, r0
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	68d8      	ldr	r0, [r3, #12]
 8011002:	b14c      	cbz	r4, 8011018 <__assert_func+0x24>
 8011004:	4b07      	ldr	r3, [pc, #28]	; (8011024 <__assert_func+0x30>)
 8011006:	9100      	str	r1, [sp, #0]
 8011008:	4907      	ldr	r1, [pc, #28]	; (8011028 <__assert_func+0x34>)
 801100a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801100e:	462b      	mov	r3, r5
 8011010:	f000 f80e 	bl	8011030 <fiprintf>
 8011014:	f000 faac 	bl	8011570 <abort>
 8011018:	4b04      	ldr	r3, [pc, #16]	; (801102c <__assert_func+0x38>)
 801101a:	461c      	mov	r4, r3
 801101c:	e7f3      	b.n	8011006 <__assert_func+0x12>
 801101e:	bf00      	nop
 8011020:	20000030 	.word	0x20000030
 8011024:	0801204d 	.word	0x0801204d
 8011028:	0801205a 	.word	0x0801205a
 801102c:	08012088 	.word	0x08012088

08011030 <fiprintf>:
 8011030:	b40e      	push	{r1, r2, r3}
 8011032:	b503      	push	{r0, r1, lr}
 8011034:	ab03      	add	r3, sp, #12
 8011036:	4601      	mov	r1, r0
 8011038:	4805      	ldr	r0, [pc, #20]	; (8011050 <fiprintf+0x20>)
 801103a:	f853 2b04 	ldr.w	r2, [r3], #4
 801103e:	6800      	ldr	r0, [r0, #0]
 8011040:	9301      	str	r3, [sp, #4]
 8011042:	f000 f897 	bl	8011174 <_vfiprintf_r>
 8011046:	b002      	add	sp, #8
 8011048:	f85d eb04 	ldr.w	lr, [sp], #4
 801104c:	b003      	add	sp, #12
 801104e:	4770      	bx	lr
 8011050:	20000030 	.word	0x20000030

08011054 <__ascii_mbtowc>:
 8011054:	b082      	sub	sp, #8
 8011056:	b901      	cbnz	r1, 801105a <__ascii_mbtowc+0x6>
 8011058:	a901      	add	r1, sp, #4
 801105a:	b142      	cbz	r2, 801106e <__ascii_mbtowc+0x1a>
 801105c:	b14b      	cbz	r3, 8011072 <__ascii_mbtowc+0x1e>
 801105e:	7813      	ldrb	r3, [r2, #0]
 8011060:	600b      	str	r3, [r1, #0]
 8011062:	7812      	ldrb	r2, [r2, #0]
 8011064:	1e10      	subs	r0, r2, #0
 8011066:	bf18      	it	ne
 8011068:	2001      	movne	r0, #1
 801106a:	b002      	add	sp, #8
 801106c:	4770      	bx	lr
 801106e:	4610      	mov	r0, r2
 8011070:	e7fb      	b.n	801106a <__ascii_mbtowc+0x16>
 8011072:	f06f 0001 	mvn.w	r0, #1
 8011076:	e7f8      	b.n	801106a <__ascii_mbtowc+0x16>

08011078 <memmove>:
 8011078:	4288      	cmp	r0, r1
 801107a:	b510      	push	{r4, lr}
 801107c:	eb01 0402 	add.w	r4, r1, r2
 8011080:	d902      	bls.n	8011088 <memmove+0x10>
 8011082:	4284      	cmp	r4, r0
 8011084:	4623      	mov	r3, r4
 8011086:	d807      	bhi.n	8011098 <memmove+0x20>
 8011088:	1e43      	subs	r3, r0, #1
 801108a:	42a1      	cmp	r1, r4
 801108c:	d008      	beq.n	80110a0 <memmove+0x28>
 801108e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011092:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011096:	e7f8      	b.n	801108a <memmove+0x12>
 8011098:	4402      	add	r2, r0
 801109a:	4601      	mov	r1, r0
 801109c:	428a      	cmp	r2, r1
 801109e:	d100      	bne.n	80110a2 <memmove+0x2a>
 80110a0:	bd10      	pop	{r4, pc}
 80110a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80110a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80110aa:	e7f7      	b.n	801109c <memmove+0x24>

080110ac <__malloc_lock>:
 80110ac:	4801      	ldr	r0, [pc, #4]	; (80110b4 <__malloc_lock+0x8>)
 80110ae:	f000 bc1d 	b.w	80118ec <__retarget_lock_acquire_recursive>
 80110b2:	bf00      	nop
 80110b4:	20000678 	.word	0x20000678

080110b8 <__malloc_unlock>:
 80110b8:	4801      	ldr	r0, [pc, #4]	; (80110c0 <__malloc_unlock+0x8>)
 80110ba:	f000 bc18 	b.w	80118ee <__retarget_lock_release_recursive>
 80110be:	bf00      	nop
 80110c0:	20000678 	.word	0x20000678

080110c4 <_realloc_r>:
 80110c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110c8:	4680      	mov	r8, r0
 80110ca:	4614      	mov	r4, r2
 80110cc:	460e      	mov	r6, r1
 80110ce:	b921      	cbnz	r1, 80110da <_realloc_r+0x16>
 80110d0:	4611      	mov	r1, r2
 80110d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80110d6:	f7ff bdad 	b.w	8010c34 <_malloc_r>
 80110da:	b92a      	cbnz	r2, 80110e8 <_realloc_r+0x24>
 80110dc:	4625      	mov	r5, r4
 80110de:	f7ff fd3d 	bl	8010b5c <_free_r>
 80110e2:	4628      	mov	r0, r5
 80110e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110e8:	f000 fc68 	bl	80119bc <_malloc_usable_size_r>
 80110ec:	4284      	cmp	r4, r0
 80110ee:	4607      	mov	r7, r0
 80110f0:	d802      	bhi.n	80110f8 <_realloc_r+0x34>
 80110f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80110f6:	d812      	bhi.n	801111e <_realloc_r+0x5a>
 80110f8:	4621      	mov	r1, r4
 80110fa:	4640      	mov	r0, r8
 80110fc:	f7ff fd9a 	bl	8010c34 <_malloc_r>
 8011100:	4605      	mov	r5, r0
 8011102:	2800      	cmp	r0, #0
 8011104:	d0ed      	beq.n	80110e2 <_realloc_r+0x1e>
 8011106:	42bc      	cmp	r4, r7
 8011108:	4622      	mov	r2, r4
 801110a:	4631      	mov	r1, r6
 801110c:	bf28      	it	cs
 801110e:	463a      	movcs	r2, r7
 8011110:	f7fd fe48 	bl	800eda4 <memcpy>
 8011114:	4631      	mov	r1, r6
 8011116:	4640      	mov	r0, r8
 8011118:	f7ff fd20 	bl	8010b5c <_free_r>
 801111c:	e7e1      	b.n	80110e2 <_realloc_r+0x1e>
 801111e:	4635      	mov	r5, r6
 8011120:	e7df      	b.n	80110e2 <_realloc_r+0x1e>

08011122 <__sfputc_r>:
 8011122:	6893      	ldr	r3, [r2, #8]
 8011124:	3b01      	subs	r3, #1
 8011126:	2b00      	cmp	r3, #0
 8011128:	6093      	str	r3, [r2, #8]
 801112a:	b410      	push	{r4}
 801112c:	da08      	bge.n	8011140 <__sfputc_r+0x1e>
 801112e:	6994      	ldr	r4, [r2, #24]
 8011130:	42a3      	cmp	r3, r4
 8011132:	db01      	blt.n	8011138 <__sfputc_r+0x16>
 8011134:	290a      	cmp	r1, #10
 8011136:	d103      	bne.n	8011140 <__sfputc_r+0x1e>
 8011138:	f85d 4b04 	ldr.w	r4, [sp], #4
 801113c:	f000 b94a 	b.w	80113d4 <__swbuf_r>
 8011140:	6813      	ldr	r3, [r2, #0]
 8011142:	1c58      	adds	r0, r3, #1
 8011144:	6010      	str	r0, [r2, #0]
 8011146:	4608      	mov	r0, r1
 8011148:	7019      	strb	r1, [r3, #0]
 801114a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801114e:	4770      	bx	lr

08011150 <__sfputs_r>:
 8011150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011152:	4606      	mov	r6, r0
 8011154:	460f      	mov	r7, r1
 8011156:	4614      	mov	r4, r2
 8011158:	18d5      	adds	r5, r2, r3
 801115a:	42ac      	cmp	r4, r5
 801115c:	d101      	bne.n	8011162 <__sfputs_r+0x12>
 801115e:	2000      	movs	r0, #0
 8011160:	e007      	b.n	8011172 <__sfputs_r+0x22>
 8011162:	463a      	mov	r2, r7
 8011164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011168:	4630      	mov	r0, r6
 801116a:	f7ff ffda 	bl	8011122 <__sfputc_r>
 801116e:	1c43      	adds	r3, r0, #1
 8011170:	d1f3      	bne.n	801115a <__sfputs_r+0xa>
 8011172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011174 <_vfiprintf_r>:
 8011174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011178:	460d      	mov	r5, r1
 801117a:	b09d      	sub	sp, #116	; 0x74
 801117c:	4614      	mov	r4, r2
 801117e:	4698      	mov	r8, r3
 8011180:	4606      	mov	r6, r0
 8011182:	b118      	cbz	r0, 801118c <_vfiprintf_r+0x18>
 8011184:	6983      	ldr	r3, [r0, #24]
 8011186:	b90b      	cbnz	r3, 801118c <_vfiprintf_r+0x18>
 8011188:	f000 fb12 	bl	80117b0 <__sinit>
 801118c:	4b89      	ldr	r3, [pc, #548]	; (80113b4 <_vfiprintf_r+0x240>)
 801118e:	429d      	cmp	r5, r3
 8011190:	d11b      	bne.n	80111ca <_vfiprintf_r+0x56>
 8011192:	6875      	ldr	r5, [r6, #4]
 8011194:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011196:	07d9      	lsls	r1, r3, #31
 8011198:	d405      	bmi.n	80111a6 <_vfiprintf_r+0x32>
 801119a:	89ab      	ldrh	r3, [r5, #12]
 801119c:	059a      	lsls	r2, r3, #22
 801119e:	d402      	bmi.n	80111a6 <_vfiprintf_r+0x32>
 80111a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111a2:	f000 fba3 	bl	80118ec <__retarget_lock_acquire_recursive>
 80111a6:	89ab      	ldrh	r3, [r5, #12]
 80111a8:	071b      	lsls	r3, r3, #28
 80111aa:	d501      	bpl.n	80111b0 <_vfiprintf_r+0x3c>
 80111ac:	692b      	ldr	r3, [r5, #16]
 80111ae:	b9eb      	cbnz	r3, 80111ec <_vfiprintf_r+0x78>
 80111b0:	4629      	mov	r1, r5
 80111b2:	4630      	mov	r0, r6
 80111b4:	f000 f96e 	bl	8011494 <__swsetup_r>
 80111b8:	b1c0      	cbz	r0, 80111ec <_vfiprintf_r+0x78>
 80111ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80111bc:	07dc      	lsls	r4, r3, #31
 80111be:	d50e      	bpl.n	80111de <_vfiprintf_r+0x6a>
 80111c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111c4:	b01d      	add	sp, #116	; 0x74
 80111c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ca:	4b7b      	ldr	r3, [pc, #492]	; (80113b8 <_vfiprintf_r+0x244>)
 80111cc:	429d      	cmp	r5, r3
 80111ce:	d101      	bne.n	80111d4 <_vfiprintf_r+0x60>
 80111d0:	68b5      	ldr	r5, [r6, #8]
 80111d2:	e7df      	b.n	8011194 <_vfiprintf_r+0x20>
 80111d4:	4b79      	ldr	r3, [pc, #484]	; (80113bc <_vfiprintf_r+0x248>)
 80111d6:	429d      	cmp	r5, r3
 80111d8:	bf08      	it	eq
 80111da:	68f5      	ldreq	r5, [r6, #12]
 80111dc:	e7da      	b.n	8011194 <_vfiprintf_r+0x20>
 80111de:	89ab      	ldrh	r3, [r5, #12]
 80111e0:	0598      	lsls	r0, r3, #22
 80111e2:	d4ed      	bmi.n	80111c0 <_vfiprintf_r+0x4c>
 80111e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111e6:	f000 fb82 	bl	80118ee <__retarget_lock_release_recursive>
 80111ea:	e7e9      	b.n	80111c0 <_vfiprintf_r+0x4c>
 80111ec:	2300      	movs	r3, #0
 80111ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80111f2:	f04f 0901 	mov.w	r9, #1
 80111f6:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80113c0 <_vfiprintf_r+0x24c>
 80111fa:	9309      	str	r3, [sp, #36]	; 0x24
 80111fc:	2320      	movs	r3, #32
 80111fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011202:	2330      	movs	r3, #48	; 0x30
 8011204:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011208:	4623      	mov	r3, r4
 801120a:	469a      	mov	sl, r3
 801120c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011210:	b10a      	cbz	r2, 8011216 <_vfiprintf_r+0xa2>
 8011212:	2a25      	cmp	r2, #37	; 0x25
 8011214:	d1f9      	bne.n	801120a <_vfiprintf_r+0x96>
 8011216:	ebba 0b04 	subs.w	fp, sl, r4
 801121a:	d00b      	beq.n	8011234 <_vfiprintf_r+0xc0>
 801121c:	465b      	mov	r3, fp
 801121e:	4622      	mov	r2, r4
 8011220:	4629      	mov	r1, r5
 8011222:	4630      	mov	r0, r6
 8011224:	f7ff ff94 	bl	8011150 <__sfputs_r>
 8011228:	3001      	adds	r0, #1
 801122a:	f000 80aa 	beq.w	8011382 <_vfiprintf_r+0x20e>
 801122e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011230:	445a      	add	r2, fp
 8011232:	9209      	str	r2, [sp, #36]	; 0x24
 8011234:	f89a 3000 	ldrb.w	r3, [sl]
 8011238:	2b00      	cmp	r3, #0
 801123a:	f000 80a2 	beq.w	8011382 <_vfiprintf_r+0x20e>
 801123e:	2300      	movs	r3, #0
 8011240:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011244:	f10a 0a01 	add.w	sl, sl, #1
 8011248:	9304      	str	r3, [sp, #16]
 801124a:	9307      	str	r3, [sp, #28]
 801124c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011250:	931a      	str	r3, [sp, #104]	; 0x68
 8011252:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011256:	4654      	mov	r4, sl
 8011258:	2205      	movs	r2, #5
 801125a:	4859      	ldr	r0, [pc, #356]	; (80113c0 <_vfiprintf_r+0x24c>)
 801125c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011260:	f7ff f8ce 	bl	8010400 <memchr>
 8011264:	9a04      	ldr	r2, [sp, #16]
 8011266:	b9d8      	cbnz	r0, 80112a0 <_vfiprintf_r+0x12c>
 8011268:	06d1      	lsls	r1, r2, #27
 801126a:	bf44      	itt	mi
 801126c:	2320      	movmi	r3, #32
 801126e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011272:	0713      	lsls	r3, r2, #28
 8011274:	bf44      	itt	mi
 8011276:	232b      	movmi	r3, #43	; 0x2b
 8011278:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801127c:	f89a 3000 	ldrb.w	r3, [sl]
 8011280:	2b2a      	cmp	r3, #42	; 0x2a
 8011282:	d015      	beq.n	80112b0 <_vfiprintf_r+0x13c>
 8011284:	9a07      	ldr	r2, [sp, #28]
 8011286:	4654      	mov	r4, sl
 8011288:	2000      	movs	r0, #0
 801128a:	f04f 0c0a 	mov.w	ip, #10
 801128e:	4621      	mov	r1, r4
 8011290:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011294:	3b30      	subs	r3, #48	; 0x30
 8011296:	2b09      	cmp	r3, #9
 8011298:	d94e      	bls.n	8011338 <_vfiprintf_r+0x1c4>
 801129a:	b1b0      	cbz	r0, 80112ca <_vfiprintf_r+0x156>
 801129c:	9207      	str	r2, [sp, #28]
 801129e:	e014      	b.n	80112ca <_vfiprintf_r+0x156>
 80112a0:	eba0 0308 	sub.w	r3, r0, r8
 80112a4:	46a2      	mov	sl, r4
 80112a6:	fa09 f303 	lsl.w	r3, r9, r3
 80112aa:	4313      	orrs	r3, r2
 80112ac:	9304      	str	r3, [sp, #16]
 80112ae:	e7d2      	b.n	8011256 <_vfiprintf_r+0xe2>
 80112b0:	9b03      	ldr	r3, [sp, #12]
 80112b2:	1d19      	adds	r1, r3, #4
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	9103      	str	r1, [sp, #12]
 80112ba:	bfbb      	ittet	lt
 80112bc:	425b      	neglt	r3, r3
 80112be:	f042 0202 	orrlt.w	r2, r2, #2
 80112c2:	9307      	strge	r3, [sp, #28]
 80112c4:	9307      	strlt	r3, [sp, #28]
 80112c6:	bfb8      	it	lt
 80112c8:	9204      	strlt	r2, [sp, #16]
 80112ca:	7823      	ldrb	r3, [r4, #0]
 80112cc:	2b2e      	cmp	r3, #46	; 0x2e
 80112ce:	d10c      	bne.n	80112ea <_vfiprintf_r+0x176>
 80112d0:	7863      	ldrb	r3, [r4, #1]
 80112d2:	2b2a      	cmp	r3, #42	; 0x2a
 80112d4:	d135      	bne.n	8011342 <_vfiprintf_r+0x1ce>
 80112d6:	9b03      	ldr	r3, [sp, #12]
 80112d8:	3402      	adds	r4, #2
 80112da:	1d1a      	adds	r2, r3, #4
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	9203      	str	r2, [sp, #12]
 80112e2:	bfb8      	it	lt
 80112e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80112e8:	9305      	str	r3, [sp, #20]
 80112ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80113d0 <_vfiprintf_r+0x25c>
 80112ee:	2203      	movs	r2, #3
 80112f0:	7821      	ldrb	r1, [r4, #0]
 80112f2:	4650      	mov	r0, sl
 80112f4:	f7ff f884 	bl	8010400 <memchr>
 80112f8:	b140      	cbz	r0, 801130c <_vfiprintf_r+0x198>
 80112fa:	2340      	movs	r3, #64	; 0x40
 80112fc:	eba0 000a 	sub.w	r0, r0, sl
 8011300:	3401      	adds	r4, #1
 8011302:	fa03 f000 	lsl.w	r0, r3, r0
 8011306:	9b04      	ldr	r3, [sp, #16]
 8011308:	4303      	orrs	r3, r0
 801130a:	9304      	str	r3, [sp, #16]
 801130c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011310:	2206      	movs	r2, #6
 8011312:	482c      	ldr	r0, [pc, #176]	; (80113c4 <_vfiprintf_r+0x250>)
 8011314:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011318:	f7ff f872 	bl	8010400 <memchr>
 801131c:	2800      	cmp	r0, #0
 801131e:	d03f      	beq.n	80113a0 <_vfiprintf_r+0x22c>
 8011320:	4b29      	ldr	r3, [pc, #164]	; (80113c8 <_vfiprintf_r+0x254>)
 8011322:	bb1b      	cbnz	r3, 801136c <_vfiprintf_r+0x1f8>
 8011324:	9b03      	ldr	r3, [sp, #12]
 8011326:	3307      	adds	r3, #7
 8011328:	f023 0307 	bic.w	r3, r3, #7
 801132c:	3308      	adds	r3, #8
 801132e:	9303      	str	r3, [sp, #12]
 8011330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011332:	443b      	add	r3, r7
 8011334:	9309      	str	r3, [sp, #36]	; 0x24
 8011336:	e767      	b.n	8011208 <_vfiprintf_r+0x94>
 8011338:	fb0c 3202 	mla	r2, ip, r2, r3
 801133c:	460c      	mov	r4, r1
 801133e:	2001      	movs	r0, #1
 8011340:	e7a5      	b.n	801128e <_vfiprintf_r+0x11a>
 8011342:	2300      	movs	r3, #0
 8011344:	3401      	adds	r4, #1
 8011346:	f04f 0c0a 	mov.w	ip, #10
 801134a:	4619      	mov	r1, r3
 801134c:	9305      	str	r3, [sp, #20]
 801134e:	4620      	mov	r0, r4
 8011350:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011354:	3a30      	subs	r2, #48	; 0x30
 8011356:	2a09      	cmp	r2, #9
 8011358:	d903      	bls.n	8011362 <_vfiprintf_r+0x1ee>
 801135a:	2b00      	cmp	r3, #0
 801135c:	d0c5      	beq.n	80112ea <_vfiprintf_r+0x176>
 801135e:	9105      	str	r1, [sp, #20]
 8011360:	e7c3      	b.n	80112ea <_vfiprintf_r+0x176>
 8011362:	fb0c 2101 	mla	r1, ip, r1, r2
 8011366:	4604      	mov	r4, r0
 8011368:	2301      	movs	r3, #1
 801136a:	e7f0      	b.n	801134e <_vfiprintf_r+0x1da>
 801136c:	ab03      	add	r3, sp, #12
 801136e:	462a      	mov	r2, r5
 8011370:	a904      	add	r1, sp, #16
 8011372:	4630      	mov	r0, r6
 8011374:	9300      	str	r3, [sp, #0]
 8011376:	4b15      	ldr	r3, [pc, #84]	; (80113cc <_vfiprintf_r+0x258>)
 8011378:	f7fd fdca 	bl	800ef10 <_printf_float>
 801137c:	4607      	mov	r7, r0
 801137e:	1c78      	adds	r0, r7, #1
 8011380:	d1d6      	bne.n	8011330 <_vfiprintf_r+0x1bc>
 8011382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011384:	07d9      	lsls	r1, r3, #31
 8011386:	d405      	bmi.n	8011394 <_vfiprintf_r+0x220>
 8011388:	89ab      	ldrh	r3, [r5, #12]
 801138a:	059a      	lsls	r2, r3, #22
 801138c:	d402      	bmi.n	8011394 <_vfiprintf_r+0x220>
 801138e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011390:	f000 faad 	bl	80118ee <__retarget_lock_release_recursive>
 8011394:	89ab      	ldrh	r3, [r5, #12]
 8011396:	065b      	lsls	r3, r3, #25
 8011398:	f53f af12 	bmi.w	80111c0 <_vfiprintf_r+0x4c>
 801139c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801139e:	e711      	b.n	80111c4 <_vfiprintf_r+0x50>
 80113a0:	ab03      	add	r3, sp, #12
 80113a2:	462a      	mov	r2, r5
 80113a4:	a904      	add	r1, sp, #16
 80113a6:	4630      	mov	r0, r6
 80113a8:	9300      	str	r3, [sp, #0]
 80113aa:	4b08      	ldr	r3, [pc, #32]	; (80113cc <_vfiprintf_r+0x258>)
 80113ac:	f7fe f856 	bl	800f45c <_printf_i>
 80113b0:	e7e4      	b.n	801137c <_vfiprintf_r+0x208>
 80113b2:	bf00      	nop
 80113b4:	080121b4 	.word	0x080121b4
 80113b8:	080121d4 	.word	0x080121d4
 80113bc:	08012194 	.word	0x08012194
 80113c0:	0801203c 	.word	0x0801203c
 80113c4:	08012046 	.word	0x08012046
 80113c8:	0800ef11 	.word	0x0800ef11
 80113cc:	08011151 	.word	0x08011151
 80113d0:	08012042 	.word	0x08012042

080113d4 <__swbuf_r>:
 80113d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113d6:	460e      	mov	r6, r1
 80113d8:	4614      	mov	r4, r2
 80113da:	4605      	mov	r5, r0
 80113dc:	b118      	cbz	r0, 80113e6 <__swbuf_r+0x12>
 80113de:	6983      	ldr	r3, [r0, #24]
 80113e0:	b90b      	cbnz	r3, 80113e6 <__swbuf_r+0x12>
 80113e2:	f000 f9e5 	bl	80117b0 <__sinit>
 80113e6:	4b21      	ldr	r3, [pc, #132]	; (801146c <__swbuf_r+0x98>)
 80113e8:	429c      	cmp	r4, r3
 80113ea:	d12b      	bne.n	8011444 <__swbuf_r+0x70>
 80113ec:	686c      	ldr	r4, [r5, #4]
 80113ee:	69a3      	ldr	r3, [r4, #24]
 80113f0:	60a3      	str	r3, [r4, #8]
 80113f2:	89a3      	ldrh	r3, [r4, #12]
 80113f4:	071a      	lsls	r2, r3, #28
 80113f6:	d52f      	bpl.n	8011458 <__swbuf_r+0x84>
 80113f8:	6923      	ldr	r3, [r4, #16]
 80113fa:	b36b      	cbz	r3, 8011458 <__swbuf_r+0x84>
 80113fc:	6923      	ldr	r3, [r4, #16]
 80113fe:	b2f6      	uxtb	r6, r6
 8011400:	6820      	ldr	r0, [r4, #0]
 8011402:	4637      	mov	r7, r6
 8011404:	1ac0      	subs	r0, r0, r3
 8011406:	6963      	ldr	r3, [r4, #20]
 8011408:	4283      	cmp	r3, r0
 801140a:	dc04      	bgt.n	8011416 <__swbuf_r+0x42>
 801140c:	4621      	mov	r1, r4
 801140e:	4628      	mov	r0, r5
 8011410:	f000 f93a 	bl	8011688 <_fflush_r>
 8011414:	bb30      	cbnz	r0, 8011464 <__swbuf_r+0x90>
 8011416:	68a3      	ldr	r3, [r4, #8]
 8011418:	3001      	adds	r0, #1
 801141a:	3b01      	subs	r3, #1
 801141c:	60a3      	str	r3, [r4, #8]
 801141e:	6823      	ldr	r3, [r4, #0]
 8011420:	1c5a      	adds	r2, r3, #1
 8011422:	6022      	str	r2, [r4, #0]
 8011424:	701e      	strb	r6, [r3, #0]
 8011426:	6963      	ldr	r3, [r4, #20]
 8011428:	4283      	cmp	r3, r0
 801142a:	d004      	beq.n	8011436 <__swbuf_r+0x62>
 801142c:	89a3      	ldrh	r3, [r4, #12]
 801142e:	07db      	lsls	r3, r3, #31
 8011430:	d506      	bpl.n	8011440 <__swbuf_r+0x6c>
 8011432:	2e0a      	cmp	r6, #10
 8011434:	d104      	bne.n	8011440 <__swbuf_r+0x6c>
 8011436:	4621      	mov	r1, r4
 8011438:	4628      	mov	r0, r5
 801143a:	f000 f925 	bl	8011688 <_fflush_r>
 801143e:	b988      	cbnz	r0, 8011464 <__swbuf_r+0x90>
 8011440:	4638      	mov	r0, r7
 8011442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011444:	4b0a      	ldr	r3, [pc, #40]	; (8011470 <__swbuf_r+0x9c>)
 8011446:	429c      	cmp	r4, r3
 8011448:	d101      	bne.n	801144e <__swbuf_r+0x7a>
 801144a:	68ac      	ldr	r4, [r5, #8]
 801144c:	e7cf      	b.n	80113ee <__swbuf_r+0x1a>
 801144e:	4b09      	ldr	r3, [pc, #36]	; (8011474 <__swbuf_r+0xa0>)
 8011450:	429c      	cmp	r4, r3
 8011452:	bf08      	it	eq
 8011454:	68ec      	ldreq	r4, [r5, #12]
 8011456:	e7ca      	b.n	80113ee <__swbuf_r+0x1a>
 8011458:	4621      	mov	r1, r4
 801145a:	4628      	mov	r0, r5
 801145c:	f000 f81a 	bl	8011494 <__swsetup_r>
 8011460:	2800      	cmp	r0, #0
 8011462:	d0cb      	beq.n	80113fc <__swbuf_r+0x28>
 8011464:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011468:	e7ea      	b.n	8011440 <__swbuf_r+0x6c>
 801146a:	bf00      	nop
 801146c:	080121b4 	.word	0x080121b4
 8011470:	080121d4 	.word	0x080121d4
 8011474:	08012194 	.word	0x08012194

08011478 <__ascii_wctomb>:
 8011478:	b149      	cbz	r1, 801148e <__ascii_wctomb+0x16>
 801147a:	2aff      	cmp	r2, #255	; 0xff
 801147c:	bf8d      	iteet	hi
 801147e:	238a      	movhi	r3, #138	; 0x8a
 8011480:	2001      	movls	r0, #1
 8011482:	700a      	strbls	r2, [r1, #0]
 8011484:	6003      	strhi	r3, [r0, #0]
 8011486:	bf88      	it	hi
 8011488:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801148c:	4770      	bx	lr
 801148e:	4608      	mov	r0, r1
 8011490:	4770      	bx	lr
	...

08011494 <__swsetup_r>:
 8011494:	4b32      	ldr	r3, [pc, #200]	; (8011560 <__swsetup_r+0xcc>)
 8011496:	b570      	push	{r4, r5, r6, lr}
 8011498:	681d      	ldr	r5, [r3, #0]
 801149a:	4606      	mov	r6, r0
 801149c:	460c      	mov	r4, r1
 801149e:	b125      	cbz	r5, 80114aa <__swsetup_r+0x16>
 80114a0:	69ab      	ldr	r3, [r5, #24]
 80114a2:	b913      	cbnz	r3, 80114aa <__swsetup_r+0x16>
 80114a4:	4628      	mov	r0, r5
 80114a6:	f000 f983 	bl	80117b0 <__sinit>
 80114aa:	4b2e      	ldr	r3, [pc, #184]	; (8011564 <__swsetup_r+0xd0>)
 80114ac:	429c      	cmp	r4, r3
 80114ae:	d10f      	bne.n	80114d0 <__swsetup_r+0x3c>
 80114b0:	686c      	ldr	r4, [r5, #4]
 80114b2:	89a3      	ldrh	r3, [r4, #12]
 80114b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80114b8:	0719      	lsls	r1, r3, #28
 80114ba:	d42c      	bmi.n	8011516 <__swsetup_r+0x82>
 80114bc:	06dd      	lsls	r5, r3, #27
 80114be:	d411      	bmi.n	80114e4 <__swsetup_r+0x50>
 80114c0:	2309      	movs	r3, #9
 80114c2:	6033      	str	r3, [r6, #0]
 80114c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80114c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80114cc:	81a3      	strh	r3, [r4, #12]
 80114ce:	e03e      	b.n	801154e <__swsetup_r+0xba>
 80114d0:	4b25      	ldr	r3, [pc, #148]	; (8011568 <__swsetup_r+0xd4>)
 80114d2:	429c      	cmp	r4, r3
 80114d4:	d101      	bne.n	80114da <__swsetup_r+0x46>
 80114d6:	68ac      	ldr	r4, [r5, #8]
 80114d8:	e7eb      	b.n	80114b2 <__swsetup_r+0x1e>
 80114da:	4b24      	ldr	r3, [pc, #144]	; (801156c <__swsetup_r+0xd8>)
 80114dc:	429c      	cmp	r4, r3
 80114de:	bf08      	it	eq
 80114e0:	68ec      	ldreq	r4, [r5, #12]
 80114e2:	e7e6      	b.n	80114b2 <__swsetup_r+0x1e>
 80114e4:	0758      	lsls	r0, r3, #29
 80114e6:	d512      	bpl.n	801150e <__swsetup_r+0x7a>
 80114e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80114ea:	b141      	cbz	r1, 80114fe <__swsetup_r+0x6a>
 80114ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80114f0:	4299      	cmp	r1, r3
 80114f2:	d002      	beq.n	80114fa <__swsetup_r+0x66>
 80114f4:	4630      	mov	r0, r6
 80114f6:	f7ff fb31 	bl	8010b5c <_free_r>
 80114fa:	2300      	movs	r3, #0
 80114fc:	6363      	str	r3, [r4, #52]	; 0x34
 80114fe:	89a3      	ldrh	r3, [r4, #12]
 8011500:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011504:	81a3      	strh	r3, [r4, #12]
 8011506:	2300      	movs	r3, #0
 8011508:	6063      	str	r3, [r4, #4]
 801150a:	6923      	ldr	r3, [r4, #16]
 801150c:	6023      	str	r3, [r4, #0]
 801150e:	89a3      	ldrh	r3, [r4, #12]
 8011510:	f043 0308 	orr.w	r3, r3, #8
 8011514:	81a3      	strh	r3, [r4, #12]
 8011516:	6923      	ldr	r3, [r4, #16]
 8011518:	b94b      	cbnz	r3, 801152e <__swsetup_r+0x9a>
 801151a:	89a3      	ldrh	r3, [r4, #12]
 801151c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011524:	d003      	beq.n	801152e <__swsetup_r+0x9a>
 8011526:	4621      	mov	r1, r4
 8011528:	4630      	mov	r0, r6
 801152a:	f000 fa07 	bl	801193c <__smakebuf_r>
 801152e:	89a0      	ldrh	r0, [r4, #12]
 8011530:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011534:	f010 0301 	ands.w	r3, r0, #1
 8011538:	d00a      	beq.n	8011550 <__swsetup_r+0xbc>
 801153a:	2300      	movs	r3, #0
 801153c:	60a3      	str	r3, [r4, #8]
 801153e:	6963      	ldr	r3, [r4, #20]
 8011540:	425b      	negs	r3, r3
 8011542:	61a3      	str	r3, [r4, #24]
 8011544:	6923      	ldr	r3, [r4, #16]
 8011546:	b943      	cbnz	r3, 801155a <__swsetup_r+0xc6>
 8011548:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801154c:	d1ba      	bne.n	80114c4 <__swsetup_r+0x30>
 801154e:	bd70      	pop	{r4, r5, r6, pc}
 8011550:	0781      	lsls	r1, r0, #30
 8011552:	bf58      	it	pl
 8011554:	6963      	ldrpl	r3, [r4, #20]
 8011556:	60a3      	str	r3, [r4, #8]
 8011558:	e7f4      	b.n	8011544 <__swsetup_r+0xb0>
 801155a:	2000      	movs	r0, #0
 801155c:	e7f7      	b.n	801154e <__swsetup_r+0xba>
 801155e:	bf00      	nop
 8011560:	20000030 	.word	0x20000030
 8011564:	080121b4 	.word	0x080121b4
 8011568:	080121d4 	.word	0x080121d4
 801156c:	08012194 	.word	0x08012194

08011570 <abort>:
 8011570:	2006      	movs	r0, #6
 8011572:	b508      	push	{r3, lr}
 8011574:	f000 fa52 	bl	8011a1c <raise>
 8011578:	2001      	movs	r0, #1
 801157a:	f7f3 fd5d 	bl	8005038 <_exit>
	...

08011580 <__sflush_r>:
 8011580:	898a      	ldrh	r2, [r1, #12]
 8011582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011586:	4605      	mov	r5, r0
 8011588:	0710      	lsls	r0, r2, #28
 801158a:	460c      	mov	r4, r1
 801158c:	d458      	bmi.n	8011640 <__sflush_r+0xc0>
 801158e:	684b      	ldr	r3, [r1, #4]
 8011590:	2b00      	cmp	r3, #0
 8011592:	dc05      	bgt.n	80115a0 <__sflush_r+0x20>
 8011594:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011596:	2b00      	cmp	r3, #0
 8011598:	dc02      	bgt.n	80115a0 <__sflush_r+0x20>
 801159a:	2000      	movs	r0, #0
 801159c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80115a2:	2e00      	cmp	r6, #0
 80115a4:	d0f9      	beq.n	801159a <__sflush_r+0x1a>
 80115a6:	2300      	movs	r3, #0
 80115a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80115ac:	682f      	ldr	r7, [r5, #0]
 80115ae:	602b      	str	r3, [r5, #0]
 80115b0:	d032      	beq.n	8011618 <__sflush_r+0x98>
 80115b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80115b4:	89a3      	ldrh	r3, [r4, #12]
 80115b6:	075a      	lsls	r2, r3, #29
 80115b8:	d505      	bpl.n	80115c6 <__sflush_r+0x46>
 80115ba:	6863      	ldr	r3, [r4, #4]
 80115bc:	1ac0      	subs	r0, r0, r3
 80115be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80115c0:	b10b      	cbz	r3, 80115c6 <__sflush_r+0x46>
 80115c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80115c4:	1ac0      	subs	r0, r0, r3
 80115c6:	2300      	movs	r3, #0
 80115c8:	4602      	mov	r2, r0
 80115ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80115cc:	4628      	mov	r0, r5
 80115ce:	6a21      	ldr	r1, [r4, #32]
 80115d0:	47b0      	blx	r6
 80115d2:	1c43      	adds	r3, r0, #1
 80115d4:	89a3      	ldrh	r3, [r4, #12]
 80115d6:	d106      	bne.n	80115e6 <__sflush_r+0x66>
 80115d8:	6829      	ldr	r1, [r5, #0]
 80115da:	291d      	cmp	r1, #29
 80115dc:	d82c      	bhi.n	8011638 <__sflush_r+0xb8>
 80115de:	4a29      	ldr	r2, [pc, #164]	; (8011684 <__sflush_r+0x104>)
 80115e0:	40ca      	lsrs	r2, r1
 80115e2:	07d6      	lsls	r6, r2, #31
 80115e4:	d528      	bpl.n	8011638 <__sflush_r+0xb8>
 80115e6:	2200      	movs	r2, #0
 80115e8:	04d9      	lsls	r1, r3, #19
 80115ea:	6062      	str	r2, [r4, #4]
 80115ec:	6922      	ldr	r2, [r4, #16]
 80115ee:	6022      	str	r2, [r4, #0]
 80115f0:	d504      	bpl.n	80115fc <__sflush_r+0x7c>
 80115f2:	1c42      	adds	r2, r0, #1
 80115f4:	d101      	bne.n	80115fa <__sflush_r+0x7a>
 80115f6:	682b      	ldr	r3, [r5, #0]
 80115f8:	b903      	cbnz	r3, 80115fc <__sflush_r+0x7c>
 80115fa:	6560      	str	r0, [r4, #84]	; 0x54
 80115fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80115fe:	602f      	str	r7, [r5, #0]
 8011600:	2900      	cmp	r1, #0
 8011602:	d0ca      	beq.n	801159a <__sflush_r+0x1a>
 8011604:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011608:	4299      	cmp	r1, r3
 801160a:	d002      	beq.n	8011612 <__sflush_r+0x92>
 801160c:	4628      	mov	r0, r5
 801160e:	f7ff faa5 	bl	8010b5c <_free_r>
 8011612:	2000      	movs	r0, #0
 8011614:	6360      	str	r0, [r4, #52]	; 0x34
 8011616:	e7c1      	b.n	801159c <__sflush_r+0x1c>
 8011618:	6a21      	ldr	r1, [r4, #32]
 801161a:	2301      	movs	r3, #1
 801161c:	4628      	mov	r0, r5
 801161e:	47b0      	blx	r6
 8011620:	1c41      	adds	r1, r0, #1
 8011622:	d1c7      	bne.n	80115b4 <__sflush_r+0x34>
 8011624:	682b      	ldr	r3, [r5, #0]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d0c4      	beq.n	80115b4 <__sflush_r+0x34>
 801162a:	2b1d      	cmp	r3, #29
 801162c:	d001      	beq.n	8011632 <__sflush_r+0xb2>
 801162e:	2b16      	cmp	r3, #22
 8011630:	d101      	bne.n	8011636 <__sflush_r+0xb6>
 8011632:	602f      	str	r7, [r5, #0]
 8011634:	e7b1      	b.n	801159a <__sflush_r+0x1a>
 8011636:	89a3      	ldrh	r3, [r4, #12]
 8011638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801163c:	81a3      	strh	r3, [r4, #12]
 801163e:	e7ad      	b.n	801159c <__sflush_r+0x1c>
 8011640:	690f      	ldr	r7, [r1, #16]
 8011642:	2f00      	cmp	r7, #0
 8011644:	d0a9      	beq.n	801159a <__sflush_r+0x1a>
 8011646:	0793      	lsls	r3, r2, #30
 8011648:	680e      	ldr	r6, [r1, #0]
 801164a:	600f      	str	r7, [r1, #0]
 801164c:	bf0c      	ite	eq
 801164e:	694b      	ldreq	r3, [r1, #20]
 8011650:	2300      	movne	r3, #0
 8011652:	eba6 0807 	sub.w	r8, r6, r7
 8011656:	608b      	str	r3, [r1, #8]
 8011658:	f1b8 0f00 	cmp.w	r8, #0
 801165c:	dd9d      	ble.n	801159a <__sflush_r+0x1a>
 801165e:	4643      	mov	r3, r8
 8011660:	463a      	mov	r2, r7
 8011662:	6a21      	ldr	r1, [r4, #32]
 8011664:	4628      	mov	r0, r5
 8011666:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011668:	47b0      	blx	r6
 801166a:	2800      	cmp	r0, #0
 801166c:	dc06      	bgt.n	801167c <__sflush_r+0xfc>
 801166e:	89a3      	ldrh	r3, [r4, #12]
 8011670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011678:	81a3      	strh	r3, [r4, #12]
 801167a:	e78f      	b.n	801159c <__sflush_r+0x1c>
 801167c:	4407      	add	r7, r0
 801167e:	eba8 0800 	sub.w	r8, r8, r0
 8011682:	e7e9      	b.n	8011658 <__sflush_r+0xd8>
 8011684:	20400001 	.word	0x20400001

08011688 <_fflush_r>:
 8011688:	b538      	push	{r3, r4, r5, lr}
 801168a:	690b      	ldr	r3, [r1, #16]
 801168c:	4605      	mov	r5, r0
 801168e:	460c      	mov	r4, r1
 8011690:	b913      	cbnz	r3, 8011698 <_fflush_r+0x10>
 8011692:	2500      	movs	r5, #0
 8011694:	4628      	mov	r0, r5
 8011696:	bd38      	pop	{r3, r4, r5, pc}
 8011698:	b118      	cbz	r0, 80116a2 <_fflush_r+0x1a>
 801169a:	6983      	ldr	r3, [r0, #24]
 801169c:	b90b      	cbnz	r3, 80116a2 <_fflush_r+0x1a>
 801169e:	f000 f887 	bl	80117b0 <__sinit>
 80116a2:	4b14      	ldr	r3, [pc, #80]	; (80116f4 <_fflush_r+0x6c>)
 80116a4:	429c      	cmp	r4, r3
 80116a6:	d11b      	bne.n	80116e0 <_fflush_r+0x58>
 80116a8:	686c      	ldr	r4, [r5, #4]
 80116aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d0ef      	beq.n	8011692 <_fflush_r+0xa>
 80116b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80116b4:	07d0      	lsls	r0, r2, #31
 80116b6:	d404      	bmi.n	80116c2 <_fflush_r+0x3a>
 80116b8:	0599      	lsls	r1, r3, #22
 80116ba:	d402      	bmi.n	80116c2 <_fflush_r+0x3a>
 80116bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116be:	f000 f915 	bl	80118ec <__retarget_lock_acquire_recursive>
 80116c2:	4628      	mov	r0, r5
 80116c4:	4621      	mov	r1, r4
 80116c6:	f7ff ff5b 	bl	8011580 <__sflush_r>
 80116ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80116cc:	4605      	mov	r5, r0
 80116ce:	07da      	lsls	r2, r3, #31
 80116d0:	d4e0      	bmi.n	8011694 <_fflush_r+0xc>
 80116d2:	89a3      	ldrh	r3, [r4, #12]
 80116d4:	059b      	lsls	r3, r3, #22
 80116d6:	d4dd      	bmi.n	8011694 <_fflush_r+0xc>
 80116d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116da:	f000 f908 	bl	80118ee <__retarget_lock_release_recursive>
 80116de:	e7d9      	b.n	8011694 <_fflush_r+0xc>
 80116e0:	4b05      	ldr	r3, [pc, #20]	; (80116f8 <_fflush_r+0x70>)
 80116e2:	429c      	cmp	r4, r3
 80116e4:	d101      	bne.n	80116ea <_fflush_r+0x62>
 80116e6:	68ac      	ldr	r4, [r5, #8]
 80116e8:	e7df      	b.n	80116aa <_fflush_r+0x22>
 80116ea:	4b04      	ldr	r3, [pc, #16]	; (80116fc <_fflush_r+0x74>)
 80116ec:	429c      	cmp	r4, r3
 80116ee:	bf08      	it	eq
 80116f0:	68ec      	ldreq	r4, [r5, #12]
 80116f2:	e7da      	b.n	80116aa <_fflush_r+0x22>
 80116f4:	080121b4 	.word	0x080121b4
 80116f8:	080121d4 	.word	0x080121d4
 80116fc:	08012194 	.word	0x08012194

08011700 <std>:
 8011700:	2300      	movs	r3, #0
 8011702:	b510      	push	{r4, lr}
 8011704:	4604      	mov	r4, r0
 8011706:	6083      	str	r3, [r0, #8]
 8011708:	8181      	strh	r1, [r0, #12]
 801170a:	4619      	mov	r1, r3
 801170c:	6643      	str	r3, [r0, #100]	; 0x64
 801170e:	81c2      	strh	r2, [r0, #14]
 8011710:	2208      	movs	r2, #8
 8011712:	6183      	str	r3, [r0, #24]
 8011714:	e9c0 3300 	strd	r3, r3, [r0]
 8011718:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801171c:	305c      	adds	r0, #92	; 0x5c
 801171e:	f7fd fb4e 	bl	800edbe <memset>
 8011722:	4b05      	ldr	r3, [pc, #20]	; (8011738 <std+0x38>)
 8011724:	6224      	str	r4, [r4, #32]
 8011726:	6263      	str	r3, [r4, #36]	; 0x24
 8011728:	4b04      	ldr	r3, [pc, #16]	; (801173c <std+0x3c>)
 801172a:	62a3      	str	r3, [r4, #40]	; 0x28
 801172c:	4b04      	ldr	r3, [pc, #16]	; (8011740 <std+0x40>)
 801172e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011730:	4b04      	ldr	r3, [pc, #16]	; (8011744 <std+0x44>)
 8011732:	6323      	str	r3, [r4, #48]	; 0x30
 8011734:	bd10      	pop	{r4, pc}
 8011736:	bf00      	nop
 8011738:	08011a55 	.word	0x08011a55
 801173c:	08011a77 	.word	0x08011a77
 8011740:	08011aaf 	.word	0x08011aaf
 8011744:	08011ad3 	.word	0x08011ad3

08011748 <_cleanup_r>:
 8011748:	4901      	ldr	r1, [pc, #4]	; (8011750 <_cleanup_r+0x8>)
 801174a:	f000 b8af 	b.w	80118ac <_fwalk_reent>
 801174e:	bf00      	nop
 8011750:	08011689 	.word	0x08011689

08011754 <__sfmoreglue>:
 8011754:	b570      	push	{r4, r5, r6, lr}
 8011756:	2268      	movs	r2, #104	; 0x68
 8011758:	1e4d      	subs	r5, r1, #1
 801175a:	460e      	mov	r6, r1
 801175c:	4355      	muls	r5, r2
 801175e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011762:	f7ff fa67 	bl	8010c34 <_malloc_r>
 8011766:	4604      	mov	r4, r0
 8011768:	b140      	cbz	r0, 801177c <__sfmoreglue+0x28>
 801176a:	2100      	movs	r1, #0
 801176c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011770:	e9c0 1600 	strd	r1, r6, [r0]
 8011774:	300c      	adds	r0, #12
 8011776:	60a0      	str	r0, [r4, #8]
 8011778:	f7fd fb21 	bl	800edbe <memset>
 801177c:	4620      	mov	r0, r4
 801177e:	bd70      	pop	{r4, r5, r6, pc}

08011780 <__sfp_lock_acquire>:
 8011780:	4801      	ldr	r0, [pc, #4]	; (8011788 <__sfp_lock_acquire+0x8>)
 8011782:	f000 b8b3 	b.w	80118ec <__retarget_lock_acquire_recursive>
 8011786:	bf00      	nop
 8011788:	20000679 	.word	0x20000679

0801178c <__sfp_lock_release>:
 801178c:	4801      	ldr	r0, [pc, #4]	; (8011794 <__sfp_lock_release+0x8>)
 801178e:	f000 b8ae 	b.w	80118ee <__retarget_lock_release_recursive>
 8011792:	bf00      	nop
 8011794:	20000679 	.word	0x20000679

08011798 <__sinit_lock_acquire>:
 8011798:	4801      	ldr	r0, [pc, #4]	; (80117a0 <__sinit_lock_acquire+0x8>)
 801179a:	f000 b8a7 	b.w	80118ec <__retarget_lock_acquire_recursive>
 801179e:	bf00      	nop
 80117a0:	2000067a 	.word	0x2000067a

080117a4 <__sinit_lock_release>:
 80117a4:	4801      	ldr	r0, [pc, #4]	; (80117ac <__sinit_lock_release+0x8>)
 80117a6:	f000 b8a2 	b.w	80118ee <__retarget_lock_release_recursive>
 80117aa:	bf00      	nop
 80117ac:	2000067a 	.word	0x2000067a

080117b0 <__sinit>:
 80117b0:	b510      	push	{r4, lr}
 80117b2:	4604      	mov	r4, r0
 80117b4:	f7ff fff0 	bl	8011798 <__sinit_lock_acquire>
 80117b8:	69a3      	ldr	r3, [r4, #24]
 80117ba:	b11b      	cbz	r3, 80117c4 <__sinit+0x14>
 80117bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117c0:	f7ff bff0 	b.w	80117a4 <__sinit_lock_release>
 80117c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80117c8:	6523      	str	r3, [r4, #80]	; 0x50
 80117ca:	4620      	mov	r0, r4
 80117cc:	4b12      	ldr	r3, [pc, #72]	; (8011818 <__sinit+0x68>)
 80117ce:	4a13      	ldr	r2, [pc, #76]	; (801181c <__sinit+0x6c>)
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	62a2      	str	r2, [r4, #40]	; 0x28
 80117d4:	42a3      	cmp	r3, r4
 80117d6:	bf04      	itt	eq
 80117d8:	2301      	moveq	r3, #1
 80117da:	61a3      	streq	r3, [r4, #24]
 80117dc:	f000 f820 	bl	8011820 <__sfp>
 80117e0:	6060      	str	r0, [r4, #4]
 80117e2:	4620      	mov	r0, r4
 80117e4:	f000 f81c 	bl	8011820 <__sfp>
 80117e8:	60a0      	str	r0, [r4, #8]
 80117ea:	4620      	mov	r0, r4
 80117ec:	f000 f818 	bl	8011820 <__sfp>
 80117f0:	2200      	movs	r2, #0
 80117f2:	2104      	movs	r1, #4
 80117f4:	60e0      	str	r0, [r4, #12]
 80117f6:	6860      	ldr	r0, [r4, #4]
 80117f8:	f7ff ff82 	bl	8011700 <std>
 80117fc:	2201      	movs	r2, #1
 80117fe:	2109      	movs	r1, #9
 8011800:	68a0      	ldr	r0, [r4, #8]
 8011802:	f7ff ff7d 	bl	8011700 <std>
 8011806:	2202      	movs	r2, #2
 8011808:	2112      	movs	r1, #18
 801180a:	68e0      	ldr	r0, [r4, #12]
 801180c:	f7ff ff78 	bl	8011700 <std>
 8011810:	2301      	movs	r3, #1
 8011812:	61a3      	str	r3, [r4, #24]
 8011814:	e7d2      	b.n	80117bc <__sinit+0xc>
 8011816:	bf00      	nop
 8011818:	08011e1c 	.word	0x08011e1c
 801181c:	08011749 	.word	0x08011749

08011820 <__sfp>:
 8011820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011822:	4607      	mov	r7, r0
 8011824:	f7ff ffac 	bl	8011780 <__sfp_lock_acquire>
 8011828:	4b1e      	ldr	r3, [pc, #120]	; (80118a4 <__sfp+0x84>)
 801182a:	681e      	ldr	r6, [r3, #0]
 801182c:	69b3      	ldr	r3, [r6, #24]
 801182e:	b913      	cbnz	r3, 8011836 <__sfp+0x16>
 8011830:	4630      	mov	r0, r6
 8011832:	f7ff ffbd 	bl	80117b0 <__sinit>
 8011836:	3648      	adds	r6, #72	; 0x48
 8011838:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801183c:	3b01      	subs	r3, #1
 801183e:	d503      	bpl.n	8011848 <__sfp+0x28>
 8011840:	6833      	ldr	r3, [r6, #0]
 8011842:	b30b      	cbz	r3, 8011888 <__sfp+0x68>
 8011844:	6836      	ldr	r6, [r6, #0]
 8011846:	e7f7      	b.n	8011838 <__sfp+0x18>
 8011848:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801184c:	b9d5      	cbnz	r5, 8011884 <__sfp+0x64>
 801184e:	4b16      	ldr	r3, [pc, #88]	; (80118a8 <__sfp+0x88>)
 8011850:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011854:	6665      	str	r5, [r4, #100]	; 0x64
 8011856:	60e3      	str	r3, [r4, #12]
 8011858:	f000 f847 	bl	80118ea <__retarget_lock_init_recursive>
 801185c:	f7ff ff96 	bl	801178c <__sfp_lock_release>
 8011860:	2208      	movs	r2, #8
 8011862:	4629      	mov	r1, r5
 8011864:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011868:	6025      	str	r5, [r4, #0]
 801186a:	61a5      	str	r5, [r4, #24]
 801186c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011870:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011874:	f7fd faa3 	bl	800edbe <memset>
 8011878:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801187c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011880:	4620      	mov	r0, r4
 8011882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011884:	3468      	adds	r4, #104	; 0x68
 8011886:	e7d9      	b.n	801183c <__sfp+0x1c>
 8011888:	2104      	movs	r1, #4
 801188a:	4638      	mov	r0, r7
 801188c:	f7ff ff62 	bl	8011754 <__sfmoreglue>
 8011890:	4604      	mov	r4, r0
 8011892:	6030      	str	r0, [r6, #0]
 8011894:	2800      	cmp	r0, #0
 8011896:	d1d5      	bne.n	8011844 <__sfp+0x24>
 8011898:	f7ff ff78 	bl	801178c <__sfp_lock_release>
 801189c:	230c      	movs	r3, #12
 801189e:	603b      	str	r3, [r7, #0]
 80118a0:	e7ee      	b.n	8011880 <__sfp+0x60>
 80118a2:	bf00      	nop
 80118a4:	08011e1c 	.word	0x08011e1c
 80118a8:	ffff0001 	.word	0xffff0001

080118ac <_fwalk_reent>:
 80118ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118b0:	4606      	mov	r6, r0
 80118b2:	4688      	mov	r8, r1
 80118b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80118b8:	2700      	movs	r7, #0
 80118ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80118be:	f1b9 0901 	subs.w	r9, r9, #1
 80118c2:	d505      	bpl.n	80118d0 <_fwalk_reent+0x24>
 80118c4:	6824      	ldr	r4, [r4, #0]
 80118c6:	2c00      	cmp	r4, #0
 80118c8:	d1f7      	bne.n	80118ba <_fwalk_reent+0xe>
 80118ca:	4638      	mov	r0, r7
 80118cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118d0:	89ab      	ldrh	r3, [r5, #12]
 80118d2:	2b01      	cmp	r3, #1
 80118d4:	d907      	bls.n	80118e6 <_fwalk_reent+0x3a>
 80118d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80118da:	3301      	adds	r3, #1
 80118dc:	d003      	beq.n	80118e6 <_fwalk_reent+0x3a>
 80118de:	4629      	mov	r1, r5
 80118e0:	4630      	mov	r0, r6
 80118e2:	47c0      	blx	r8
 80118e4:	4307      	orrs	r7, r0
 80118e6:	3568      	adds	r5, #104	; 0x68
 80118e8:	e7e9      	b.n	80118be <_fwalk_reent+0x12>

080118ea <__retarget_lock_init_recursive>:
 80118ea:	4770      	bx	lr

080118ec <__retarget_lock_acquire_recursive>:
 80118ec:	4770      	bx	lr

080118ee <__retarget_lock_release_recursive>:
 80118ee:	4770      	bx	lr

080118f0 <__swhatbuf_r>:
 80118f0:	b570      	push	{r4, r5, r6, lr}
 80118f2:	460e      	mov	r6, r1
 80118f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118f8:	b096      	sub	sp, #88	; 0x58
 80118fa:	4614      	mov	r4, r2
 80118fc:	2900      	cmp	r1, #0
 80118fe:	461d      	mov	r5, r3
 8011900:	da08      	bge.n	8011914 <__swhatbuf_r+0x24>
 8011902:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011906:	2200      	movs	r2, #0
 8011908:	602a      	str	r2, [r5, #0]
 801190a:	061a      	lsls	r2, r3, #24
 801190c:	d410      	bmi.n	8011930 <__swhatbuf_r+0x40>
 801190e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011912:	e00e      	b.n	8011932 <__swhatbuf_r+0x42>
 8011914:	466a      	mov	r2, sp
 8011916:	f000 f903 	bl	8011b20 <_fstat_r>
 801191a:	2800      	cmp	r0, #0
 801191c:	dbf1      	blt.n	8011902 <__swhatbuf_r+0x12>
 801191e:	9a01      	ldr	r2, [sp, #4]
 8011920:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011924:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011928:	425a      	negs	r2, r3
 801192a:	415a      	adcs	r2, r3
 801192c:	602a      	str	r2, [r5, #0]
 801192e:	e7ee      	b.n	801190e <__swhatbuf_r+0x1e>
 8011930:	2340      	movs	r3, #64	; 0x40
 8011932:	2000      	movs	r0, #0
 8011934:	6023      	str	r3, [r4, #0]
 8011936:	b016      	add	sp, #88	; 0x58
 8011938:	bd70      	pop	{r4, r5, r6, pc}
	...

0801193c <__smakebuf_r>:
 801193c:	898b      	ldrh	r3, [r1, #12]
 801193e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011940:	079d      	lsls	r5, r3, #30
 8011942:	4606      	mov	r6, r0
 8011944:	460c      	mov	r4, r1
 8011946:	d507      	bpl.n	8011958 <__smakebuf_r+0x1c>
 8011948:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801194c:	6023      	str	r3, [r4, #0]
 801194e:	6123      	str	r3, [r4, #16]
 8011950:	2301      	movs	r3, #1
 8011952:	6163      	str	r3, [r4, #20]
 8011954:	b002      	add	sp, #8
 8011956:	bd70      	pop	{r4, r5, r6, pc}
 8011958:	ab01      	add	r3, sp, #4
 801195a:	466a      	mov	r2, sp
 801195c:	f7ff ffc8 	bl	80118f0 <__swhatbuf_r>
 8011960:	9900      	ldr	r1, [sp, #0]
 8011962:	4605      	mov	r5, r0
 8011964:	4630      	mov	r0, r6
 8011966:	f7ff f965 	bl	8010c34 <_malloc_r>
 801196a:	b948      	cbnz	r0, 8011980 <__smakebuf_r+0x44>
 801196c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011970:	059a      	lsls	r2, r3, #22
 8011972:	d4ef      	bmi.n	8011954 <__smakebuf_r+0x18>
 8011974:	f023 0303 	bic.w	r3, r3, #3
 8011978:	f043 0302 	orr.w	r3, r3, #2
 801197c:	81a3      	strh	r3, [r4, #12]
 801197e:	e7e3      	b.n	8011948 <__smakebuf_r+0xc>
 8011980:	4b0d      	ldr	r3, [pc, #52]	; (80119b8 <__smakebuf_r+0x7c>)
 8011982:	62b3      	str	r3, [r6, #40]	; 0x28
 8011984:	89a3      	ldrh	r3, [r4, #12]
 8011986:	6020      	str	r0, [r4, #0]
 8011988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801198c:	6120      	str	r0, [r4, #16]
 801198e:	81a3      	strh	r3, [r4, #12]
 8011990:	9b00      	ldr	r3, [sp, #0]
 8011992:	6163      	str	r3, [r4, #20]
 8011994:	9b01      	ldr	r3, [sp, #4]
 8011996:	b15b      	cbz	r3, 80119b0 <__smakebuf_r+0x74>
 8011998:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801199c:	4630      	mov	r0, r6
 801199e:	f000 f8d1 	bl	8011b44 <_isatty_r>
 80119a2:	b128      	cbz	r0, 80119b0 <__smakebuf_r+0x74>
 80119a4:	89a3      	ldrh	r3, [r4, #12]
 80119a6:	f023 0303 	bic.w	r3, r3, #3
 80119aa:	f043 0301 	orr.w	r3, r3, #1
 80119ae:	81a3      	strh	r3, [r4, #12]
 80119b0:	89a0      	ldrh	r0, [r4, #12]
 80119b2:	4305      	orrs	r5, r0
 80119b4:	81a5      	strh	r5, [r4, #12]
 80119b6:	e7cd      	b.n	8011954 <__smakebuf_r+0x18>
 80119b8:	08011749 	.word	0x08011749

080119bc <_malloc_usable_size_r>:
 80119bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119c0:	1f18      	subs	r0, r3, #4
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	bfbc      	itt	lt
 80119c6:	580b      	ldrlt	r3, [r1, r0]
 80119c8:	18c0      	addlt	r0, r0, r3
 80119ca:	4770      	bx	lr

080119cc <_raise_r>:
 80119cc:	291f      	cmp	r1, #31
 80119ce:	b538      	push	{r3, r4, r5, lr}
 80119d0:	4604      	mov	r4, r0
 80119d2:	460d      	mov	r5, r1
 80119d4:	d904      	bls.n	80119e0 <_raise_r+0x14>
 80119d6:	2316      	movs	r3, #22
 80119d8:	6003      	str	r3, [r0, #0]
 80119da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119de:	bd38      	pop	{r3, r4, r5, pc}
 80119e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80119e2:	b112      	cbz	r2, 80119ea <_raise_r+0x1e>
 80119e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80119e8:	b94b      	cbnz	r3, 80119fe <_raise_r+0x32>
 80119ea:	4620      	mov	r0, r4
 80119ec:	f000 f830 	bl	8011a50 <_getpid_r>
 80119f0:	462a      	mov	r2, r5
 80119f2:	4601      	mov	r1, r0
 80119f4:	4620      	mov	r0, r4
 80119f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119fa:	f000 b817 	b.w	8011a2c <_kill_r>
 80119fe:	2b01      	cmp	r3, #1
 8011a00:	d00a      	beq.n	8011a18 <_raise_r+0x4c>
 8011a02:	1c59      	adds	r1, r3, #1
 8011a04:	d103      	bne.n	8011a0e <_raise_r+0x42>
 8011a06:	2316      	movs	r3, #22
 8011a08:	6003      	str	r3, [r0, #0]
 8011a0a:	2001      	movs	r0, #1
 8011a0c:	e7e7      	b.n	80119de <_raise_r+0x12>
 8011a0e:	2400      	movs	r4, #0
 8011a10:	4628      	mov	r0, r5
 8011a12:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011a16:	4798      	blx	r3
 8011a18:	2000      	movs	r0, #0
 8011a1a:	e7e0      	b.n	80119de <_raise_r+0x12>

08011a1c <raise>:
 8011a1c:	4b02      	ldr	r3, [pc, #8]	; (8011a28 <raise+0xc>)
 8011a1e:	4601      	mov	r1, r0
 8011a20:	6818      	ldr	r0, [r3, #0]
 8011a22:	f7ff bfd3 	b.w	80119cc <_raise_r>
 8011a26:	bf00      	nop
 8011a28:	20000030 	.word	0x20000030

08011a2c <_kill_r>:
 8011a2c:	b538      	push	{r3, r4, r5, lr}
 8011a2e:	2300      	movs	r3, #0
 8011a30:	4d06      	ldr	r5, [pc, #24]	; (8011a4c <_kill_r+0x20>)
 8011a32:	4604      	mov	r4, r0
 8011a34:	4608      	mov	r0, r1
 8011a36:	4611      	mov	r1, r2
 8011a38:	602b      	str	r3, [r5, #0]
 8011a3a:	f7f3 faed 	bl	8005018 <_kill>
 8011a3e:	1c43      	adds	r3, r0, #1
 8011a40:	d102      	bne.n	8011a48 <_kill_r+0x1c>
 8011a42:	682b      	ldr	r3, [r5, #0]
 8011a44:	b103      	cbz	r3, 8011a48 <_kill_r+0x1c>
 8011a46:	6023      	str	r3, [r4, #0]
 8011a48:	bd38      	pop	{r3, r4, r5, pc}
 8011a4a:	bf00      	nop
 8011a4c:	20000674 	.word	0x20000674

08011a50 <_getpid_r>:
 8011a50:	f7f3 bada 	b.w	8005008 <_getpid>

08011a54 <__sread>:
 8011a54:	b510      	push	{r4, lr}
 8011a56:	460c      	mov	r4, r1
 8011a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a5c:	f000 f894 	bl	8011b88 <_read_r>
 8011a60:	2800      	cmp	r0, #0
 8011a62:	bfab      	itete	ge
 8011a64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011a66:	89a3      	ldrhlt	r3, [r4, #12]
 8011a68:	181b      	addge	r3, r3, r0
 8011a6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011a6e:	bfac      	ite	ge
 8011a70:	6563      	strge	r3, [r4, #84]	; 0x54
 8011a72:	81a3      	strhlt	r3, [r4, #12]
 8011a74:	bd10      	pop	{r4, pc}

08011a76 <__swrite>:
 8011a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a7a:	461f      	mov	r7, r3
 8011a7c:	898b      	ldrh	r3, [r1, #12]
 8011a7e:	4605      	mov	r5, r0
 8011a80:	460c      	mov	r4, r1
 8011a82:	05db      	lsls	r3, r3, #23
 8011a84:	4616      	mov	r6, r2
 8011a86:	d505      	bpl.n	8011a94 <__swrite+0x1e>
 8011a88:	2302      	movs	r3, #2
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a90:	f000 f868 	bl	8011b64 <_lseek_r>
 8011a94:	89a3      	ldrh	r3, [r4, #12]
 8011a96:	4632      	mov	r2, r6
 8011a98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a9c:	4628      	mov	r0, r5
 8011a9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011aa2:	81a3      	strh	r3, [r4, #12]
 8011aa4:	463b      	mov	r3, r7
 8011aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011aaa:	f000 b817 	b.w	8011adc <_write_r>

08011aae <__sseek>:
 8011aae:	b510      	push	{r4, lr}
 8011ab0:	460c      	mov	r4, r1
 8011ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ab6:	f000 f855 	bl	8011b64 <_lseek_r>
 8011aba:	1c43      	adds	r3, r0, #1
 8011abc:	89a3      	ldrh	r3, [r4, #12]
 8011abe:	bf15      	itete	ne
 8011ac0:	6560      	strne	r0, [r4, #84]	; 0x54
 8011ac2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011ac6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011aca:	81a3      	strheq	r3, [r4, #12]
 8011acc:	bf18      	it	ne
 8011ace:	81a3      	strhne	r3, [r4, #12]
 8011ad0:	bd10      	pop	{r4, pc}

08011ad2 <__sclose>:
 8011ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ad6:	f000 b813 	b.w	8011b00 <_close_r>
	...

08011adc <_write_r>:
 8011adc:	b538      	push	{r3, r4, r5, lr}
 8011ade:	4604      	mov	r4, r0
 8011ae0:	4d06      	ldr	r5, [pc, #24]	; (8011afc <_write_r+0x20>)
 8011ae2:	4608      	mov	r0, r1
 8011ae4:	4611      	mov	r1, r2
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	602a      	str	r2, [r5, #0]
 8011aea:	461a      	mov	r2, r3
 8011aec:	f7f3 facb 	bl	8005086 <_write>
 8011af0:	1c43      	adds	r3, r0, #1
 8011af2:	d102      	bne.n	8011afa <_write_r+0x1e>
 8011af4:	682b      	ldr	r3, [r5, #0]
 8011af6:	b103      	cbz	r3, 8011afa <_write_r+0x1e>
 8011af8:	6023      	str	r3, [r4, #0]
 8011afa:	bd38      	pop	{r3, r4, r5, pc}
 8011afc:	20000674 	.word	0x20000674

08011b00 <_close_r>:
 8011b00:	b538      	push	{r3, r4, r5, lr}
 8011b02:	2300      	movs	r3, #0
 8011b04:	4d05      	ldr	r5, [pc, #20]	; (8011b1c <_close_r+0x1c>)
 8011b06:	4604      	mov	r4, r0
 8011b08:	4608      	mov	r0, r1
 8011b0a:	602b      	str	r3, [r5, #0]
 8011b0c:	f7f3 fad7 	bl	80050be <_close>
 8011b10:	1c43      	adds	r3, r0, #1
 8011b12:	d102      	bne.n	8011b1a <_close_r+0x1a>
 8011b14:	682b      	ldr	r3, [r5, #0]
 8011b16:	b103      	cbz	r3, 8011b1a <_close_r+0x1a>
 8011b18:	6023      	str	r3, [r4, #0]
 8011b1a:	bd38      	pop	{r3, r4, r5, pc}
 8011b1c:	20000674 	.word	0x20000674

08011b20 <_fstat_r>:
 8011b20:	b538      	push	{r3, r4, r5, lr}
 8011b22:	2300      	movs	r3, #0
 8011b24:	4d06      	ldr	r5, [pc, #24]	; (8011b40 <_fstat_r+0x20>)
 8011b26:	4604      	mov	r4, r0
 8011b28:	4608      	mov	r0, r1
 8011b2a:	4611      	mov	r1, r2
 8011b2c:	602b      	str	r3, [r5, #0]
 8011b2e:	f7f3 fad2 	bl	80050d6 <_fstat>
 8011b32:	1c43      	adds	r3, r0, #1
 8011b34:	d102      	bne.n	8011b3c <_fstat_r+0x1c>
 8011b36:	682b      	ldr	r3, [r5, #0]
 8011b38:	b103      	cbz	r3, 8011b3c <_fstat_r+0x1c>
 8011b3a:	6023      	str	r3, [r4, #0]
 8011b3c:	bd38      	pop	{r3, r4, r5, pc}
 8011b3e:	bf00      	nop
 8011b40:	20000674 	.word	0x20000674

08011b44 <_isatty_r>:
 8011b44:	b538      	push	{r3, r4, r5, lr}
 8011b46:	2300      	movs	r3, #0
 8011b48:	4d05      	ldr	r5, [pc, #20]	; (8011b60 <_isatty_r+0x1c>)
 8011b4a:	4604      	mov	r4, r0
 8011b4c:	4608      	mov	r0, r1
 8011b4e:	602b      	str	r3, [r5, #0]
 8011b50:	f7f3 fad1 	bl	80050f6 <_isatty>
 8011b54:	1c43      	adds	r3, r0, #1
 8011b56:	d102      	bne.n	8011b5e <_isatty_r+0x1a>
 8011b58:	682b      	ldr	r3, [r5, #0]
 8011b5a:	b103      	cbz	r3, 8011b5e <_isatty_r+0x1a>
 8011b5c:	6023      	str	r3, [r4, #0]
 8011b5e:	bd38      	pop	{r3, r4, r5, pc}
 8011b60:	20000674 	.word	0x20000674

08011b64 <_lseek_r>:
 8011b64:	b538      	push	{r3, r4, r5, lr}
 8011b66:	4604      	mov	r4, r0
 8011b68:	4d06      	ldr	r5, [pc, #24]	; (8011b84 <_lseek_r+0x20>)
 8011b6a:	4608      	mov	r0, r1
 8011b6c:	4611      	mov	r1, r2
 8011b6e:	2200      	movs	r2, #0
 8011b70:	602a      	str	r2, [r5, #0]
 8011b72:	461a      	mov	r2, r3
 8011b74:	f7f3 faca 	bl	800510c <_lseek>
 8011b78:	1c43      	adds	r3, r0, #1
 8011b7a:	d102      	bne.n	8011b82 <_lseek_r+0x1e>
 8011b7c:	682b      	ldr	r3, [r5, #0]
 8011b7e:	b103      	cbz	r3, 8011b82 <_lseek_r+0x1e>
 8011b80:	6023      	str	r3, [r4, #0]
 8011b82:	bd38      	pop	{r3, r4, r5, pc}
 8011b84:	20000674 	.word	0x20000674

08011b88 <_read_r>:
 8011b88:	b538      	push	{r3, r4, r5, lr}
 8011b8a:	4604      	mov	r4, r0
 8011b8c:	4d06      	ldr	r5, [pc, #24]	; (8011ba8 <_read_r+0x20>)
 8011b8e:	4608      	mov	r0, r1
 8011b90:	4611      	mov	r1, r2
 8011b92:	2200      	movs	r2, #0
 8011b94:	602a      	str	r2, [r5, #0]
 8011b96:	461a      	mov	r2, r3
 8011b98:	f7f3 fa58 	bl	800504c <_read>
 8011b9c:	1c43      	adds	r3, r0, #1
 8011b9e:	d102      	bne.n	8011ba6 <_read_r+0x1e>
 8011ba0:	682b      	ldr	r3, [r5, #0]
 8011ba2:	b103      	cbz	r3, 8011ba6 <_read_r+0x1e>
 8011ba4:	6023      	str	r3, [r4, #0]
 8011ba6:	bd38      	pop	{r3, r4, r5, pc}
 8011ba8:	20000674 	.word	0x20000674

08011bac <_init>:
 8011bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bae:	bf00      	nop
 8011bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bb2:	bc08      	pop	{r3}
 8011bb4:	469e      	mov	lr, r3
 8011bb6:	4770      	bx	lr

08011bb8 <_fini>:
 8011bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bba:	bf00      	nop
 8011bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bbe:	bc08      	pop	{r3}
 8011bc0:	469e      	mov	lr, r3
 8011bc2:	4770      	bx	lr
